
spectral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080065a8  080065a8  000165a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006870  08006870  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006870  08006870  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006870  08006870  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001dc  08006a54  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006a54  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2b4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001945  00000000  00000000  0002b4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002d790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ca95  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089de  00000000  00000000  0004aad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a80cb  00000000  00000000  000534b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  000fb5fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006590 	.word	0x08006590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006590 	.word	0x08006590

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <check_error>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int check_error() {
 8000bb8:	b4b0      	push	{r4, r5, r7}
 8000bba:	af00      	add	r7, sp, #0
	if (ret != HAL_OK) {
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <check_error+0x2c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00a      	beq.n	8000bda <check_error+0x22>
		strcpy((char*)buf, "Err __LINE__ \r\n");
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <check_error+0x30>)
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <check_error+0x34>)
 8000bc8:	4614      	mov	r4, r2
 8000bca:	461d      	mov	r5, r3
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	6020      	str	r0, [r4, #0]
 8000bd0:	6061      	str	r1, [r4, #4]
 8000bd2:	60a2      	str	r2, [r4, #8]
 8000bd4:	60e3      	str	r3, [r4, #12]
		return 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <check_error+0x24>
	}
	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bcb0      	pop	{r4, r5, r7}
 8000be2:	4770      	bx	lr
 8000be4:	200001f8 	.word	0x200001f8
 8000be8:	20000254 	.word	0x20000254
 8000bec:	080065a8 	.word	0x080065a8

08000bf0 <HAL_byte_read>:

uint8_t HAL_byte_read(uint8_t device_reg) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	//transmits the address to read from
	buf[0] = device_reg;
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_byte_read+0x5c>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	7013      	strb	r3, [r2, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS, buf, 1, HAL_MAX_DELAY);
 8000c00:	2349      	movs	r3, #73	; 0x49
 8000c02:	b299      	uxth	r1, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_byte_read+0x5c>)
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <HAL_byte_read+0x60>)
 8000c10:	f001 f826 	bl	8001c60 <HAL_I2C_Master_Transmit>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_byte_read+0x64>)
 8000c1a:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c1c:	f7ff ffcc 	bl	8000bb8 <check_error>

	//reads from address sent above
	ret = HAL_I2C_Master_Receive(&hi2c1, DEVICE_SLAVE_ADDRESS, buf, 1, HAL_MAX_DELAY);
 8000c20:	2349      	movs	r3, #73	; 0x49
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_byte_read+0x5c>)
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_byte_read+0x60>)
 8000c30:	f001 f90a 	bl	8001e48 <HAL_I2C_Master_Receive>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_byte_read+0x64>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c3c:	f7ff ffbc 	bl	8000bb8 <check_error>
	return buf[0];
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_byte_read+0x5c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000254 	.word	0x20000254
 8000c50:	20000208 	.word	0x20000208
 8000c54:	200001f8 	.word	0x200001f8

08000c58 <HAL_byte_write>:

void HAL_byte_write(uint8_t addr, uint8_t data) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	buf[0] = addr;
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <HAL_byte_write+0x44>)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	7013      	strb	r3, [r2, #0]
	buf[1] = data;
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_byte_write+0x44>)
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	7053      	strb	r3, [r2, #1]

	//SMBUS docs first byte is addr to write to, second is data
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS, buf, 2, HAL_MAX_DELAY);
 8000c74:	2349      	movs	r3, #73	; 0x49
 8000c76:	b299      	uxth	r1, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2302      	movs	r3, #2
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_byte_write+0x44>)
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <HAL_byte_write+0x48>)
 8000c84:	f000 ffec 	bl	8001c60 <HAL_I2C_Master_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_byte_write+0x4c>)
 8000c8e:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c90:	f7ff ff92 	bl	8000bb8 <check_error>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000254 	.word	0x20000254
 8000ca0:	20000208 	.word	0x20000208
 8000ca4:	200001f8 	.word	0x200001f8

08000ca8 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t d;

	status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff9a 	bl	8000bf0 <HAL_byte_read>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <virtual_read+0x30>
		d = HAL_byte_read(I2C_AS72XX_SLAVE_READ_REG);
 8000cca:	2302      	movs	r3, #2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff8e 	bl	8000bf0 <HAL_byte_read>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73bb      	strb	r3, [r7, #14]
	}

	while(1) {
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff87 	bl	8000bf0 <HAL_byte_read>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	73fb      	strb	r3, [r7, #15]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <virtual_read+0x50>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f000 fc7b 	bl	80015ec <HAL_Delay>
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000cf6:	e7ef      	b.n	8000cd8 <virtual_read+0x30>
			break;
 8000cf8:	bf00      	nop
	}

	HAL_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffa8 	bl	8000c58 <HAL_byte_write>

	while(1) {
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff6f 	bl	8000bf0 <HAL_byte_read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <virtual_read+0x80>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000d20:	2005      	movs	r0, #5
 8000d22:	f000 fc63 	bl	80015ec <HAL_Delay>
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d26:	e7ef      	b.n	8000d08 <virtual_read+0x60>
			break;
 8000d28:	bf00      	nop
	}

	d = HAL_byte_read( I2C_AS72XX_SLAVE_READ_REG);
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff5e 	bl	8000bf0 <HAL_byte_read>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73bb      	strb	r3, [r7, #14]
	return d;
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	71bb      	strb	r3, [r7, #6]
	uint8_t status;

	while(1) {
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d52:	2300      	movs	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff4a 	bl	8000bf0 <HAL_byte_read>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <virtual_write+0x30>
			break;
		}
		HAL_Delay(5);
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f000 fc3e 	bl	80015ec <HAL_Delay>
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d70:	e7ef      	b.n	8000d52 <virtual_write+0x10>
			break;
 8000d72:	bf00      	nop
	}

	HAL_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8000d74:	2301      	movs	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	4610      	mov	r0, r2
 8000d84:	f7ff ff68 	bl	8000c58 <HAL_byte_write>

	while(1) {
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff2f 	bl	8000bf0 <HAL_byte_read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <virtual_write+0x66>
			break;
		}
		HAL_Delay(5);
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fc23 	bl	80015ec <HAL_Delay>
		status = HAL_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000da6:	e7ef      	b.n	8000d88 <virtual_write+0x46>
			break;
 8000da8:	bf00      	nop
	}

	HAL_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
 8000daa:	2301      	movs	r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	79ba      	ldrb	r2, [r7, #6]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff50 	bl	8000c58 <HAL_byte_write>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <get_decimal>:

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff68 	bl	8000ca8 <virtual_read>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	81fb      	strh	r3, [r7, #14]
	return high | (virtual_read(virtual_reg_l));
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff60 	bl	8000ca8 <virtual_read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b29b      	uxth	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <init_channel>:

void init_channel(Channel *ch, uint8_t lsb_r, uint8_t msb_r) {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	70fb      	strb	r3, [r7, #3]
 8000e06:	4613      	mov	r3, r2
 8000e08:	70bb      	strb	r3, [r7, #2]
	ch->color_data = 0;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	709a      	strb	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	78ba      	ldrb	r2, [r7, #2]
 8000e1a:	705a      	strb	r2, [r3, #1]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <init_device>:

//not the most readable code..
//dev channels start at 0x08 and increase by 8 up until 0x13

void init_device(Device *dev, uint8_t dev_register) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	dev->dev_register = dev_register;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = RAW_VALUE_RGA_LOW;
 8000e3a:	2309      	movs	r3, #9
 8000e3c:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e018      	b.n	8000e76 <init_device+0x4e>
		init_channel(dev->channels[i], START_REG + (2 * i), START_REG + (2 * i) + 1);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	6858      	ldr	r0, [r3, #4]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	4413      	add	r3, r2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f7ff ffc5 	bl	8000dfa <init_channel>
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	3301      	adds	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d9e3      	bls.n	8000e44 <init_device+0x1c>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b092      	sub	sp, #72	; 0x48
 8000e88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t buf[30];

	Device *triad_dev_1 = NULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
	init_device(triad_dev_1, 0x00);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e92:	f7ff ffc9 	bl	8000e28 <init_device>

	Device *triad_dev_2 = NULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
	init_device(triad_dev_2, 0x01);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e9e:	f7ff ffc3 	bl	8000e28 <init_device>

	Device *triad_dev_3 = NULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
	init_device(triad_dev_3, 0x02);
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eaa:	f7ff ffbd 	bl	8000e28 <init_device>

	Device *triad[3] = { triad_dev_1, triad_dev_2, triad_dev_3 };
 8000eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb8:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fb31 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f899 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f967 	bl	8001194 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec6:	f000 f935 	bl	8001134 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eca:	f000 f8f3 	bl	80010b4 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (uint8_t i = 0; i < 3; ++i) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000ed4:	e06b      	b.n	8000fae <main+0x12a>
		  virtual_write(DEV_SEL, triad[i]->dev_register);
 8000ed6:	234f      	movs	r3, #79	; 0x4f
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ee4:	440b      	add	r3, r1
 8000ee6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f7ff ff27 	bl	8000d42 <virtual_write>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000efa:	e04f      	b.n	8000f9c <main+0x118>
			  Channel *channel = triad[i]->channels[j];
 8000efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f06:	4413      	add	r3, r2
 8000f08:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000f0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f7ff ff4c 	bl	8000dc0 <get_decimal>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	709a      	strb	r2, [r3, #2]

			  //complicated way to print "channel {x} : {data}"
			  sprintf((char*)buf , "channel %u : %f\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8000f30:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f42:	4413      	add	r3, r2
 8000f44:	461d      	mov	r5, r3
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f52:	ee17 0a90 	vmov	r0, s15
 8000f56:	f7ff faff 	bl	8000558 <__aeabi_f2d>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	f107 000c 	add.w	r0, r7, #12
 8000f62:	e9cd 3400 	strd	r3, r4, [sp]
 8000f66:	462a      	mov	r2, r5
 8000f68:	491f      	ldr	r1, [pc, #124]	; (8000fe8 <main+0x164>)
 8000f6a:	f003 ff31 	bl	8004dd0 <siprintf>

			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff f934 	bl	80001e0 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f107 010c 	add.w	r1, r7, #12
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	4819      	ldr	r0, [pc, #100]	; (8000fec <main+0x168>)
 8000f86:	f002 fe85 	bl	8003c94 <HAL_UART_Transmit>
			  HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f000 fb2d 	bl	80015ec <HAL_Delay>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000f92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f96:	3301      	adds	r3, #1
 8000f98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000f9c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d9ab      	bls.n	8000efc <main+0x78>
	  for (uint8_t i = 0; i < 3; ++i) {
 8000fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d98f      	bls.n	8000ed6 <main+0x52>
		  }
	  }

	  strcpy((char*)buf, "Hello!\r\n");
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <main+0x16c>)
 8000fbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fbe:	c303      	stmia	r3!, {r0, r1}
 8000fc0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f90a 	bl	80001e0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 010c 	add.w	r1, r7, #12
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <main+0x168>)
 8000fda:	f002 fe5b 	bl	8003c94 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000fde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe2:	f000 fb03 	bl	80015ec <HAL_Delay>
	  for (uint8_t i = 0; i < 3; ++i) {
 8000fe6:	e772      	b.n	8000ece <main+0x4a>
 8000fe8:	080065b8 	.word	0x080065b8
 8000fec:	20000274 	.word	0x20000274
 8000ff0:	080065cc 	.word	0x080065cc

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a6      	sub	sp, #152	; 0x98
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fa80 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2258      	movs	r2, #88	; 0x58
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fa72 	bl	8004508 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800103c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001040:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fa66 	bl	8002524 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800105e:	f000 f913 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f966 	bl	8003350 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108a:	f000 f8fd 	bl	8001288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800108e:	2322      	movs	r3, #34	; 0x22
 8001090:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fb8d 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010a8:	f000 f8ee 	bl	8001288 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3798      	adds	r7, #152	; 0x98
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C1_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C1_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_I2C1_Init+0x74>)
 80010f0:	f000 fd26 	bl	8001b40 <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 f8c5 	bl	8001288 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C1_Init+0x74>)
 8001102:	f001 f977 	bl	80023f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 f8bc 	bl	8001288 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_I2C1_Init+0x74>)
 8001114:	f001 f9b9 	bl	800248a <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 f8b3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000208 	.word	0x20000208
 800112c:	40005400 	.word	0x40005400
 8001130:	2000090e 	.word	0x2000090e

08001134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_USART2_UART_Init+0x58>)
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <MX_USART2_UART_Init+0x5c>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001140:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x58>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x58>)
 8001178:	f002 fd3e 	bl	8003bf8 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001182:	f000 f881 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000274 	.word	0x20000274
 8001190:	40004400 	.word	0x40004400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_GPIO_Init+0xe8>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <MX_GPIO_Init+0xe8>)
 80011b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_GPIO_Init+0xe8>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MX_GPIO_Init+0xe8>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a2d      	ldr	r2, [pc, #180]	; (800127c <MX_GPIO_Init+0xe8>)
 80011c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_GPIO_Init+0xe8>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_GPIO_Init+0xe8>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <MX_GPIO_Init+0xe8>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_GPIO_Init+0xe8>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_GPIO_Init+0xe8>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_GPIO_Init+0xe8>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0xe8>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fc7d 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_GPIO_Init+0xec>)
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4816      	ldr	r0, [pc, #88]	; (8001284 <MX_GPIO_Init+0xf0>)
 800122c:	f000 fae6 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001230:	2320      	movs	r3, #32
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fad7 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001260:	2307      	movs	r3, #7
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f000 fac5 	bl	80017fc <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	10210000 	.word	0x10210000
 8001284:	48000800 	.word	0x48000800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x44>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x44>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x44>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x44>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ce:	2007      	movs	r0, #7
 80012d0:	f000 fa60 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_I2C_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d128      	bne.n	8001354 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_I2C_MspInit+0x80>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_I2C_MspInit+0x80>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_I2C_MspInit+0x80>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001320:	2312      	movs	r3, #18
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132c:	2304      	movs	r3, #4
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_I2C_MspInit+0x84>)
 8001338:	f000 fa60 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_I2C_MspInit+0x80>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_MspInit+0x80>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	61d3      	str	r3, [r2, #28]
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_I2C_MspInit+0x80>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_UART_MspInit+0x7c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d128      	bne.n	80013dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x80>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_UART_MspInit+0x80>)
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_UART_MspInit+0x80>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x80>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x80>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6153      	str	r3, [r2, #20]
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x80>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f000 fa10 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40021000 	.word	0x40021000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f8b4 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x50>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x16>
		heap_end = &end;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <_sbrk+0x50>)
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <_sbrk+0x54>)
 800145c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <_sbrk+0x50>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <_sbrk+0x50>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	466a      	mov	r2, sp
 800146e:	4293      	cmp	r3, r2
 8001470:	d907      	bls.n	8001482 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001472:	f003 f81f 	bl	80044b4 <__errno>
 8001476:	4602      	mov	r2, r0
 8001478:	230c      	movs	r3, #12
 800147a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	e006      	b.n	8001490 <_sbrk+0x48>
	}

	heap_end += incr;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <_sbrk+0x50>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a03      	ldr	r2, [pc, #12]	; (8001498 <_sbrk+0x50>)
 800148c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200001fc 	.word	0x200001fc
 800149c:	20000300 	.word	0x20000300

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SystemInit+0x28>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <SystemInit+0x28>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SystemInit+0x28>)
 80014b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ba:	609a      	str	r2, [r3, #8]
#endif
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014d2:	e003      	b.n	80014dc <LoopCopyDataInit>

080014d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014da:	3104      	adds	r1, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <LoopForever+0xa>)
	ldr	r3, =_edata
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014e4:	d3f6      	bcc.n	80014d4 <CopyDataInit>
	ldr	r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014e8:	e002      	b.n	80014f0 <LoopFillZerobss>

080014ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014ec:	f842 3b04 	str.w	r3, [r2], #4

080014f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <LoopForever+0x16>)
	cmp	r2, r3
 80014f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014f4:	d3f9      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f6:	f7ff ffd3 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f002 ffe1 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fe:	f7ff fcc1 	bl	8000e84 <main>

08001502 <LoopForever>:

LoopForever:
    b LoopForever
 8001502:	e7fe      	b.n	8001502 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001504:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001508:	08006878 	.word	0x08006878
	ldr	r0, =_sdata
 800150c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001510:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001514:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001518:	200002fc 	.word	0x200002fc

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f92f 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff feac 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f939 	bl	80017e2 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f90f 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200002f4 	.word	0x200002f4

080015d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200002f4 	.word	0x200002f4

080015ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_Delay+0x40>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000008 	.word	0x20000008

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff5c 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffb0 	bl	8001750 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e160      	b.n	8001ace <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8152 	beq.w	8001ac8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x38>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b12      	cmp	r3, #18
 8001832:	d123      	bne.n	800187c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	6939      	ldr	r1, [r7, #16]
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d00b      	beq.n	80018d0 <HAL_GPIO_Init+0xd4>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80ac 	beq.w	8001ac8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a5d      	ldr	r2, [pc, #372]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001988:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <HAL_GPIO_Init+0x2f4>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b2:	d025      	beq.n	8001a00 <HAL_GPIO_Init+0x204>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d01f      	beq.n	80019fc <HAL_GPIO_Init+0x200>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d019      	beq.n	80019f8 <HAL_GPIO_Init+0x1fc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x300>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x304>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_GPIO_Init+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x308>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1f0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_GPIO_Init+0x1ec>
 80019e4:	2306      	movs	r3, #6
 80019e6:	e00c      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019e8:	2307      	movs	r3, #7
 80019ea:	e00a      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019ec:	2305      	movs	r3, #5
 80019ee:	e008      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 8001a00:	2300      	movs	r3, #0
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a12:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2f4>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a44:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a6e:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a98:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f ae97 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	48001400 	.word	0x48001400
 8001b08:	48001800 	.word	0x48001800
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e081      	b.n	8001c56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fbba 	bl	80012e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e006      	b.n	8001bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d104      	bne.n	8001bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	ea42 0103 	orr.w	r1, r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	021a      	lsls	r2, r3, #8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69d9      	ldr	r1, [r3, #28]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1a      	ldr	r2, [r3, #32]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	817b      	strh	r3, [r7, #10]
 8001c70:	4613      	mov	r3, r2
 8001c72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	f040 80da 	bne.w	8001e36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x30>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0d3      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c98:	f7ff fc9c 	bl	80015d4 <HAL_GetTick>
 8001c9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2319      	movs	r3, #25
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f9e6 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0be      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	893a      	ldrh	r2, [r7, #8]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2bff      	cmp	r3, #255	; 0xff
 8001cea:	d90e      	bls.n	8001d0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	22ff      	movs	r2, #255	; 0xff
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fb48 	bl	8002398 <I2C_TransferConfig>
 8001d08:	e06c      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	8979      	ldrh	r1, [r7, #10]
 8001d1c:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fb37 	bl	8002398 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d2a:	e05b      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6a39      	ldr	r1, [r7, #32]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f9e3 	bl	80020fc <I2C_WaitOnTXISFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e07b      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d034      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x184>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d130      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f975 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e04d      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d90e      	bls.n	8001dc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	22ff      	movs	r2, #255	; 0xff
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	8979      	ldrh	r1, [r7, #10]
 8001db4:	2300      	movs	r3, #0
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 faeb 	bl	8002398 <I2C_TransferConfig>
 8001dc2:	e00f      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	8979      	ldrh	r1, [r7, #10]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fada 	bl	8002398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d19e      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f9c2 	bl	800217c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e01a      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2220      	movs	r2, #32
 8001e08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e16:	400b      	ands	r3, r1
 8001e18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	80002000 	.word	0x80002000
 8001e44:	fe00e800 	.word	0xfe00e800

08001e48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	f040 80db 	bne.w	8002020 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2C_Master_Receive+0x30>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e0d4      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e80:	f7ff fba8 	bl	80015d4 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2319      	movs	r3, #25
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f8f2 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0bf      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2222      	movs	r2, #34	; 0x22
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2210      	movs	r2, #16
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	893a      	ldrh	r2, [r7, #8]
 8001ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2bff      	cmp	r3, #255	; 0xff
 8001ed2:	d90e      	bls.n	8001ef2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	8979      	ldrh	r1, [r7, #10]
 8001ee2:	4b52      	ldr	r3, [pc, #328]	; (800202c <HAL_I2C_Master_Receive+0x1e4>)
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fa54 	bl	8002398 <I2C_TransferConfig>
 8001ef0:	e06d      	b.n	8001fce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8979      	ldrh	r1, [r7, #10]
 8001f04:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_I2C_Master_Receive+0x1e4>)
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fa43 	bl	8002398 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f12:	e05c      	b.n	8001fce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	6a39      	ldr	r1, [r7, #32]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f96b 	bl	80021f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e07c      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d034      	beq.n	8001fce <HAL_I2C_Master_Receive+0x186>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d130      	bne.n	8001fce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	2200      	movs	r2, #0
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f880 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e04d      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d90e      	bls.n	8001fae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	22ff      	movs	r2, #255	; 0xff
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f9f6 	bl	8002398 <I2C_TransferConfig>
 8001fac:	e00f      	b.n	8001fce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	8979      	ldrh	r1, [r7, #10]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f9e5 	bl	8002398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d19d      	bne.n	8001f14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f8cd 	bl	800217c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e01a      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_I2C_Master_Receive+0x1e8>)
 8002000:	400b      	ands	r3, r1
 8002002:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	80002400 	.word	0x80002400
 8002030:	fe00e800 	.word	0xfe00e800

08002034 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d103      	bne.n	8002052 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d007      	beq.n	8002070 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	619a      	str	r2, [r3, #24]
  }
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208c:	e022      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d01e      	beq.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff fa9d 	bl	80015d4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0220 	orr.w	r2, r3, #32
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e00f      	b.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d0cd      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002108:	e02c      	b.n	8002164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8dc 	bl	80022cc <I2C_IsAcknowledgeFailed>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e02a      	b.n	8002174 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d01e      	beq.n	8002164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002126:	f7ff fa55 	bl	80015d4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d302      	bcc.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d113      	bne.n	8002164 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e007      	b.n	8002174 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d1cb      	bne.n	800210a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002188:	e028      	b.n	80021dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f89c 	bl	80022cc <I2C_IsAcknowledgeFailed>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e026      	b.n	80021ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7ff fa19 	bl	80015d4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d1cf      	bne.n	800218a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002200:	e055      	b.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f860 	bl	80022cc <I2C_IsAcknowledgeFailed>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e053      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b20      	cmp	r3, #32
 8002222:	d129      	bne.n	8002278 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d105      	bne.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e03f      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2220      	movs	r2, #32
 8002244:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002252:	400b      	ands	r3, r1
 8002254:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e022      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7ff f9ac 	bl	80015d4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d1a2      	bne.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	fe00e800 	.word	0xfe00e800

080022cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d151      	bne.n	800238a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e6:	e022      	b.n	800232e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d01e      	beq.n	800232e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7ff f970 	bl	80015d4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_IsAcknowledgeFailed+0x3a>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d113      	bne.n	800232e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e02e      	b.n	800238c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b20      	cmp	r3, #32
 800233a:	d1d5      	bne.n	80022e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2210      	movs	r2, #16
 8002342:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2220      	movs	r2, #32
 800234a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fe71 	bl	8002034 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <I2C_IsAcknowledgeFailed+0xc8>)
 800235e:	400b      	ands	r3, r1
 8002360:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0204 	orr.w	r2, r3, #4
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fe00e800 	.word	0xfe00e800

08002398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	817b      	strh	r3, [r7, #10]
 80023a6:	4613      	mov	r3, r2
 80023a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	0d5b      	lsrs	r3, r3, #21
 80023b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <I2C_TransferConfig+0x58>)
 80023ba:	430b      	orrs	r3, r1
 80023bc:	43db      	mvns	r3, r3
 80023be:	ea02 0103 	and.w	r1, r2, r3
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	03ff63ff 	.word	0x03ff63ff

080023f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	d138      	bne.n	800247c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002414:	2302      	movs	r3, #2
 8002416:	e032      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002446:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	d139      	bne.n	8002514 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e033      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800252a:	af00      	add	r7, sp, #0
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f000 bf01 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8160 	beq.w	800280e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800254e:	4bae      	ldr	r3, [pc, #696]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800255a:	4bab      	ldr	r3, [pc, #684]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d159      	bne.n	800261a <HAL_RCC_OscConfig+0xf6>
 8002566:	4ba8      	ldr	r3, [pc, #672]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d152      	bne.n	800261a <HAL_RCC_OscConfig+0xf6>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002588:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x82>
 80025a0:	4b99      	ldr	r3, [pc, #612]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0xae>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80025ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80025da:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80025e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8102 	beq.w	800280c <HAL_RCC_OscConfig+0x2e8>
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80fc 	bne.w	800280c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f000 be93 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x110>
 8002626:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e030      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x134>
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a71      	ldr	r2, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x15a>
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800266a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a64      	ldr	r2, [pc, #400]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a61      	ldr	r2, [pc, #388]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5e      	ldr	r2, [pc, #376]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 8002690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d059      	beq.n	8002754 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe ff98 	bl	80015d4 <HAL_GetTick>
 80026a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026aa:	f7fe ff93 	bl	80015d4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d902      	bls.n	80026c0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f000 be40 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
 80026c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80026d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1ce>
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e015      	b.n	800271e <HAL_RCC_OscConfig+0x1fa>
 80026f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800270e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002722:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002726:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800272a:	fa92 f2a2 	rbit	r2, r2
 800272e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002732:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002736:	fab2 f282 	clz	r2, r2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ab      	beq.n	80026aa <HAL_RCC_OscConfig+0x186>
 8002752:	e05c      	b.n	800280e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe ff3e 	bl	80015d4 <HAL_GetTick>
 8002758:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275e:	f7fe ff39 	bl	80015d4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d902      	bls.n	8002774 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	f000 bde6 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002778:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0x282>
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x2ae>
 80027a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_RCC_OscConfig+0x2e4>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80027da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80027de:	fa92 f2a2 	rbit	r2, r2
 80027e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80027e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f042 0220 	orr.w	r2, r2, #32
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ab      	bne.n	800275e <HAL_RCC_OscConfig+0x23a>
 8002806:	e002      	b.n	800280e <HAL_RCC_OscConfig+0x2ea>
 8002808:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8170 	beq.w	8002afe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800281e:	4bd0      	ldr	r3, [pc, #832]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800282a:	4bcd      	ldr	r3, [pc, #820]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d16d      	bne.n	8002912 <HAL_RCC_OscConfig+0x3ee>
 8002836:	4bca      	ldr	r3, [pc, #808]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800283e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002842:	d166      	bne.n	8002912 <HAL_RCC_OscConfig+0x3ee>
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002856:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_RCC_OscConfig+0x350>
 800286e:	4bbc      	ldr	r3, [pc, #752]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e013      	b.n	800289c <HAL_RCC_OscConfig+0x378>
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800288c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002898:	4bb1      	ldr	r3, [pc, #708]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80028a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80028ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028b2:	fab2 f282 	clz	r2, r2
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	f042 0220 	orr.w	r2, r2, #32
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f002 021f 	and.w	r2, r2, #31
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x3ba>
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f000 bd31 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4ba0      	ldr	r3, [pc, #640]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	21f8      	movs	r1, #248	; 0xf8
 80028ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80028f6:	fa91 f1a1 	rbit	r1, r1
 80028fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80028fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002902:	fab1 f181 	clz	r1, r1
 8002906:	b2c9      	uxtb	r1, r1
 8002908:	408b      	lsls	r3, r1
 800290a:	4995      	ldr	r1, [pc, #596]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002910:	e0f5      	b.n	8002afe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8085 	beq.w	8002a28 <HAL_RCC_OscConfig+0x504>
 800291e:	2301      	movs	r3, #1
 8002920:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002930:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800293e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	461a      	mov	r2, r3
 8002946:	2301      	movs	r3, #1
 8002948:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fe43 	bl	80015d4 <HAL_GetTick>
 800294e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe fe3e 	bl	80015d4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f000 bceb 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800297c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d102      	bne.n	800299a <HAL_RCC_OscConfig+0x476>
 8002994:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e013      	b.n	80029c2 <HAL_RCC_OscConfig+0x49e>
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029be:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2202      	movs	r2, #2
 80029c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029cc:	fa92 f2a2 	rbit	r2, r2
 80029d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80029d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f042 0220 	orr.w	r2, r2, #32
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f002 021f 	and.w	r2, r2, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f202 	lsl.w	r2, r1, r2
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0af      	beq.n	8002954 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	21f8      	movs	r1, #248	; 0xf8
 8002a04:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002a0c:	fa91 f1a1 	rbit	r1, r1
 8002a10:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a14:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a18:	fab1 f181 	clz	r1, r1
 8002a1c:	b2c9      	uxtb	r1, r1
 8002a1e:	408b      	lsls	r3, r1
 8002a20:	494f      	ldr	r1, [pc, #316]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
 8002a26:	e06a      	b.n	8002afe <HAL_RCC_OscConfig+0x5da>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fdbe 	bl	80015d4 <HAL_GetTick>
 8002a58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fdb9 	bl	80015d4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f000 bc66 	b.w	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x580>
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e013      	b.n	8002acc <HAL_RCC_OscConfig+0x5a8>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002abc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_OscConfig+0x63c>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ad2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ad6:	fa92 f2a2 	rbit	r2, r2
 8002ada:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ade:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1af      	bne.n	8002a5e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80da 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d069      	beq.n	8002bec <HAL_RCC_OscConfig+0x6c8>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x640>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2301      	movs	r3, #1
 8002b40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fd47 	bl	80015d4 <HAL_GetTick>
 8002b46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e00d      	b.n	8002b68 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fd42 	bl	80015d4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d905      	bls.n	8002b68 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e3ef      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002b60:	40021000 	.word	0x40021000
 8002b64:	10908120 	.word	0x10908120
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002baa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bac:	4ba4      	ldr	r3, [pc, #656]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	6019      	str	r1, [r3, #0]
 8002bb8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f1a3 	rbit	r1, r3
 8002bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bc6:	6019      	str	r1, [r3, #0]
  return result;
 8002bc8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0b0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x628>
 8002bea:	e06a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x79e>
 8002bec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c02:	601a      	str	r2, [r3, #0]
  return result;
 8002c04:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b8c      	ldr	r3, [pc, #560]	; (8002e44 <HAL_RCC_OscConfig+0x920>)
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fcd9 	bl	80015d4 <HAL_GetTick>
 8002c22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c26:	e009      	b.n	8002c3c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fcd4 	bl	80015d4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e381      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002c3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c70:	2202      	movs	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	6019      	str	r1, [r3, #0]
 8002c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f1a3 	rbit	r1, r3
 8002c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c9e:	6019      	str	r1, [r3, #0]
  return result;
 8002ca0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1b2      	bne.n	8002c28 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8157 	beq.w	8002f80 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d112      	bne.n	8002d0a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4a55      	ldr	r2, [pc, #340]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	61d3      	str	r3, [r2, #28]
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x924>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11a      	bne.n	8002d4c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCC_OscConfig+0x924>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4b      	ldr	r2, [pc, #300]	; (8002e48 <HAL_RCC_OscConfig+0x924>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fc57 	bl	80015d4 <HAL_GetTick>
 8002d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e009      	b.n	8002d40 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fc52 	bl	80015d4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e2ff      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_OscConfig+0x924>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x840>
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	e02f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a0>
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x864>
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a30      	ldr	r2, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a0>
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x888>
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a0>
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fc01 	bl	80015d4 <HAL_GetTick>
 8002dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fbfc 	bl	80015d4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e2a7      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002df0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e1e:	601a      	str	r2, [r3, #0]
  return result;
 8002e20:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x928>
 8002e3a:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <HAL_RCC_OscConfig+0x91c>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	e013      	b.n	8002e68 <HAL_RCC_OscConfig+0x944>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	10908120 	.word	0x10908120
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e50:	2202      	movs	r2, #2
 8002e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	4bc0      	ldr	r3, [pc, #768]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	6011      	str	r1, [r2, #0]
 8002e70:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	fa92 f1a2 	rbit	r1, r2
 8002e7a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e7e:	6011      	str	r1, [r2, #0]
  return result;
 8002e80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	fab2 f282 	clz	r2, r2
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f002 021f 	and.w	r2, r2, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d09a      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x8b4>
 8002ea2:	e063      	b.n	8002f6c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fb96 	bl	80015d4 <HAL_GetTick>
 8002ea8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fb91 	bl	80015d4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e23c      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002ec6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ef4:	601a      	str	r2, [r3, #0]
  return result;
 8002ef6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002efa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d102      	bne.n	8002f16 <HAL_RCC_OscConfig+0x9f2>
 8002f10:	4b95      	ldr	r3, [pc, #596]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	e00d      	b.n	8002f32 <HAL_RCC_OscConfig+0xa0e>
 8002f16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f36:	2102      	movs	r1, #2
 8002f38:	6011      	str	r1, [r2, #0]
 8002f3a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fa92 f1a2 	rbit	r1, r2
 8002f44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f48:	6011      	str	r1, [r2, #0]
  return result;
 8002f4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f002 021f 	and.w	r2, r2, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1a0      	bne.n	8002eae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b7c      	ldr	r3, [pc, #496]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a7b      	ldr	r2, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 81d9 	beq.w	800333e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	f000 81a6 	beq.w	80032e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f040 811e 	bne.w	80031e2 <HAL_RCC_OscConfig+0xcbe>
 8002fa6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fbe:	601a      	str	r2, [r3, #0]
  return result;
 8002fc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fafa 	bl	80015d4 <HAL_GetTick>
 8002fe0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	e009      	b.n	8002ffa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe faf5 	bl	80015d4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1a2      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8002ffa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0xb10>
 800302e:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	e01b      	b.n	800306c <HAL_RCC_OscConfig+0xb48>
 8003034:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f2a3 	rbit	r2, r3
 8003048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	fa93 f2a3 	rbit	r2, r3
 8003062:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003070:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fa92 f1a2 	rbit	r1, r2
 8003080:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003084:	6011      	str	r1, [r2, #0]
  return result;
 8003086:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fab2 f282 	clz	r2, r2
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f042 0220 	orr.w	r2, r2, #32
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f002 021f 	and.w	r2, r2, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d19e      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a8:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f023 020f 	bic.w	r2, r3, #15
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	492c      	ldr	r1, [pc, #176]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a19      	ldr	r1, [r3, #32]
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030f0:	601a      	str	r2, [r3, #0]
  return result;
 80030f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fa61 	bl	80015d4 <HAL_GetTick>
 8003112:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003116:	e009      	b.n	800312c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fa5c 	bl	80015d4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e109      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 800312c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003144:	601a      	str	r2, [r3, #0]
  return result;
 8003146:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800314a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0xc48>
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e01e      	b.n	80031a4 <HAL_RCC_OscConfig+0xc80>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_OscConfig+0xe28>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031bc:	6011      	str	r1, [r2, #0]
  return result;
 80031be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d09b      	beq.n	8003118 <HAL_RCC_OscConfig+0xbf4>
 80031e0:	e0ad      	b.n	800333e <HAL_RCC_OscConfig+0xe1a>
 80031e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031fa:	601a      	str	r2, [r3, #0]
  return result;
 80031fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003200:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800320c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	461a      	mov	r2, r3
 8003214:	2300      	movs	r3, #0
 8003216:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe f9dc 	bl	80015d4 <HAL_GetTick>
 800321c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe f9d7 	bl	80015d4 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e084      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
 8003236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800324e:	601a      	str	r2, [r3, #0]
  return result;
 8003250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_RCC_OscConfig+0xd4c>
 800326a:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_RCC_OscConfig+0xe28>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0xd84>
 8003270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 0318 	add.w	r3, r7, #24
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_RCC_OscConfig+0xe28>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f107 0214 	add.w	r2, r7, #20
 80032ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f107 0214 	add.w	r2, r7, #20
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fa92 f1a2 	rbit	r1, r2
 80032bc:	f107 0210 	add.w	r2, r7, #16
 80032c0:	6011      	str	r1, [r2, #0]
  return result;
 80032c2:	f107 0210 	add.w	r2, r7, #16
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d19e      	bne.n	8003222 <HAL_RCC_OscConfig+0xcfe>
 80032e4:	e02b      	b.n	800333e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e025      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f4:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_RCC_OscConfig+0xe28>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_OscConfig+0xe28>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003308:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	429a      	cmp	r2, r3
 8003314:	d111      	bne.n	800333a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003316:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800331a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003324:	429a      	cmp	r2, r3
 8003326:	d108      	bne.n	800333a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800332c:	f003 020f 	and.w	r2, r3, #15
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b09e      	sub	sp, #120	; 0x78
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e162      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b90      	ldr	r3, [pc, #576]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b8d      	ldr	r3, [pc, #564]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	498b      	ldr	r1, [pc, #556]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e14a      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	497f      	ldr	r1, [pc, #508]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80dc 	beq.w	800357c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d13c      	bne.n	8003446 <HAL_RCC_ClockConfig+0xf6>
 80033cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xa6>
 80033f0:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e00f      	b.n	8003416 <HAL_RCC_ClockConfig+0xc6>
 80033f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	667b      	str	r3, [r7, #100]	; 0x64
 8003404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003408:	663b      	str	r3, [r7, #96]	; 0x60
 800340a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800341a:	65ba      	str	r2, [r7, #88]	; 0x58
 800341c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d17b      	bne.n	800353a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0f3      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d13c      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x178>
 800344e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800345c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_RCC_ClockConfig+0x128>
 8003472:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e00f      	b.n	8003498 <HAL_RCC_ClockConfig+0x148>
 8003478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
 8003486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
 800348c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349c:	63ba      	str	r2, [r7, #56]	; 0x38
 800349e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f002 021f 	and.w	r2, r2, #31
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d13a      	bne.n	800353a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b2      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
 80034c8:	2302      	movs	r3, #2
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x1a0>
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e00d      	b.n	800350c <HAL_RCC_ClockConfig+0x1bc>
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	2302      	movs	r3, #2
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2202      	movs	r2, #2
 800350e:	61ba      	str	r2, [r7, #24]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	617a      	str	r2, [r7, #20]
  return result;
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	f042 0220 	orr.w	r2, r2, #32
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f002 021f 	and.w	r2, r2, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f202 	lsl.w	r2, r1, r2
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e079      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	491a      	ldr	r1, [pc, #104]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fe f842 	bl	80015d4 <HAL_GetTick>
 8003550:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe f83e 	bl	80015d4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e061      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCC_ClockConfig+0x260>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d214      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4906      	ldr	r1, [pc, #24]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_RCC_ClockConfig+0x25c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e040      	b.n	800362e <HAL_RCC_ClockConfig+0x2de>
 80035ac:	40022000 	.word	0x40022000
 80035b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCC_ClockConfig+0x2e8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	491a      	ldr	r1, [pc, #104]	; (8003638 <HAL_RCC_ClockConfig+0x2e8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x2e8>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4912      	ldr	r1, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x2e8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035f2:	f000 f829 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 80035f6:	4601      	mov	r1, r0
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_RCC_ClockConfig+0x2e8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003600:	22f0      	movs	r2, #240	; 0xf0
 8003602:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	fa92 f2a2 	rbit	r2, r2
 800360a:	60fa      	str	r2, [r7, #12]
  return result;
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	40d3      	lsrs	r3, r2
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x2ec>)
 8003618:	5cd3      	ldrb	r3, [r2, r3]
 800361a:	fa21 f303 	lsr.w	r3, r1, r3
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_RCC_ClockConfig+0x2f0>)
 8003620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCC_ClockConfig+0x2f4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd ff90 	bl	800154c <HAL_InitTick>
  
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3778      	adds	r7, #120	; 0x78
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	080065d8 	.word	0x080065d8
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x30>
 8003672:	2b08      	cmp	r3, #8
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x36>
 8003676:	e03f      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc8>)
 800367a:	623b      	str	r3, [r7, #32]
      break;
 800367c:	e03f      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003684:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003688:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	fa92 f2a2 	rbit	r2, r2
 8003690:	607a      	str	r2, [r7, #4]
  return result;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	40d3      	lsrs	r3, r2
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_RCC_GetSysClockFreq+0xcc>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_RCC_GetSysClockFreq+0xc4>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	220f      	movs	r2, #15
 80036ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	fa92 f2a2 	rbit	r2, r2
 80036b4:	60fa      	str	r2, [r7, #12]
  return result;
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	fab2 f282 	clz	r2, r2
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	40d3      	lsrs	r3, r2
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	e007      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036e2:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	623b      	str	r3, [r7, #32]
      break;
 80036f6:	e002      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036fa:	623b      	str	r3, [r7, #32]
      break;
 80036fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003700:	4618      	mov	r0, r3
 8003702:	372c      	adds	r7, #44	; 0x2c
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000
 8003710:	007a1200 	.word	0x007a1200
 8003714:	080065f0 	.word	0x080065f0
 8003718:	08006600 	.word	0x08006600

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800373a:	f7ff ffef 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373e:	4601      	mov	r1, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003748:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800374c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	fa92 f2a2 	rbit	r2, r2
 8003754:	603a      	str	r2, [r7, #0]
  return result;
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	40d3      	lsrs	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	080065e8 	.word	0x080065e8

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800377e:	f7ff ffcd 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003782:	4601      	mov	r1, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800378c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003790:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	fa92 f2a2 	rbit	r2, r2
 8003798:	603a      	str	r2, [r7, #0]
  return result;
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	fab2 f282 	clz	r2, r2
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	40d3      	lsrs	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	080065e8 	.word	0x080065e8

080037bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b092      	sub	sp, #72	; 0x48
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80d7 	beq.w	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e0:	4b4e      	ldr	r3, [pc, #312]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10e      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	61d3      	str	r3, [r2, #28]
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b45      	ldr	r3, [pc, #276]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b42      	ldr	r3, [pc, #264]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a41      	ldr	r2, [pc, #260]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fd fed7 	bl	80015d4 <HAL_GetTick>
 8003826:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fd fed3 	bl	80015d4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	d901      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1d6      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b38      	ldr	r3, [pc, #224]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8084 	beq.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003864:	429a      	cmp	r2, r3
 8003866:	d07c      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	fab3 f383 	clz	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	461a      	mov	r2, r3
 8003892:	2301      	movs	r3, #1
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ba:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04b      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fd fe83 	bl	80015d4 <HAL_GetTick>
 80038ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd fe7f 	bl	80015d4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e180      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	2302      	movs	r3, #2
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003900:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d108      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003916:	4b01      	ldr	r3, [pc, #4]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	e00d      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
 8003924:	10908100 	.word	0x10908100
 8003928:	2302      	movs	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	4ba0      	ldr	r3, [pc, #640]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	613a      	str	r2, [r7, #16]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	60fa      	str	r2, [r7, #12]
  return result;
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0b7      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003962:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4992      	ldr	r1, [pc, #584]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b8e      	ldr	r3, [pc, #568]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	4a8d      	ldr	r2, [pc, #564]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003994:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4985      	ldr	r1, [pc, #532]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	497e      	ldr	r1, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d0:	4b79      	ldr	r3, [pc, #484]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	4976      	ldr	r1, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ee:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f023 0210 	bic.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	496f      	ldr	r1, [pc, #444]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	4967      	ldr	r1, [pc, #412]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f023 0220 	bic.w	r2, r3, #32
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4960      	ldr	r1, [pc, #384]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a48:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	4958      	ldr	r1, [pc, #352]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4951      	ldr	r1, [pc, #324]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4949      	ldr	r1, [pc, #292]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa2:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4942      	ldr	r1, [pc, #264]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	493a      	ldr	r1, [pc, #232]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4933      	ldr	r1, [pc, #204]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003afc:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	492b      	ldr	r1, [pc, #172]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4924      	ldr	r1, [pc, #144]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b38:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	491c      	ldr	r1, [pc, #112]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	4915      	ldr	r1, [pc, #84]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003bb0:	4b01      	ldr	r3, [pc, #4]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3748      	adds	r7, #72	; 0x48
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e040      	b.n	8003c8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fba4 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8c0 	bl	8003dbc <UART_SetConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e022      	b.n	8003c8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 face 	bl	80041f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fb55 	bl	8004334 <UART_CheckIdleState>
 8003c8a:	4603      	mov	r3, r0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	f040 8081 	bne.w	8003db0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_UART_Transmit+0x26>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e079      	b.n	8003db2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x38>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e072      	b.n	8003db2 <HAL_UART_Transmit+0x11e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2221      	movs	r2, #33	; 0x21
 8003cde:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fd fc78 	bl	80015d4 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d108      	bne.n	8003d12 <HAL_UART_Transmit+0x7e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e003      	b.n	8003d1a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d1a:	e02d      	b.n	8003d78 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fb49 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e03d      	b.n	8003db2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	3302      	adds	r3, #2
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e008      	b.n	8003d66 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1cb      	bne.n	8003d1c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fb15 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e009      	b.n	8003db2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4bac      	ldr	r3, [pc, #688]	; (800409c <UART_SetConfig+0x2e0>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	6939      	ldr	r1, [r7, #16]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a9a      	ldr	r2, [pc, #616]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d121      	bne.n	8003e80 <UART_SetConfig+0xc4>
 8003e3c:	4b99      	ldr	r3, [pc, #612]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d817      	bhi.n	8003e78 <UART_SetConfig+0xbc>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x94>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e6d 	.word	0x08003e6d
 8003e58:	08003e73 	.word	0x08003e73
 8003e5c:	08003e67 	.word	0x08003e67
 8003e60:	2301      	movs	r3, #1
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e0b2      	b.n	8003fcc <UART_SetConfig+0x210>
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e0af      	b.n	8003fcc <UART_SetConfig+0x210>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e0ac      	b.n	8003fcc <UART_SetConfig+0x210>
 8003e72:	2308      	movs	r3, #8
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e0a9      	b.n	8003fcc <UART_SetConfig+0x210>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	bf00      	nop
 8003e7e:	e0a5      	b.n	8003fcc <UART_SetConfig+0x210>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a88      	ldr	r2, [pc, #544]	; (80040a8 <UART_SetConfig+0x2ec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d123      	bne.n	8003ed2 <UART_SetConfig+0x116>
 8003e8a:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d012      	beq.n	8003ebe <UART_SetConfig+0x102>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d802      	bhi.n	8003ea4 <UART_SetConfig+0xe8>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <UART_SetConfig+0xf6>
 8003ea2:	e012      	b.n	8003eca <UART_SetConfig+0x10e>
 8003ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea8:	d00c      	beq.n	8003ec4 <UART_SetConfig+0x108>
 8003eaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eae:	d003      	beq.n	8003eb8 <UART_SetConfig+0xfc>
 8003eb0:	e00b      	b.n	8003eca <UART_SetConfig+0x10e>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e089      	b.n	8003fcc <UART_SetConfig+0x210>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e086      	b.n	8003fcc <UART_SetConfig+0x210>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e083      	b.n	8003fcc <UART_SetConfig+0x210>
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e080      	b.n	8003fcc <UART_SetConfig+0x210>
 8003eca:	2310      	movs	r3, #16
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	bf00      	nop
 8003ed0:	e07c      	b.n	8003fcc <UART_SetConfig+0x210>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a75      	ldr	r2, [pc, #468]	; (80040ac <UART_SetConfig+0x2f0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d123      	bne.n	8003f24 <UART_SetConfig+0x168>
 8003edc:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ee8:	d012      	beq.n	8003f10 <UART_SetConfig+0x154>
 8003eea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eee:	d802      	bhi.n	8003ef6 <UART_SetConfig+0x13a>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <UART_SetConfig+0x148>
 8003ef4:	e012      	b.n	8003f1c <UART_SetConfig+0x160>
 8003ef6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003efa:	d00c      	beq.n	8003f16 <UART_SetConfig+0x15a>
 8003efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f00:	d003      	beq.n	8003f0a <UART_SetConfig+0x14e>
 8003f02:	e00b      	b.n	8003f1c <UART_SetConfig+0x160>
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e060      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e05d      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e05a      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e057      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	bf00      	nop
 8003f22:	e053      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a61      	ldr	r2, [pc, #388]	; (80040b0 <UART_SetConfig+0x2f4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d123      	bne.n	8003f76 <UART_SetConfig+0x1ba>
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3a:	d012      	beq.n	8003f62 <UART_SetConfig+0x1a6>
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	d802      	bhi.n	8003f48 <UART_SetConfig+0x18c>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <UART_SetConfig+0x19a>
 8003f46:	e012      	b.n	8003f6e <UART_SetConfig+0x1b2>
 8003f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f4c:	d00c      	beq.n	8003f68 <UART_SetConfig+0x1ac>
 8003f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f52:	d003      	beq.n	8003f5c <UART_SetConfig+0x1a0>
 8003f54:	e00b      	b.n	8003f6e <UART_SetConfig+0x1b2>
 8003f56:	2300      	movs	r3, #0
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e037      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e034      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f62:	2304      	movs	r3, #4
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e031      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e02e      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f6e:	2310      	movs	r3, #16
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	bf00      	nop
 8003f74:	e02a      	b.n	8003fcc <UART_SetConfig+0x210>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <UART_SetConfig+0x2f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d123      	bne.n	8003fc8 <UART_SetConfig+0x20c>
 8003f80:	4b48      	ldr	r3, [pc, #288]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d012      	beq.n	8003fb4 <UART_SetConfig+0x1f8>
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d802      	bhi.n	8003f9a <UART_SetConfig+0x1de>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <UART_SetConfig+0x1ec>
 8003f98:	e012      	b.n	8003fc0 <UART_SetConfig+0x204>
 8003f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f9e:	d00c      	beq.n	8003fba <UART_SetConfig+0x1fe>
 8003fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa4:	d003      	beq.n	8003fae <UART_SetConfig+0x1f2>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x204>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e00e      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e00b      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e008      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e005      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	bf00      	nop
 8003fc6:	e001      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd4:	f040 8090 	bne.w	80040f8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d86c      	bhi.n	80040b8 <UART_SetConfig+0x2fc>
 8003fde:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0x228>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004029 	.word	0x08004029
 8003fec:	08004049 	.word	0x08004049
 8003ff0:	080040b9 	.word	0x080040b9
 8003ff4:	08004065 	.word	0x08004065
 8003ff8:	080040b9 	.word	0x080040b9
 8003ffc:	080040b9 	.word	0x080040b9
 8004000:	080040b9 	.word	0x080040b9
 8004004:	08004085 	.word	0x08004085
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7ff fb94 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 800400c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	61bb      	str	r3, [r7, #24]
        break;
 8004026:	e04a      	b.n	80040be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7ff fba6 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 800402c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	61bb      	str	r3, [r7, #24]
        break;
 8004046:	e03a      	b.n	80040be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004052:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6852      	ldr	r2, [r2, #4]
 800405a:	fbb3 f3f2 	udiv	r3, r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	61bb      	str	r3, [r7, #24]
        break;
 8004062:	e02c      	b.n	80040be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004064:	f7ff faf0 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8004068:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	005a      	lsls	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	441a      	add	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	61bb      	str	r3, [r7, #24]
        break;
 8004082:	e01c      	b.n	80040be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	61bb      	str	r3, [r7, #24]
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x302>
 800409c:	efff69f3 	.word	0xefff69f3
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40004400 	.word	0x40004400
 80040ac:	40004800 	.word	0x40004800
 80040b0:	40004c00 	.word	0x40004c00
 80040b4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
        break;
 80040bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d916      	bls.n	80040f2 <UART_SetConfig+0x336>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d212      	bcs.n	80040f2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	897b      	ldrh	r3, [r7, #10]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	897a      	ldrh	r2, [r7, #10]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e072      	b.n	80041d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
 80040f6:	e06f      	b.n	80041d8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d85b      	bhi.n	80041b6 <UART_SetConfig+0x3fa>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0x348>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004129 	.word	0x08004129
 8004108:	08004147 	.word	0x08004147
 800410c:	08004165 	.word	0x08004165
 8004110:	080041b7 	.word	0x080041b7
 8004114:	08004181 	.word	0x08004181
 8004118:	080041b7 	.word	0x080041b7
 800411c:	080041b7 	.word	0x080041b7
 8004120:	080041b7 	.word	0x080041b7
 8004124:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7ff fb04 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 800412c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085a      	lsrs	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	61bb      	str	r3, [r7, #24]
        break;
 8004144:	e03a      	b.n	80041bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004146:	f7ff fb17 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 800414a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	085a      	lsrs	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	61bb      	str	r3, [r7, #24]
        break;
 8004162:	e02b      	b.n	80041bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800416e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6852      	ldr	r2, [r2, #4]
 8004176:	fbb3 f3f2 	udiv	r3, r3, r2
 800417a:	b29b      	uxth	r3, r3
 800417c:	61bb      	str	r3, [r7, #24]
        break;
 800417e:	e01d      	b.n	80041bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004180:	f7ff fa62 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8004184:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085a      	lsrs	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e00e      	b.n	80041bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	61bb      	str	r3, [r7, #24]
        break;
 80041b4:	e002      	b.n	80041bc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
        break;
 80041ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b0f      	cmp	r3, #15
 80041c0:	d908      	bls.n	80041d4 <UART_SetConfig+0x418>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d204      	bcs.n	80041d4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e001      	b.n	80041d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01a      	beq.n	8004306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d10a      	bne.n	8004306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004342:	f7fd f947 	bl	80015d4 <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d10e      	bne.n	8004374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f82a 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e020      	b.n	80043b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d10e      	bne.n	80043a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f814 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e00a      	b.n	80043b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	e05d      	b.n	800448c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d059      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fd f8fc 	bl	80015d4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <UART_WaitOnFlagUntilTimeout+0x30>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11b      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e042      	b.n	80044ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02b      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004442:	d123      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800445c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e00f      	b.n	80044ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d092      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <__errno>:
 80044b4:	4b01      	ldr	r3, [pc, #4]	; (80044bc <__errno+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0d      	ldr	r6, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1ba4      	subs	r4, r4, r6
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2500      	movs	r5, #0
 80044cc:	42a5      	cmp	r5, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4e0b      	ldr	r6, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f002 f85c 	bl	8006590 <_init>
 80044d8:	1ba4      	subs	r4, r4, r6
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2500      	movs	r5, #0
 80044de:	42a5      	cmp	r5, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e8:	4798      	blx	r3
 80044ea:	3501      	adds	r5, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f2:	4798      	blx	r3
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08006870 	.word	0x08006870
 80044fc:	08006870 	.word	0x08006870
 8004500:	08006870 	.word	0x08006870
 8004504:	08006874 	.word	0x08006874

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <__cvt>:
 8004518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	ec55 4b10 	vmov	r4, r5, d0
 8004520:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004522:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004526:	2d00      	cmp	r5, #0
 8004528:	460e      	mov	r6, r1
 800452a:	4691      	mov	r9, r2
 800452c:	4619      	mov	r1, r3
 800452e:	bfb8      	it	lt
 8004530:	4622      	movlt	r2, r4
 8004532:	462b      	mov	r3, r5
 8004534:	f027 0720 	bic.w	r7, r7, #32
 8004538:	bfbb      	ittet	lt
 800453a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800453e:	461d      	movlt	r5, r3
 8004540:	2300      	movge	r3, #0
 8004542:	232d      	movlt	r3, #45	; 0x2d
 8004544:	bfb8      	it	lt
 8004546:	4614      	movlt	r4, r2
 8004548:	2f46      	cmp	r7, #70	; 0x46
 800454a:	700b      	strb	r3, [r1, #0]
 800454c:	d004      	beq.n	8004558 <__cvt+0x40>
 800454e:	2f45      	cmp	r7, #69	; 0x45
 8004550:	d100      	bne.n	8004554 <__cvt+0x3c>
 8004552:	3601      	adds	r6, #1
 8004554:	2102      	movs	r1, #2
 8004556:	e000      	b.n	800455a <__cvt+0x42>
 8004558:	2103      	movs	r1, #3
 800455a:	ab03      	add	r3, sp, #12
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	ab02      	add	r3, sp, #8
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4632      	mov	r2, r6
 8004564:	4653      	mov	r3, sl
 8004566:	ec45 4b10 	vmov	d0, r4, r5
 800456a:	f000 fcdd 	bl	8004f28 <_dtoa_r>
 800456e:	2f47      	cmp	r7, #71	; 0x47
 8004570:	4680      	mov	r8, r0
 8004572:	d102      	bne.n	800457a <__cvt+0x62>
 8004574:	f019 0f01 	tst.w	r9, #1
 8004578:	d026      	beq.n	80045c8 <__cvt+0xb0>
 800457a:	2f46      	cmp	r7, #70	; 0x46
 800457c:	eb08 0906 	add.w	r9, r8, r6
 8004580:	d111      	bne.n	80045a6 <__cvt+0x8e>
 8004582:	f898 3000 	ldrb.w	r3, [r8]
 8004586:	2b30      	cmp	r3, #48	; 0x30
 8004588:	d10a      	bne.n	80045a0 <__cvt+0x88>
 800458a:	2200      	movs	r2, #0
 800458c:	2300      	movs	r3, #0
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fc faa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004596:	b918      	cbnz	r0, 80045a0 <__cvt+0x88>
 8004598:	f1c6 0601 	rsb	r6, r6, #1
 800459c:	f8ca 6000 	str.w	r6, [sl]
 80045a0:	f8da 3000 	ldr.w	r3, [sl]
 80045a4:	4499      	add	r9, r3
 80045a6:	2200      	movs	r2, #0
 80045a8:	2300      	movs	r3, #0
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	f7fc fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 80045b2:	b938      	cbnz	r0, 80045c4 <__cvt+0xac>
 80045b4:	2230      	movs	r2, #48	; 0x30
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	454b      	cmp	r3, r9
 80045ba:	d205      	bcs.n	80045c8 <__cvt+0xb0>
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	9103      	str	r1, [sp, #12]
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e7f8      	b.n	80045b6 <__cvt+0x9e>
 80045c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045cc:	eba3 0308 	sub.w	r3, r3, r8
 80045d0:	4640      	mov	r0, r8
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	b004      	add	sp, #16
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080045da <__exponent>:
 80045da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045dc:	2900      	cmp	r1, #0
 80045de:	4604      	mov	r4, r0
 80045e0:	bfba      	itte	lt
 80045e2:	4249      	neglt	r1, r1
 80045e4:	232d      	movlt	r3, #45	; 0x2d
 80045e6:	232b      	movge	r3, #43	; 0x2b
 80045e8:	2909      	cmp	r1, #9
 80045ea:	f804 2b02 	strb.w	r2, [r4], #2
 80045ee:	7043      	strb	r3, [r0, #1]
 80045f0:	dd20      	ble.n	8004634 <__exponent+0x5a>
 80045f2:	f10d 0307 	add.w	r3, sp, #7
 80045f6:	461f      	mov	r7, r3
 80045f8:	260a      	movs	r6, #10
 80045fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80045fe:	fb06 1115 	mls	r1, r6, r5, r1
 8004602:	3130      	adds	r1, #48	; 0x30
 8004604:	2d09      	cmp	r5, #9
 8004606:	f803 1c01 	strb.w	r1, [r3, #-1]
 800460a:	f103 32ff 	add.w	r2, r3, #4294967295
 800460e:	4629      	mov	r1, r5
 8004610:	dc09      	bgt.n	8004626 <__exponent+0x4c>
 8004612:	3130      	adds	r1, #48	; 0x30
 8004614:	3b02      	subs	r3, #2
 8004616:	f802 1c01 	strb.w	r1, [r2, #-1]
 800461a:	42bb      	cmp	r3, r7
 800461c:	4622      	mov	r2, r4
 800461e:	d304      	bcc.n	800462a <__exponent+0x50>
 8004620:	1a10      	subs	r0, r2, r0
 8004622:	b003      	add	sp, #12
 8004624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004626:	4613      	mov	r3, r2
 8004628:	e7e7      	b.n	80045fa <__exponent+0x20>
 800462a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800462e:	f804 2b01 	strb.w	r2, [r4], #1
 8004632:	e7f2      	b.n	800461a <__exponent+0x40>
 8004634:	2330      	movs	r3, #48	; 0x30
 8004636:	4419      	add	r1, r3
 8004638:	7083      	strb	r3, [r0, #2]
 800463a:	1d02      	adds	r2, r0, #4
 800463c:	70c1      	strb	r1, [r0, #3]
 800463e:	e7ef      	b.n	8004620 <__exponent+0x46>

08004640 <_printf_float>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	b08d      	sub	sp, #52	; 0x34
 8004646:	460c      	mov	r4, r1
 8004648:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800464c:	4616      	mov	r6, r2
 800464e:	461f      	mov	r7, r3
 8004650:	4605      	mov	r5, r0
 8004652:	f001 fa21 	bl	8005a98 <_localeconv_r>
 8004656:	6803      	ldr	r3, [r0, #0]
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb fdc0 	bl	80001e0 <strlen>
 8004660:	2300      	movs	r3, #0
 8004662:	930a      	str	r3, [sp, #40]	; 0x28
 8004664:	f8d8 3000 	ldr.w	r3, [r8]
 8004668:	9005      	str	r0, [sp, #20]
 800466a:	3307      	adds	r3, #7
 800466c:	f023 0307 	bic.w	r3, r3, #7
 8004670:	f103 0208 	add.w	r2, r3, #8
 8004674:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004678:	f8d4 b000 	ldr.w	fp, [r4]
 800467c:	f8c8 2000 	str.w	r2, [r8]
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004688:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800468c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004690:	9307      	str	r3, [sp, #28]
 8004692:	f8cd 8018 	str.w	r8, [sp, #24]
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	4ba7      	ldr	r3, [pc, #668]	; (8004938 <_printf_float+0x2f8>)
 800469c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046a0:	f7fc fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80046a4:	bb70      	cbnz	r0, 8004704 <_printf_float+0xc4>
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	4ba3      	ldr	r3, [pc, #652]	; (8004938 <_printf_float+0x2f8>)
 80046ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b0:	f7fc fa26 	bl	8000b00 <__aeabi_dcmple>
 80046b4:	bb30      	cbnz	r0, 8004704 <_printf_float+0xc4>
 80046b6:	2200      	movs	r2, #0
 80046b8:	2300      	movs	r3, #0
 80046ba:	4640      	mov	r0, r8
 80046bc:	4649      	mov	r1, r9
 80046be:	f7fc fa15 	bl	8000aec <__aeabi_dcmplt>
 80046c2:	b110      	cbz	r0, 80046ca <_printf_float+0x8a>
 80046c4:	232d      	movs	r3, #45	; 0x2d
 80046c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ca:	4a9c      	ldr	r2, [pc, #624]	; (800493c <_printf_float+0x2fc>)
 80046cc:	4b9c      	ldr	r3, [pc, #624]	; (8004940 <_printf_float+0x300>)
 80046ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046d2:	bf8c      	ite	hi
 80046d4:	4690      	movhi	r8, r2
 80046d6:	4698      	movls	r8, r3
 80046d8:	2303      	movs	r3, #3
 80046da:	f02b 0204 	bic.w	r2, fp, #4
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	f04f 0900 	mov.w	r9, #0
 80046e6:	9700      	str	r7, [sp, #0]
 80046e8:	4633      	mov	r3, r6
 80046ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f9e6 	bl	8004ac0 <_printf_common>
 80046f4:	3001      	adds	r0, #1
 80046f6:	f040 808d 	bne.w	8004814 <_printf_float+0x1d4>
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	b00d      	add	sp, #52	; 0x34
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	f7fc fa16 	bl	8000b3c <__aeabi_dcmpun>
 8004710:	b110      	cbz	r0, 8004718 <_printf_float+0xd8>
 8004712:	4a8c      	ldr	r2, [pc, #560]	; (8004944 <_printf_float+0x304>)
 8004714:	4b8c      	ldr	r3, [pc, #560]	; (8004948 <_printf_float+0x308>)
 8004716:	e7da      	b.n	80046ce <_printf_float+0x8e>
 8004718:	6861      	ldr	r1, [r4, #4]
 800471a:	1c4b      	adds	r3, r1, #1
 800471c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004720:	a80a      	add	r0, sp, #40	; 0x28
 8004722:	d13e      	bne.n	80047a2 <_printf_float+0x162>
 8004724:	2306      	movs	r3, #6
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	2300      	movs	r3, #0
 800472a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800472e:	ab09      	add	r3, sp, #36	; 0x24
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	ec49 8b10 	vmov	d0, r8, r9
 8004736:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800473a:	6022      	str	r2, [r4, #0]
 800473c:	f8cd a004 	str.w	sl, [sp, #4]
 8004740:	6861      	ldr	r1, [r4, #4]
 8004742:	4628      	mov	r0, r5
 8004744:	f7ff fee8 	bl	8004518 <__cvt>
 8004748:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800474c:	2b47      	cmp	r3, #71	; 0x47
 800474e:	4680      	mov	r8, r0
 8004750:	d109      	bne.n	8004766 <_printf_float+0x126>
 8004752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004754:	1cd8      	adds	r0, r3, #3
 8004756:	db02      	blt.n	800475e <_printf_float+0x11e>
 8004758:	6862      	ldr	r2, [r4, #4]
 800475a:	4293      	cmp	r3, r2
 800475c:	dd47      	ble.n	80047ee <_printf_float+0x1ae>
 800475e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004762:	fa5f fa8a 	uxtb.w	sl, sl
 8004766:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800476a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800476c:	d824      	bhi.n	80047b8 <_printf_float+0x178>
 800476e:	3901      	subs	r1, #1
 8004770:	4652      	mov	r2, sl
 8004772:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004776:	9109      	str	r1, [sp, #36]	; 0x24
 8004778:	f7ff ff2f 	bl	80045da <__exponent>
 800477c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800477e:	1813      	adds	r3, r2, r0
 8004780:	2a01      	cmp	r2, #1
 8004782:	4681      	mov	r9, r0
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	dc02      	bgt.n	800478e <_printf_float+0x14e>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	07d1      	lsls	r1, r2, #31
 800478c:	d501      	bpl.n	8004792 <_printf_float+0x152>
 800478e:	3301      	adds	r3, #1
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0a5      	beq.n	80046e6 <_printf_float+0xa6>
 800479a:	232d      	movs	r3, #45	; 0x2d
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	e7a1      	b.n	80046e6 <_printf_float+0xa6>
 80047a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047a6:	f000 8177 	beq.w	8004a98 <_printf_float+0x458>
 80047aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047ae:	d1bb      	bne.n	8004728 <_printf_float+0xe8>
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d1b9      	bne.n	8004728 <_printf_float+0xe8>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e7b6      	b.n	8004726 <_printf_float+0xe6>
 80047b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80047bc:	d119      	bne.n	80047f2 <_printf_float+0x1b2>
 80047be:	2900      	cmp	r1, #0
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	dd0c      	ble.n	80047de <_printf_float+0x19e>
 80047c4:	6121      	str	r1, [r4, #16]
 80047c6:	b913      	cbnz	r3, 80047ce <_printf_float+0x18e>
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	07d2      	lsls	r2, r2, #31
 80047cc:	d502      	bpl.n	80047d4 <_printf_float+0x194>
 80047ce:	3301      	adds	r3, #1
 80047d0:	440b      	add	r3, r1
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80047d8:	f04f 0900 	mov.w	r9, #0
 80047dc:	e7d9      	b.n	8004792 <_printf_float+0x152>
 80047de:	b913      	cbnz	r3, 80047e6 <_printf_float+0x1a6>
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	07d0      	lsls	r0, r2, #31
 80047e4:	d501      	bpl.n	80047ea <_printf_float+0x1aa>
 80047e6:	3302      	adds	r3, #2
 80047e8:	e7f3      	b.n	80047d2 <_printf_float+0x192>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e7f1      	b.n	80047d2 <_printf_float+0x192>
 80047ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80047f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80047f6:	4293      	cmp	r3, r2
 80047f8:	db05      	blt.n	8004806 <_printf_float+0x1c6>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	07d1      	lsls	r1, r2, #31
 8004800:	d5e8      	bpl.n	80047d4 <_printf_float+0x194>
 8004802:	3301      	adds	r3, #1
 8004804:	e7e5      	b.n	80047d2 <_printf_float+0x192>
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfd4      	ite	le
 800480a:	f1c3 0302 	rsble	r3, r3, #2
 800480e:	2301      	movgt	r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	e7de      	b.n	80047d2 <_printf_float+0x192>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	055a      	lsls	r2, r3, #21
 8004818:	d407      	bmi.n	800482a <_printf_float+0x1ea>
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	4642      	mov	r2, r8
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	d12b      	bne.n	8004880 <_printf_float+0x240>
 8004828:	e767      	b.n	80046fa <_printf_float+0xba>
 800482a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800482e:	f240 80dc 	bls.w	80049ea <_printf_float+0x3aa>
 8004832:	2200      	movs	r2, #0
 8004834:	2300      	movs	r3, #0
 8004836:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800483a:	f7fc f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800483e:	2800      	cmp	r0, #0
 8004840:	d033      	beq.n	80048aa <_printf_float+0x26a>
 8004842:	2301      	movs	r3, #1
 8004844:	4a41      	ldr	r2, [pc, #260]	; (800494c <_printf_float+0x30c>)
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f af54 	beq.w	80046fa <_printf_float+0xba>
 8004852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004856:	429a      	cmp	r2, r3
 8004858:	db02      	blt.n	8004860 <_printf_float+0x220>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	07d8      	lsls	r0, r3, #31
 800485e:	d50f      	bpl.n	8004880 <_printf_float+0x240>
 8004860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004864:	4631      	mov	r1, r6
 8004866:	4628      	mov	r0, r5
 8004868:	47b8      	blx	r7
 800486a:	3001      	adds	r0, #1
 800486c:	f43f af45 	beq.w	80046fa <_printf_float+0xba>
 8004870:	f04f 0800 	mov.w	r8, #0
 8004874:	f104 091a 	add.w	r9, r4, #26
 8004878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	4543      	cmp	r3, r8
 800487e:	dc09      	bgt.n	8004894 <_printf_float+0x254>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	079b      	lsls	r3, r3, #30
 8004884:	f100 8103 	bmi.w	8004a8e <_printf_float+0x44e>
 8004888:	68e0      	ldr	r0, [r4, #12]
 800488a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800488c:	4298      	cmp	r0, r3
 800488e:	bfb8      	it	lt
 8004890:	4618      	movlt	r0, r3
 8004892:	e734      	b.n	80046fe <_printf_float+0xbe>
 8004894:	2301      	movs	r3, #1
 8004896:	464a      	mov	r2, r9
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af2b 	beq.w	80046fa <_printf_float+0xba>
 80048a4:	f108 0801 	add.w	r8, r8, #1
 80048a8:	e7e6      	b.n	8004878 <_printf_float+0x238>
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc2b      	bgt.n	8004908 <_printf_float+0x2c8>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4a26      	ldr	r2, [pc, #152]	; (800494c <_printf_float+0x30c>)
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f af1d 	beq.w	80046fa <_printf_float+0xba>
 80048c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c2:	b923      	cbnz	r3, 80048ce <_printf_float+0x28e>
 80048c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c6:	b913      	cbnz	r3, 80048ce <_printf_float+0x28e>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	07d9      	lsls	r1, r3, #31
 80048cc:	d5d8      	bpl.n	8004880 <_printf_float+0x240>
 80048ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f af0e 	beq.w	80046fa <_printf_float+0xba>
 80048de:	f04f 0900 	mov.w	r9, #0
 80048e2:	f104 0a1a 	add.w	sl, r4, #26
 80048e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e8:	425b      	negs	r3, r3
 80048ea:	454b      	cmp	r3, r9
 80048ec:	dc01      	bgt.n	80048f2 <_printf_float+0x2b2>
 80048ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f0:	e794      	b.n	800481c <_printf_float+0x1dc>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4652      	mov	r2, sl
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f aefc 	beq.w	80046fa <_printf_float+0xba>
 8004902:	f109 0901 	add.w	r9, r9, #1
 8004906:	e7ee      	b.n	80048e6 <_printf_float+0x2a6>
 8004908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800490c:	429a      	cmp	r2, r3
 800490e:	bfa8      	it	ge
 8004910:	461a      	movge	r2, r3
 8004912:	2a00      	cmp	r2, #0
 8004914:	4691      	mov	r9, r2
 8004916:	dd07      	ble.n	8004928 <_printf_float+0x2e8>
 8004918:	4613      	mov	r3, r2
 800491a:	4631      	mov	r1, r6
 800491c:	4642      	mov	r2, r8
 800491e:	4628      	mov	r0, r5
 8004920:	47b8      	blx	r7
 8004922:	3001      	adds	r0, #1
 8004924:	f43f aee9 	beq.w	80046fa <_printf_float+0xba>
 8004928:	f104 031a 	add.w	r3, r4, #26
 800492c:	f04f 0b00 	mov.w	fp, #0
 8004930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004934:	9306      	str	r3, [sp, #24]
 8004936:	e015      	b.n	8004964 <_printf_float+0x324>
 8004938:	7fefffff 	.word	0x7fefffff
 800493c:	08006614 	.word	0x08006614
 8004940:	08006610 	.word	0x08006610
 8004944:	0800661c 	.word	0x0800661c
 8004948:	08006618 	.word	0x08006618
 800494c:	08006620 	.word	0x08006620
 8004950:	2301      	movs	r3, #1
 8004952:	9a06      	ldr	r2, [sp, #24]
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f aecd 	beq.w	80046fa <_printf_float+0xba>
 8004960:	f10b 0b01 	add.w	fp, fp, #1
 8004964:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004968:	ebaa 0309 	sub.w	r3, sl, r9
 800496c:	455b      	cmp	r3, fp
 800496e:	dcef      	bgt.n	8004950 <_printf_float+0x310>
 8004970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004974:	429a      	cmp	r2, r3
 8004976:	44d0      	add	r8, sl
 8004978:	db15      	blt.n	80049a6 <_printf_float+0x366>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	07da      	lsls	r2, r3, #31
 800497e:	d412      	bmi.n	80049a6 <_printf_float+0x366>
 8004980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004982:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004984:	eba3 020a 	sub.w	r2, r3, sl
 8004988:	eba3 0a01 	sub.w	sl, r3, r1
 800498c:	4592      	cmp	sl, r2
 800498e:	bfa8      	it	ge
 8004990:	4692      	movge	sl, r2
 8004992:	f1ba 0f00 	cmp.w	sl, #0
 8004996:	dc0e      	bgt.n	80049b6 <_printf_float+0x376>
 8004998:	f04f 0800 	mov.w	r8, #0
 800499c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049a0:	f104 091a 	add.w	r9, r4, #26
 80049a4:	e019      	b.n	80049da <_printf_float+0x39a>
 80049a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	d1e5      	bne.n	8004980 <_printf_float+0x340>
 80049b4:	e6a1      	b.n	80046fa <_printf_float+0xba>
 80049b6:	4653      	mov	r3, sl
 80049b8:	4642      	mov	r2, r8
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	d1e9      	bne.n	8004998 <_printf_float+0x358>
 80049c4:	e699      	b.n	80046fa <_printf_float+0xba>
 80049c6:	2301      	movs	r3, #1
 80049c8:	464a      	mov	r2, r9
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	f43f ae92 	beq.w	80046fa <_printf_float+0xba>
 80049d6:	f108 0801 	add.w	r8, r8, #1
 80049da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	eba3 030a 	sub.w	r3, r3, sl
 80049e4:	4543      	cmp	r3, r8
 80049e6:	dcee      	bgt.n	80049c6 <_printf_float+0x386>
 80049e8:	e74a      	b.n	8004880 <_printf_float+0x240>
 80049ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ec:	2a01      	cmp	r2, #1
 80049ee:	dc01      	bgt.n	80049f4 <_printf_float+0x3b4>
 80049f0:	07db      	lsls	r3, r3, #31
 80049f2:	d53a      	bpl.n	8004a6a <_printf_float+0x42a>
 80049f4:	2301      	movs	r3, #1
 80049f6:	4642      	mov	r2, r8
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f ae7b 	beq.w	80046fa <_printf_float+0xba>
 8004a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f108 0801 	add.w	r8, r8, #1
 8004a14:	f43f ae71 	beq.w	80046fa <_printf_float+0xba>
 8004a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a24:	2300      	movs	r3, #0
 8004a26:	f7fc f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a2a:	b9c8      	cbnz	r0, 8004a60 <_printf_float+0x420>
 8004a2c:	4653      	mov	r3, sl
 8004a2e:	4642      	mov	r2, r8
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	d10e      	bne.n	8004a58 <_printf_float+0x418>
 8004a3a:	e65e      	b.n	80046fa <_printf_float+0xba>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4652      	mov	r2, sl
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	f43f ae57 	beq.w	80046fa <_printf_float+0xba>
 8004a4c:	f108 0801 	add.w	r8, r8, #1
 8004a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4543      	cmp	r3, r8
 8004a56:	dcf1      	bgt.n	8004a3c <_printf_float+0x3fc>
 8004a58:	464b      	mov	r3, r9
 8004a5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a5e:	e6de      	b.n	800481e <_printf_float+0x1de>
 8004a60:	f04f 0800 	mov.w	r8, #0
 8004a64:	f104 0a1a 	add.w	sl, r4, #26
 8004a68:	e7f2      	b.n	8004a50 <_printf_float+0x410>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e7df      	b.n	8004a2e <_printf_float+0x3ee>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f ae3e 	beq.w	80046fa <_printf_float+0xba>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	4543      	cmp	r3, r8
 8004a8a:	dcf0      	bgt.n	8004a6e <_printf_float+0x42e>
 8004a8c:	e6fc      	b.n	8004888 <_printf_float+0x248>
 8004a8e:	f04f 0800 	mov.w	r8, #0
 8004a92:	f104 0919 	add.w	r9, r4, #25
 8004a96:	e7f4      	b.n	8004a82 <_printf_float+0x442>
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	f43f ae8b 	beq.w	80047b4 <_printf_float+0x174>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004aa4:	ab09      	add	r3, sp, #36	; 0x24
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	ec49 8b10 	vmov	d0, r8, r9
 8004aac:	6022      	str	r2, [r4, #0]
 8004aae:	f8cd a004 	str.w	sl, [sp, #4]
 8004ab2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7ff fd2e 	bl	8004518 <__cvt>
 8004abc:	4680      	mov	r8, r0
 8004abe:	e648      	b.n	8004752 <_printf_float+0x112>

08004ac0 <_printf_common>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	4691      	mov	r9, r2
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	688a      	ldr	r2, [r1, #8]
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bfb8      	it	lt
 8004ad4:	4613      	movlt	r3, r2
 8004ad6:	f8c9 3000 	str.w	r3, [r9]
 8004ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	b112      	cbz	r2, 8004aea <_printf_common+0x2a>
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f8c9 3000 	str.w	r3, [r9]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004af4:	3302      	addmi	r3, #2
 8004af6:	f8c9 3000 	strmi.w	r3, [r9]
 8004afa:	6825      	ldr	r5, [r4, #0]
 8004afc:	f015 0506 	ands.w	r5, r5, #6
 8004b00:	d107      	bne.n	8004b12 <_printf_common+0x52>
 8004b02:	f104 0a19 	add.w	sl, r4, #25
 8004b06:	68e3      	ldr	r3, [r4, #12]
 8004b08:	f8d9 2000 	ldr.w	r2, [r9]
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dc28      	bgt.n	8004b64 <_printf_common+0xa4>
 8004b12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	3300      	adds	r3, #0
 8004b1a:	bf18      	it	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	0692      	lsls	r2, r2, #26
 8004b20:	d42d      	bmi.n	8004b7e <_printf_common+0xbe>
 8004b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b26:	4639      	mov	r1, r7
 8004b28:	4630      	mov	r0, r6
 8004b2a:	47c0      	blx	r8
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d020      	beq.n	8004b72 <_printf_common+0xb2>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	68e5      	ldr	r5, [r4, #12]
 8004b34:	f8d9 2000 	ldr.w	r2, [r9]
 8004b38:	f003 0306 	and.w	r3, r3, #6
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	bf08      	it	eq
 8004b40:	1aad      	subeq	r5, r5, r2
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	6922      	ldr	r2, [r4, #16]
 8004b46:	bf0c      	ite	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bfc4      	itt	gt
 8004b52:	1a9b      	subgt	r3, r3, r2
 8004b54:	18ed      	addgt	r5, r5, r3
 8004b56:	f04f 0900 	mov.w	r9, #0
 8004b5a:	341a      	adds	r4, #26
 8004b5c:	454d      	cmp	r5, r9
 8004b5e:	d11a      	bne.n	8004b96 <_printf_common+0xd6>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e008      	b.n	8004b76 <_printf_common+0xb6>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4652      	mov	r2, sl
 8004b68:	4639      	mov	r1, r7
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d103      	bne.n	8004b7a <_printf_common+0xba>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	e7c3      	b.n	8004b06 <_printf_common+0x46>
 8004b7e:	18e1      	adds	r1, r4, r3
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	2030      	movs	r0, #48	; 0x30
 8004b84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b88:	4422      	add	r2, r4
 8004b8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b92:	3302      	adds	r3, #2
 8004b94:	e7c5      	b.n	8004b22 <_printf_common+0x62>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	47c0      	blx	r8
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0e6      	beq.n	8004b72 <_printf_common+0xb2>
 8004ba4:	f109 0901 	add.w	r9, r9, #1
 8004ba8:	e7d8      	b.n	8004b5c <_printf_common+0x9c>
	...

08004bac <_printf_i>:
 8004bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	7e09      	ldrb	r1, [r1, #24]
 8004bb8:	b085      	sub	sp, #20
 8004bba:	296e      	cmp	r1, #110	; 0x6e
 8004bbc:	4617      	mov	r7, r2
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	4698      	mov	r8, r3
 8004bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bc4:	f000 80b3 	beq.w	8004d2e <_printf_i+0x182>
 8004bc8:	d822      	bhi.n	8004c10 <_printf_i+0x64>
 8004bca:	2963      	cmp	r1, #99	; 0x63
 8004bcc:	d036      	beq.n	8004c3c <_printf_i+0x90>
 8004bce:	d80a      	bhi.n	8004be6 <_printf_i+0x3a>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	f000 80b9 	beq.w	8004d48 <_printf_i+0x19c>
 8004bd6:	2958      	cmp	r1, #88	; 0x58
 8004bd8:	f000 8083 	beq.w	8004ce2 <_printf_i+0x136>
 8004bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004be4:	e032      	b.n	8004c4c <_printf_i+0xa0>
 8004be6:	2964      	cmp	r1, #100	; 0x64
 8004be8:	d001      	beq.n	8004bee <_printf_i+0x42>
 8004bea:	2969      	cmp	r1, #105	; 0x69
 8004bec:	d1f6      	bne.n	8004bdc <_printf_i+0x30>
 8004bee:	6820      	ldr	r0, [r4, #0]
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	0605      	lsls	r5, r0, #24
 8004bf4:	f103 0104 	add.w	r1, r3, #4
 8004bf8:	d52a      	bpl.n	8004c50 <_printf_i+0xa4>
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da03      	bge.n	8004c0a <_printf_i+0x5e>
 8004c02:	222d      	movs	r2, #45	; 0x2d
 8004c04:	425b      	negs	r3, r3
 8004c06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c0a:	486f      	ldr	r0, [pc, #444]	; (8004dc8 <_printf_i+0x21c>)
 8004c0c:	220a      	movs	r2, #10
 8004c0e:	e039      	b.n	8004c84 <_printf_i+0xd8>
 8004c10:	2973      	cmp	r1, #115	; 0x73
 8004c12:	f000 809d 	beq.w	8004d50 <_printf_i+0x1a4>
 8004c16:	d808      	bhi.n	8004c2a <_printf_i+0x7e>
 8004c18:	296f      	cmp	r1, #111	; 0x6f
 8004c1a:	d020      	beq.n	8004c5e <_printf_i+0xb2>
 8004c1c:	2970      	cmp	r1, #112	; 0x70
 8004c1e:	d1dd      	bne.n	8004bdc <_printf_i+0x30>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	f043 0320 	orr.w	r3, r3, #32
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	e003      	b.n	8004c32 <_printf_i+0x86>
 8004c2a:	2975      	cmp	r1, #117	; 0x75
 8004c2c:	d017      	beq.n	8004c5e <_printf_i+0xb2>
 8004c2e:	2978      	cmp	r1, #120	; 0x78
 8004c30:	d1d4      	bne.n	8004bdc <_printf_i+0x30>
 8004c32:	2378      	movs	r3, #120	; 0x78
 8004c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c38:	4864      	ldr	r0, [pc, #400]	; (8004dcc <_printf_i+0x220>)
 8004c3a:	e055      	b.n	8004ce8 <_printf_i+0x13c>
 8004c3c:	6813      	ldr	r3, [r2, #0]
 8004c3e:	1d19      	adds	r1, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6011      	str	r1, [r2, #0]
 8004c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e08c      	b.n	8004d6a <_printf_i+0x1be>
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6011      	str	r1, [r2, #0]
 8004c54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c58:	bf18      	it	ne
 8004c5a:	b21b      	sxthne	r3, r3
 8004c5c:	e7cf      	b.n	8004bfe <_printf_i+0x52>
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	6825      	ldr	r5, [r4, #0]
 8004c62:	1d18      	adds	r0, r3, #4
 8004c64:	6010      	str	r0, [r2, #0]
 8004c66:	0628      	lsls	r0, r5, #24
 8004c68:	d501      	bpl.n	8004c6e <_printf_i+0xc2>
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	e002      	b.n	8004c74 <_printf_i+0xc8>
 8004c6e:	0668      	lsls	r0, r5, #25
 8004c70:	d5fb      	bpl.n	8004c6a <_printf_i+0xbe>
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	4854      	ldr	r0, [pc, #336]	; (8004dc8 <_printf_i+0x21c>)
 8004c76:	296f      	cmp	r1, #111	; 0x6f
 8004c78:	bf14      	ite	ne
 8004c7a:	220a      	movne	r2, #10
 8004c7c:	2208      	moveq	r2, #8
 8004c7e:	2100      	movs	r1, #0
 8004c80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c84:	6865      	ldr	r5, [r4, #4]
 8004c86:	60a5      	str	r5, [r4, #8]
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	f2c0 8095 	blt.w	8004db8 <_printf_i+0x20c>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	f021 0104 	bic.w	r1, r1, #4
 8004c94:	6021      	str	r1, [r4, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d13d      	bne.n	8004d16 <_printf_i+0x16a>
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	f040 808e 	bne.w	8004dbc <_printf_i+0x210>
 8004ca0:	4665      	mov	r5, ip
 8004ca2:	2a08      	cmp	r2, #8
 8004ca4:	d10b      	bne.n	8004cbe <_printf_i+0x112>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	07db      	lsls	r3, r3, #31
 8004caa:	d508      	bpl.n	8004cbe <_printf_i+0x112>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bfde      	ittt	le
 8004cb4:	2330      	movle	r3, #48	; 0x30
 8004cb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cbe:	ebac 0305 	sub.w	r3, ip, r5
 8004cc2:	6123      	str	r3, [r4, #16]
 8004cc4:	f8cd 8000 	str.w	r8, [sp]
 8004cc8:	463b      	mov	r3, r7
 8004cca:	aa03      	add	r2, sp, #12
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7ff fef6 	bl	8004ac0 <_printf_common>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d14d      	bne.n	8004d74 <_printf_i+0x1c8>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	b005      	add	sp, #20
 8004cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ce2:	4839      	ldr	r0, [pc, #228]	; (8004dc8 <_printf_i+0x21c>)
 8004ce4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	6821      	ldr	r1, [r4, #0]
 8004cec:	1d1d      	adds	r5, r3, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6015      	str	r5, [r2, #0]
 8004cf2:	060a      	lsls	r2, r1, #24
 8004cf4:	d50b      	bpl.n	8004d0e <_printf_i+0x162>
 8004cf6:	07ca      	lsls	r2, r1, #31
 8004cf8:	bf44      	itt	mi
 8004cfa:	f041 0120 	orrmi.w	r1, r1, #32
 8004cfe:	6021      	strmi	r1, [r4, #0]
 8004d00:	b91b      	cbnz	r3, 8004d0a <_printf_i+0x15e>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	f022 0220 	bic.w	r2, r2, #32
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	e7b7      	b.n	8004c7e <_printf_i+0xd2>
 8004d0e:	064d      	lsls	r5, r1, #25
 8004d10:	bf48      	it	mi
 8004d12:	b29b      	uxthmi	r3, r3
 8004d14:	e7ef      	b.n	8004cf6 <_printf_i+0x14a>
 8004d16:	4665      	mov	r5, ip
 8004d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d1c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d20:	5cc3      	ldrb	r3, [r0, r3]
 8004d22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d26:	460b      	mov	r3, r1
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d1f5      	bne.n	8004d18 <_printf_i+0x16c>
 8004d2c:	e7b9      	b.n	8004ca2 <_printf_i+0xf6>
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	6961      	ldr	r1, [r4, #20]
 8004d34:	1d18      	adds	r0, r3, #4
 8004d36:	6010      	str	r0, [r2, #0]
 8004d38:	0628      	lsls	r0, r5, #24
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	d501      	bpl.n	8004d42 <_printf_i+0x196>
 8004d3e:	6019      	str	r1, [r3, #0]
 8004d40:	e002      	b.n	8004d48 <_printf_i+0x19c>
 8004d42:	066a      	lsls	r2, r5, #25
 8004d44:	d5fb      	bpl.n	8004d3e <_printf_i+0x192>
 8004d46:	8019      	strh	r1, [r3, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6123      	str	r3, [r4, #16]
 8004d4c:	4665      	mov	r5, ip
 8004d4e:	e7b9      	b.n	8004cc4 <_printf_i+0x118>
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	1d19      	adds	r1, r3, #4
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	681d      	ldr	r5, [r3, #0]
 8004d58:	6862      	ldr	r2, [r4, #4]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f7fb fa47 	bl	80001f0 <memchr>
 8004d62:	b108      	cbz	r0, 8004d68 <_printf_i+0x1bc>
 8004d64:	1b40      	subs	r0, r0, r5
 8004d66:	6060      	str	r0, [r4, #4]
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d72:	e7a7      	b.n	8004cc4 <_printf_i+0x118>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	462a      	mov	r2, r5
 8004d78:	4639      	mov	r1, r7
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d0aa      	beq.n	8004cd8 <_printf_i+0x12c>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	079b      	lsls	r3, r3, #30
 8004d86:	d413      	bmi.n	8004db0 <_printf_i+0x204>
 8004d88:	68e0      	ldr	r0, [r4, #12]
 8004d8a:	9b03      	ldr	r3, [sp, #12]
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	bfb8      	it	lt
 8004d90:	4618      	movlt	r0, r3
 8004d92:	e7a3      	b.n	8004cdc <_printf_i+0x130>
 8004d94:	2301      	movs	r3, #1
 8004d96:	464a      	mov	r2, r9
 8004d98:	4639      	mov	r1, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d09a      	beq.n	8004cd8 <_printf_i+0x12c>
 8004da2:	3501      	adds	r5, #1
 8004da4:	68e3      	ldr	r3, [r4, #12]
 8004da6:	9a03      	ldr	r2, [sp, #12]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	42ab      	cmp	r3, r5
 8004dac:	dcf2      	bgt.n	8004d94 <_printf_i+0x1e8>
 8004dae:	e7eb      	b.n	8004d88 <_printf_i+0x1dc>
 8004db0:	2500      	movs	r5, #0
 8004db2:	f104 0919 	add.w	r9, r4, #25
 8004db6:	e7f5      	b.n	8004da4 <_printf_i+0x1f8>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ac      	bne.n	8004d16 <_printf_i+0x16a>
 8004dbc:	7803      	ldrb	r3, [r0, #0]
 8004dbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc6:	e76c      	b.n	8004ca2 <_printf_i+0xf6>
 8004dc8:	08006622 	.word	0x08006622
 8004dcc:	08006633 	.word	0x08006633

08004dd0 <siprintf>:
 8004dd0:	b40e      	push	{r1, r2, r3}
 8004dd2:	b500      	push	{lr}
 8004dd4:	b09c      	sub	sp, #112	; 0x70
 8004dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dd8:	9002      	str	r0, [sp, #8]
 8004dda:	9006      	str	r0, [sp, #24]
 8004ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004de0:	4809      	ldr	r0, [pc, #36]	; (8004e08 <siprintf+0x38>)
 8004de2:	9107      	str	r1, [sp, #28]
 8004de4:	9104      	str	r1, [sp, #16]
 8004de6:	4909      	ldr	r1, [pc, #36]	; (8004e0c <siprintf+0x3c>)
 8004de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dec:	9105      	str	r1, [sp, #20]
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	a902      	add	r1, sp, #8
 8004df4:	f001 fa5c 	bl	80062b0 <_svfiprintf_r>
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	b01c      	add	sp, #112	; 0x70
 8004e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e04:	b003      	add	sp, #12
 8004e06:	4770      	bx	lr
 8004e08:	2000000c 	.word	0x2000000c
 8004e0c:	ffff0208 	.word	0xffff0208

08004e10 <quorem>:
 8004e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	6903      	ldr	r3, [r0, #16]
 8004e16:	690c      	ldr	r4, [r1, #16]
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	4680      	mov	r8, r0
 8004e1c:	f2c0 8082 	blt.w	8004f24 <quorem+0x114>
 8004e20:	3c01      	subs	r4, #1
 8004e22:	f101 0714 	add.w	r7, r1, #20
 8004e26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e2a:	f100 0614 	add.w	r6, r0, #20
 8004e2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e36:	eb06 030c 	add.w	r3, r6, ip
 8004e3a:	3501      	adds	r5, #1
 8004e3c:	eb07 090c 	add.w	r9, r7, ip
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e46:	b395      	cbz	r5, 8004eae <quorem+0x9e>
 8004e48:	f04f 0a00 	mov.w	sl, #0
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	46b6      	mov	lr, r6
 8004e50:	46d3      	mov	fp, sl
 8004e52:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e56:	b293      	uxth	r3, r2
 8004e58:	fb05 a303 	mla	r3, r5, r3, sl
 8004e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	ebab 0303 	sub.w	r3, fp, r3
 8004e66:	0c12      	lsrs	r2, r2, #16
 8004e68:	f8de b000 	ldr.w	fp, [lr]
 8004e6c:	fb05 a202 	mla	r2, r5, r2, sl
 8004e70:	fa13 f38b 	uxtah	r3, r3, fp
 8004e74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e78:	fa1f fb82 	uxth.w	fp, r2
 8004e7c:	f8de 2000 	ldr.w	r2, [lr]
 8004e80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e8e:	4581      	cmp	r9, r0
 8004e90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e94:	f84e 3b04 	str.w	r3, [lr], #4
 8004e98:	d2db      	bcs.n	8004e52 <quorem+0x42>
 8004e9a:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e9e:	b933      	cbnz	r3, 8004eae <quorem+0x9e>
 8004ea0:	9b01      	ldr	r3, [sp, #4]
 8004ea2:	3b04      	subs	r3, #4
 8004ea4:	429e      	cmp	r6, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	d330      	bcc.n	8004f0c <quorem+0xfc>
 8004eaa:	f8c8 4010 	str.w	r4, [r8, #16]
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f001 f828 	bl	8005f04 <__mcmp>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	db25      	blt.n	8004f04 <quorem+0xf4>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f04f 0c00 	mov.w	ip, #0
 8004ec0:	f857 2b04 	ldr.w	r2, [r7], #4
 8004ec4:	f8d0 e000 	ldr.w	lr, [r0]
 8004ec8:	b293      	uxth	r3, r2
 8004eca:	ebac 0303 	sub.w	r3, ip, r3
 8004ece:	0c12      	lsrs	r2, r2, #16
 8004ed0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ed4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ee2:	45b9      	cmp	r9, r7
 8004ee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ee8:	f840 3b04 	str.w	r3, [r0], #4
 8004eec:	d2e8      	bcs.n	8004ec0 <quorem+0xb0>
 8004eee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ef2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ef6:	b92a      	cbnz	r2, 8004f04 <quorem+0xf4>
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	429e      	cmp	r6, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	d30b      	bcc.n	8004f18 <quorem+0x108>
 8004f00:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f04:	4628      	mov	r0, r5
 8004f06:	b003      	add	sp, #12
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d1ca      	bne.n	8004eaa <quorem+0x9a>
 8004f14:	3c01      	subs	r4, #1
 8004f16:	e7c5      	b.n	8004ea4 <quorem+0x94>
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	2a00      	cmp	r2, #0
 8004f1e:	d1ef      	bne.n	8004f00 <quorem+0xf0>
 8004f20:	3c01      	subs	r4, #1
 8004f22:	e7ea      	b.n	8004efa <quorem+0xea>
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7ee      	b.n	8004f06 <quorem+0xf6>

08004f28 <_dtoa_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	ec57 6b10 	vmov	r6, r7, d0
 8004f30:	b097      	sub	sp, #92	; 0x5c
 8004f32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f34:	9106      	str	r1, [sp, #24]
 8004f36:	4604      	mov	r4, r0
 8004f38:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8004f3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f40:	e9cd 6700 	strd	r6, r7, [sp]
 8004f44:	b93d      	cbnz	r5, 8004f56 <_dtoa_r+0x2e>
 8004f46:	2010      	movs	r0, #16
 8004f48:	f000 fdb4 	bl	8005ab4 <malloc>
 8004f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f52:	6005      	str	r5, [r0, #0]
 8004f54:	60c5      	str	r5, [r0, #12]
 8004f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	b151      	cbz	r1, 8004f72 <_dtoa_r+0x4a>
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	604a      	str	r2, [r1, #4]
 8004f60:	2301      	movs	r3, #1
 8004f62:	4093      	lsls	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
 8004f66:	4620      	mov	r0, r4
 8004f68:	f000 fdeb 	bl	8005b42 <_Bfree>
 8004f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	1e3b      	subs	r3, r7, #0
 8004f74:	bfbb      	ittet	lt
 8004f76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	9301      	strlt	r3, [sp, #4]
 8004f7c:	2300      	movge	r3, #0
 8004f7e:	2201      	movlt	r2, #1
 8004f80:	bfac      	ite	ge
 8004f82:	f8c8 3000 	strge.w	r3, [r8]
 8004f86:	f8c8 2000 	strlt.w	r2, [r8]
 8004f8a:	4baf      	ldr	r3, [pc, #700]	; (8005248 <_dtoa_r+0x320>)
 8004f8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f90:	ea33 0308 	bics.w	r3, r3, r8
 8004f94:	d114      	bne.n	8004fc0 <_dtoa_r+0x98>
 8004f96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	b923      	cbnz	r3, 8004fac <_dtoa_r+0x84>
 8004fa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f000 8542 	beq.w	8005a30 <_dtoa_r+0xb08>
 8004fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800525c <_dtoa_r+0x334>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8544 	beq.w	8005a40 <_dtoa_r+0xb18>
 8004fb8:	f10b 0303 	add.w	r3, fp, #3
 8004fbc:	f000 bd3e 	b.w	8005a3c <_dtoa_r+0xb14>
 8004fc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd0:	4681      	mov	r9, r0
 8004fd2:	b168      	cbz	r0, 8004ff0 <_dtoa_r+0xc8>
 8004fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8524 	beq.w	8005a2a <_dtoa_r+0xb02>
 8004fe2:	4b9a      	ldr	r3, [pc, #616]	; (800524c <_dtoa_r+0x324>)
 8004fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fe6:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	f000 bd28 	b.w	8005a40 <_dtoa_r+0xb18>
 8004ff0:	aa14      	add	r2, sp, #80	; 0x50
 8004ff2:	a915      	add	r1, sp, #84	; 0x54
 8004ff4:	ec47 6b10 	vmov	d0, r6, r7
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fffa 	bl	8005ff2 <__d2b>
 8004ffe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005002:	9004      	str	r0, [sp, #16]
 8005004:	2d00      	cmp	r5, #0
 8005006:	d07c      	beq.n	8005102 <_dtoa_r+0x1da>
 8005008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800500c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005010:	46b2      	mov	sl, r6
 8005012:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800501a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800501e:	2200      	movs	r2, #0
 8005020:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <_dtoa_r+0x328>)
 8005022:	4650      	mov	r0, sl
 8005024:	4659      	mov	r1, fp
 8005026:	f7fb f937 	bl	8000298 <__aeabi_dsub>
 800502a:	a381      	add	r3, pc, #516	; (adr r3, 8005230 <_dtoa_r+0x308>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb faea 	bl	8000608 <__aeabi_dmul>
 8005034:	a380      	add	r3, pc, #512	; (adr r3, 8005238 <_dtoa_r+0x310>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f92f 	bl	800029c <__adddf3>
 800503e:	4606      	mov	r6, r0
 8005040:	4628      	mov	r0, r5
 8005042:	460f      	mov	r7, r1
 8005044:	f7fb fa76 	bl	8000534 <__aeabi_i2d>
 8005048:	a37d      	add	r3, pc, #500	; (adr r3, 8005240 <_dtoa_r+0x318>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f7fb fadb 	bl	8000608 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb f91f 	bl	800029c <__adddf3>
 800505e:	4606      	mov	r6, r0
 8005060:	460f      	mov	r7, r1
 8005062:	f7fb fd81 	bl	8000b68 <__aeabi_d2iz>
 8005066:	2200      	movs	r2, #0
 8005068:	4682      	mov	sl, r0
 800506a:	2300      	movs	r3, #0
 800506c:	4630      	mov	r0, r6
 800506e:	4639      	mov	r1, r7
 8005070:	f7fb fd3c 	bl	8000aec <__aeabi_dcmplt>
 8005074:	b148      	cbz	r0, 800508a <_dtoa_r+0x162>
 8005076:	4650      	mov	r0, sl
 8005078:	f7fb fa5c 	bl	8000534 <__aeabi_i2d>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb fd2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005084:	b908      	cbnz	r0, 800508a <_dtoa_r+0x162>
 8005086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508a:	f1ba 0f16 	cmp.w	sl, #22
 800508e:	d859      	bhi.n	8005144 <_dtoa_r+0x21c>
 8005090:	4970      	ldr	r1, [pc, #448]	; (8005254 <_dtoa_r+0x32c>)
 8005092:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800509a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509e:	f7fb fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d050      	beq.n	8005148 <_dtoa_r+0x220>
 80050a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050aa:	2300      	movs	r3, #0
 80050ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050b0:	1b5d      	subs	r5, r3, r5
 80050b2:	f1b5 0801 	subs.w	r8, r5, #1
 80050b6:	bf49      	itett	mi
 80050b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80050bc:	2300      	movpl	r3, #0
 80050be:	9305      	strmi	r3, [sp, #20]
 80050c0:	f04f 0800 	movmi.w	r8, #0
 80050c4:	bf58      	it	pl
 80050c6:	9305      	strpl	r3, [sp, #20]
 80050c8:	f1ba 0f00 	cmp.w	sl, #0
 80050cc:	db3e      	blt.n	800514c <_dtoa_r+0x224>
 80050ce:	2300      	movs	r3, #0
 80050d0:	44d0      	add	r8, sl
 80050d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80050d6:	9307      	str	r3, [sp, #28]
 80050d8:	9b06      	ldr	r3, [sp, #24]
 80050da:	2b09      	cmp	r3, #9
 80050dc:	f200 8090 	bhi.w	8005200 <_dtoa_r+0x2d8>
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	bfc4      	itt	gt
 80050e4:	3b04      	subgt	r3, #4
 80050e6:	9306      	strgt	r3, [sp, #24]
 80050e8:	9b06      	ldr	r3, [sp, #24]
 80050ea:	f1a3 0302 	sub.w	r3, r3, #2
 80050ee:	bfcc      	ite	gt
 80050f0:	2500      	movgt	r5, #0
 80050f2:	2501      	movle	r5, #1
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	f200 808f 	bhi.w	8005218 <_dtoa_r+0x2f0>
 80050fa:	e8df f003 	tbb	[pc, r3]
 80050fe:	7f7d      	.short	0x7f7d
 8005100:	7131      	.short	0x7131
 8005102:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005106:	441d      	add	r5, r3
 8005108:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800510c:	2820      	cmp	r0, #32
 800510e:	dd13      	ble.n	8005138 <_dtoa_r+0x210>
 8005110:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	fa08 f800 	lsl.w	r8, r8, r0
 800511a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800511e:	fa23 f000 	lsr.w	r0, r3, r0
 8005122:	ea48 0000 	orr.w	r0, r8, r0
 8005126:	f7fb f9f5 	bl	8000514 <__aeabi_ui2d>
 800512a:	2301      	movs	r3, #1
 800512c:	4682      	mov	sl, r0
 800512e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005132:	3d01      	subs	r5, #1
 8005134:	9313      	str	r3, [sp, #76]	; 0x4c
 8005136:	e772      	b.n	800501e <_dtoa_r+0xf6>
 8005138:	9b00      	ldr	r3, [sp, #0]
 800513a:	f1c0 0020 	rsb	r0, r0, #32
 800513e:	fa03 f000 	lsl.w	r0, r3, r0
 8005142:	e7f0      	b.n	8005126 <_dtoa_r+0x1fe>
 8005144:	2301      	movs	r3, #1
 8005146:	e7b1      	b.n	80050ac <_dtoa_r+0x184>
 8005148:	900f      	str	r0, [sp, #60]	; 0x3c
 800514a:	e7b0      	b.n	80050ae <_dtoa_r+0x186>
 800514c:	9b05      	ldr	r3, [sp, #20]
 800514e:	eba3 030a 	sub.w	r3, r3, sl
 8005152:	9305      	str	r3, [sp, #20]
 8005154:	f1ca 0300 	rsb	r3, sl, #0
 8005158:	9307      	str	r3, [sp, #28]
 800515a:	2300      	movs	r3, #0
 800515c:	930e      	str	r3, [sp, #56]	; 0x38
 800515e:	e7bb      	b.n	80050d8 <_dtoa_r+0x1b0>
 8005160:	2301      	movs	r3, #1
 8005162:	930a      	str	r3, [sp, #40]	; 0x28
 8005164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	dd59      	ble.n	800521e <_dtoa_r+0x2f6>
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	4699      	mov	r9, r3
 800516e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005170:	2200      	movs	r2, #0
 8005172:	6072      	str	r2, [r6, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	f102 0014 	add.w	r0, r2, #20
 800517a:	4298      	cmp	r0, r3
 800517c:	6871      	ldr	r1, [r6, #4]
 800517e:	d953      	bls.n	8005228 <_dtoa_r+0x300>
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fcaa 	bl	8005ada <_Balloc>
 8005186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005188:	6030      	str	r0, [r6, #0]
 800518a:	f1b9 0f0e 	cmp.w	r9, #14
 800518e:	f8d3 b000 	ldr.w	fp, [r3]
 8005192:	f200 80e6 	bhi.w	8005362 <_dtoa_r+0x43a>
 8005196:	2d00      	cmp	r5, #0
 8005198:	f000 80e3 	beq.w	8005362 <_dtoa_r+0x43a>
 800519c:	ed9d 7b00 	vldr	d7, [sp]
 80051a0:	f1ba 0f00 	cmp.w	sl, #0
 80051a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80051a8:	dd74      	ble.n	8005294 <_dtoa_r+0x36c>
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <_dtoa_r+0x32c>)
 80051ac:	f00a 030f 	and.w	r3, sl, #15
 80051b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b4:	ed93 7b00 	vldr	d7, [r3]
 80051b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051bc:	06f0      	lsls	r0, r6, #27
 80051be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80051c2:	d565      	bpl.n	8005290 <_dtoa_r+0x368>
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <_dtoa_r+0x330>)
 80051c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051ce:	f7fb fb45 	bl	800085c <__aeabi_ddiv>
 80051d2:	e9cd 0100 	strd	r0, r1, [sp]
 80051d6:	f006 060f 	and.w	r6, r6, #15
 80051da:	2503      	movs	r5, #3
 80051dc:	4f1e      	ldr	r7, [pc, #120]	; (8005258 <_dtoa_r+0x330>)
 80051de:	e04c      	b.n	800527a <_dtoa_r+0x352>
 80051e0:	2301      	movs	r3, #1
 80051e2:	930a      	str	r3, [sp, #40]	; 0x28
 80051e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e6:	4453      	add	r3, sl
 80051e8:	f103 0901 	add.w	r9, r3, #1
 80051ec:	9302      	str	r3, [sp, #8]
 80051ee:	464b      	mov	r3, r9
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bfb8      	it	lt
 80051f4:	2301      	movlt	r3, #1
 80051f6:	e7ba      	b.n	800516e <_dtoa_r+0x246>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e7b2      	b.n	8005162 <_dtoa_r+0x23a>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e7f0      	b.n	80051e2 <_dtoa_r+0x2ba>
 8005200:	2501      	movs	r5, #1
 8005202:	2300      	movs	r3, #0
 8005204:	9306      	str	r3, [sp, #24]
 8005206:	950a      	str	r5, [sp, #40]	; 0x28
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	4699      	mov	r9, r3
 8005210:	2200      	movs	r2, #0
 8005212:	2312      	movs	r3, #18
 8005214:	920b      	str	r2, [sp, #44]	; 0x2c
 8005216:	e7aa      	b.n	800516e <_dtoa_r+0x246>
 8005218:	2301      	movs	r3, #1
 800521a:	930a      	str	r3, [sp, #40]	; 0x28
 800521c:	e7f4      	b.n	8005208 <_dtoa_r+0x2e0>
 800521e:	2301      	movs	r3, #1
 8005220:	9302      	str	r3, [sp, #8]
 8005222:	4699      	mov	r9, r3
 8005224:	461a      	mov	r2, r3
 8005226:	e7f5      	b.n	8005214 <_dtoa_r+0x2ec>
 8005228:	3101      	adds	r1, #1
 800522a:	6071      	str	r1, [r6, #4]
 800522c:	0052      	lsls	r2, r2, #1
 800522e:	e7a2      	b.n	8005176 <_dtoa_r+0x24e>
 8005230:	636f4361 	.word	0x636f4361
 8005234:	3fd287a7 	.word	0x3fd287a7
 8005238:	8b60c8b3 	.word	0x8b60c8b3
 800523c:	3fc68a28 	.word	0x3fc68a28
 8005240:	509f79fb 	.word	0x509f79fb
 8005244:	3fd34413 	.word	0x3fd34413
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	08006621 	.word	0x08006621
 8005250:	3ff80000 	.word	0x3ff80000
 8005254:	08006680 	.word	0x08006680
 8005258:	08006658 	.word	0x08006658
 800525c:	0800664d 	.word	0x0800664d
 8005260:	07f1      	lsls	r1, r6, #31
 8005262:	d508      	bpl.n	8005276 <_dtoa_r+0x34e>
 8005264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526c:	f7fb f9cc 	bl	8000608 <__aeabi_dmul>
 8005270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005274:	3501      	adds	r5, #1
 8005276:	1076      	asrs	r6, r6, #1
 8005278:	3708      	adds	r7, #8
 800527a:	2e00      	cmp	r6, #0
 800527c:	d1f0      	bne.n	8005260 <_dtoa_r+0x338>
 800527e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005286:	f7fb fae9 	bl	800085c <__aeabi_ddiv>
 800528a:	e9cd 0100 	strd	r0, r1, [sp]
 800528e:	e01a      	b.n	80052c6 <_dtoa_r+0x39e>
 8005290:	2502      	movs	r5, #2
 8005292:	e7a3      	b.n	80051dc <_dtoa_r+0x2b4>
 8005294:	f000 80a0 	beq.w	80053d8 <_dtoa_r+0x4b0>
 8005298:	f1ca 0600 	rsb	r6, sl, #0
 800529c:	4b9f      	ldr	r3, [pc, #636]	; (800551c <_dtoa_r+0x5f4>)
 800529e:	4fa0      	ldr	r7, [pc, #640]	; (8005520 <_dtoa_r+0x5f8>)
 80052a0:	f006 020f 	and.w	r2, r6, #15
 80052a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052b0:	f7fb f9aa 	bl	8000608 <__aeabi_dmul>
 80052b4:	e9cd 0100 	strd	r0, r1, [sp]
 80052b8:	1136      	asrs	r6, r6, #4
 80052ba:	2300      	movs	r3, #0
 80052bc:	2502      	movs	r5, #2
 80052be:	2e00      	cmp	r6, #0
 80052c0:	d17f      	bne.n	80053c2 <_dtoa_r+0x49a>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e1      	bne.n	800528a <_dtoa_r+0x362>
 80052c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8087 	beq.w	80053dc <_dtoa_r+0x4b4>
 80052ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052d2:	2200      	movs	r2, #0
 80052d4:	4b93      	ldr	r3, [pc, #588]	; (8005524 <_dtoa_r+0x5fc>)
 80052d6:	4630      	mov	r0, r6
 80052d8:	4639      	mov	r1, r7
 80052da:	f7fb fc07 	bl	8000aec <__aeabi_dcmplt>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d07c      	beq.n	80053dc <_dtoa_r+0x4b4>
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	d079      	beq.n	80053dc <_dtoa_r+0x4b4>
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dd35      	ble.n	800535a <_dtoa_r+0x432>
 80052ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052f2:	9308      	str	r3, [sp, #32]
 80052f4:	4639      	mov	r1, r7
 80052f6:	2200      	movs	r2, #0
 80052f8:	4b8b      	ldr	r3, [pc, #556]	; (8005528 <_dtoa_r+0x600>)
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7fb f984 	bl	8000608 <__aeabi_dmul>
 8005300:	e9cd 0100 	strd	r0, r1, [sp]
 8005304:	9f02      	ldr	r7, [sp, #8]
 8005306:	3501      	adds	r5, #1
 8005308:	4628      	mov	r0, r5
 800530a:	f7fb f913 	bl	8000534 <__aeabi_i2d>
 800530e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005312:	f7fb f979 	bl	8000608 <__aeabi_dmul>
 8005316:	2200      	movs	r2, #0
 8005318:	4b84      	ldr	r3, [pc, #528]	; (800552c <_dtoa_r+0x604>)
 800531a:	f7fa ffbf 	bl	800029c <__adddf3>
 800531e:	4605      	mov	r5, r0
 8005320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005324:	2f00      	cmp	r7, #0
 8005326:	d15d      	bne.n	80053e4 <_dtoa_r+0x4bc>
 8005328:	2200      	movs	r2, #0
 800532a:	4b81      	ldr	r3, [pc, #516]	; (8005530 <_dtoa_r+0x608>)
 800532c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005330:	f7fa ffb2 	bl	8000298 <__aeabi_dsub>
 8005334:	462a      	mov	r2, r5
 8005336:	4633      	mov	r3, r6
 8005338:	e9cd 0100 	strd	r0, r1, [sp]
 800533c:	f7fb fbf4 	bl	8000b28 <__aeabi_dcmpgt>
 8005340:	2800      	cmp	r0, #0
 8005342:	f040 8288 	bne.w	8005856 <_dtoa_r+0x92e>
 8005346:	462a      	mov	r2, r5
 8005348:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800534c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005350:	f7fb fbcc 	bl	8000aec <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 827c 	bne.w	8005852 <_dtoa_r+0x92a>
 800535a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800535e:	e9cd 2300 	strd	r2, r3, [sp]
 8005362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005364:	2b00      	cmp	r3, #0
 8005366:	f2c0 8150 	blt.w	800560a <_dtoa_r+0x6e2>
 800536a:	f1ba 0f0e 	cmp.w	sl, #14
 800536e:	f300 814c 	bgt.w	800560a <_dtoa_r+0x6e2>
 8005372:	4b6a      	ldr	r3, [pc, #424]	; (800551c <_dtoa_r+0x5f4>)
 8005374:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005378:	ed93 7b00 	vldr	d7, [r3]
 800537c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005384:	f280 80d8 	bge.w	8005538 <_dtoa_r+0x610>
 8005388:	f1b9 0f00 	cmp.w	r9, #0
 800538c:	f300 80d4 	bgt.w	8005538 <_dtoa_r+0x610>
 8005390:	f040 825e 	bne.w	8005850 <_dtoa_r+0x928>
 8005394:	2200      	movs	r2, #0
 8005396:	4b66      	ldr	r3, [pc, #408]	; (8005530 <_dtoa_r+0x608>)
 8005398:	ec51 0b17 	vmov	r0, r1, d7
 800539c:	f7fb f934 	bl	8000608 <__aeabi_dmul>
 80053a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053a4:	f7fb fbb6 	bl	8000b14 <__aeabi_dcmpge>
 80053a8:	464f      	mov	r7, r9
 80053aa:	464e      	mov	r6, r9
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f040 8234 	bne.w	800581a <_dtoa_r+0x8f2>
 80053b2:	2331      	movs	r3, #49	; 0x31
 80053b4:	f10b 0501 	add.w	r5, fp, #1
 80053b8:	f88b 3000 	strb.w	r3, [fp]
 80053bc:	f10a 0a01 	add.w	sl, sl, #1
 80053c0:	e22f      	b.n	8005822 <_dtoa_r+0x8fa>
 80053c2:	07f2      	lsls	r2, r6, #31
 80053c4:	d505      	bpl.n	80053d2 <_dtoa_r+0x4aa>
 80053c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ca:	f7fb f91d 	bl	8000608 <__aeabi_dmul>
 80053ce:	3501      	adds	r5, #1
 80053d0:	2301      	movs	r3, #1
 80053d2:	1076      	asrs	r6, r6, #1
 80053d4:	3708      	adds	r7, #8
 80053d6:	e772      	b.n	80052be <_dtoa_r+0x396>
 80053d8:	2502      	movs	r5, #2
 80053da:	e774      	b.n	80052c6 <_dtoa_r+0x39e>
 80053dc:	f8cd a020 	str.w	sl, [sp, #32]
 80053e0:	464f      	mov	r7, r9
 80053e2:	e791      	b.n	8005308 <_dtoa_r+0x3e0>
 80053e4:	4b4d      	ldr	r3, [pc, #308]	; (800551c <_dtoa_r+0x5f4>)
 80053e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d047      	beq.n	8005484 <_dtoa_r+0x55c>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	2000      	movs	r0, #0
 80053fa:	494e      	ldr	r1, [pc, #312]	; (8005534 <_dtoa_r+0x60c>)
 80053fc:	f7fb fa2e 	bl	800085c <__aeabi_ddiv>
 8005400:	462a      	mov	r2, r5
 8005402:	4633      	mov	r3, r6
 8005404:	f7fa ff48 	bl	8000298 <__aeabi_dsub>
 8005408:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800540c:	465d      	mov	r5, fp
 800540e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005412:	f7fb fba9 	bl	8000b68 <__aeabi_d2iz>
 8005416:	4606      	mov	r6, r0
 8005418:	f7fb f88c 	bl	8000534 <__aeabi_i2d>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005424:	f7fa ff38 	bl	8000298 <__aeabi_dsub>
 8005428:	3630      	adds	r6, #48	; 0x30
 800542a:	f805 6b01 	strb.w	r6, [r5], #1
 800542e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005432:	e9cd 0100 	strd	r0, r1, [sp]
 8005436:	f7fb fb59 	bl	8000aec <__aeabi_dcmplt>
 800543a:	2800      	cmp	r0, #0
 800543c:	d163      	bne.n	8005506 <_dtoa_r+0x5de>
 800543e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005442:	2000      	movs	r0, #0
 8005444:	4937      	ldr	r1, [pc, #220]	; (8005524 <_dtoa_r+0x5fc>)
 8005446:	f7fa ff27 	bl	8000298 <__aeabi_dsub>
 800544a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800544e:	f7fb fb4d 	bl	8000aec <__aeabi_dcmplt>
 8005452:	2800      	cmp	r0, #0
 8005454:	f040 80b7 	bne.w	80055c6 <_dtoa_r+0x69e>
 8005458:	eba5 030b 	sub.w	r3, r5, fp
 800545c:	429f      	cmp	r7, r3
 800545e:	f77f af7c 	ble.w	800535a <_dtoa_r+0x432>
 8005462:	2200      	movs	r2, #0
 8005464:	4b30      	ldr	r3, [pc, #192]	; (8005528 <_dtoa_r+0x600>)
 8005466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800546a:	f7fb f8cd 	bl	8000608 <__aeabi_dmul>
 800546e:	2200      	movs	r2, #0
 8005470:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005474:	4b2c      	ldr	r3, [pc, #176]	; (8005528 <_dtoa_r+0x600>)
 8005476:	e9dd 0100 	ldrd	r0, r1, [sp]
 800547a:	f7fb f8c5 	bl	8000608 <__aeabi_dmul>
 800547e:	e9cd 0100 	strd	r0, r1, [sp]
 8005482:	e7c4      	b.n	800540e <_dtoa_r+0x4e6>
 8005484:	462a      	mov	r2, r5
 8005486:	4633      	mov	r3, r6
 8005488:	f7fb f8be 	bl	8000608 <__aeabi_dmul>
 800548c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005490:	eb0b 0507 	add.w	r5, fp, r7
 8005494:	465e      	mov	r6, fp
 8005496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800549a:	f7fb fb65 	bl	8000b68 <__aeabi_d2iz>
 800549e:	4607      	mov	r7, r0
 80054a0:	f7fb f848 	bl	8000534 <__aeabi_i2d>
 80054a4:	3730      	adds	r7, #48	; 0x30
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054ae:	f7fa fef3 	bl	8000298 <__aeabi_dsub>
 80054b2:	f806 7b01 	strb.w	r7, [r6], #1
 80054b6:	42ae      	cmp	r6, r5
 80054b8:	e9cd 0100 	strd	r0, r1, [sp]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	d126      	bne.n	8005510 <_dtoa_r+0x5e8>
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <_dtoa_r+0x60c>)
 80054c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c8:	f7fa fee8 	bl	800029c <__adddf3>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054d4:	f7fb fb28 	bl	8000b28 <__aeabi_dcmpgt>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d174      	bne.n	80055c6 <_dtoa_r+0x69e>
 80054dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054e0:	2000      	movs	r0, #0
 80054e2:	4914      	ldr	r1, [pc, #80]	; (8005534 <_dtoa_r+0x60c>)
 80054e4:	f7fa fed8 	bl	8000298 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f0:	f7fb fafc 	bl	8000aec <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f43f af30 	beq.w	800535a <_dtoa_r+0x432>
 80054fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054fe:	2b30      	cmp	r3, #48	; 0x30
 8005500:	f105 32ff 	add.w	r2, r5, #4294967295
 8005504:	d002      	beq.n	800550c <_dtoa_r+0x5e4>
 8005506:	f8dd a020 	ldr.w	sl, [sp, #32]
 800550a:	e04a      	b.n	80055a2 <_dtoa_r+0x67a>
 800550c:	4615      	mov	r5, r2
 800550e:	e7f4      	b.n	80054fa <_dtoa_r+0x5d2>
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <_dtoa_r+0x600>)
 8005512:	f7fb f879 	bl	8000608 <__aeabi_dmul>
 8005516:	e9cd 0100 	strd	r0, r1, [sp]
 800551a:	e7bc      	b.n	8005496 <_dtoa_r+0x56e>
 800551c:	08006680 	.word	0x08006680
 8005520:	08006658 	.word	0x08006658
 8005524:	3ff00000 	.word	0x3ff00000
 8005528:	40240000 	.word	0x40240000
 800552c:	401c0000 	.word	0x401c0000
 8005530:	40140000 	.word	0x40140000
 8005534:	3fe00000 	.word	0x3fe00000
 8005538:	e9dd 6700 	ldrd	r6, r7, [sp]
 800553c:	465d      	mov	r5, fp
 800553e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005542:	4630      	mov	r0, r6
 8005544:	4639      	mov	r1, r7
 8005546:	f7fb f989 	bl	800085c <__aeabi_ddiv>
 800554a:	f7fb fb0d 	bl	8000b68 <__aeabi_d2iz>
 800554e:	4680      	mov	r8, r0
 8005550:	f7fa fff0 	bl	8000534 <__aeabi_i2d>
 8005554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005558:	f7fb f856 	bl	8000608 <__aeabi_dmul>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005568:	f7fa fe96 	bl	8000298 <__aeabi_dsub>
 800556c:	f805 6b01 	strb.w	r6, [r5], #1
 8005570:	eba5 060b 	sub.w	r6, r5, fp
 8005574:	45b1      	cmp	r9, r6
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	d139      	bne.n	80055f0 <_dtoa_r+0x6c8>
 800557c:	f7fa fe8e 	bl	800029c <__adddf3>
 8005580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005584:	4606      	mov	r6, r0
 8005586:	460f      	mov	r7, r1
 8005588:	f7fb face 	bl	8000b28 <__aeabi_dcmpgt>
 800558c:	b9c8      	cbnz	r0, 80055c2 <_dtoa_r+0x69a>
 800558e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005592:	4630      	mov	r0, r6
 8005594:	4639      	mov	r1, r7
 8005596:	f7fb fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800559a:	b110      	cbz	r0, 80055a2 <_dtoa_r+0x67a>
 800559c:	f018 0f01 	tst.w	r8, #1
 80055a0:	d10f      	bne.n	80055c2 <_dtoa_r+0x69a>
 80055a2:	9904      	ldr	r1, [sp, #16]
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 facc 	bl	8005b42 <_Bfree>
 80055aa:	2300      	movs	r3, #0
 80055ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055ae:	702b      	strb	r3, [r5, #0]
 80055b0:	f10a 0301 	add.w	r3, sl, #1
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8241 	beq.w	8005a40 <_dtoa_r+0xb18>
 80055be:	601d      	str	r5, [r3, #0]
 80055c0:	e23e      	b.n	8005a40 <_dtoa_r+0xb18>
 80055c2:	f8cd a020 	str.w	sl, [sp, #32]
 80055c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055ca:	2a39      	cmp	r2, #57	; 0x39
 80055cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80055d0:	d108      	bne.n	80055e4 <_dtoa_r+0x6bc>
 80055d2:	459b      	cmp	fp, r3
 80055d4:	d10a      	bne.n	80055ec <_dtoa_r+0x6c4>
 80055d6:	9b08      	ldr	r3, [sp, #32]
 80055d8:	3301      	adds	r3, #1
 80055da:	9308      	str	r3, [sp, #32]
 80055dc:	2330      	movs	r3, #48	; 0x30
 80055de:	f88b 3000 	strb.w	r3, [fp]
 80055e2:	465b      	mov	r3, fp
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	3201      	adds	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e78c      	b.n	8005506 <_dtoa_r+0x5de>
 80055ec:	461d      	mov	r5, r3
 80055ee:	e7ea      	b.n	80055c6 <_dtoa_r+0x69e>
 80055f0:	2200      	movs	r2, #0
 80055f2:	4b9b      	ldr	r3, [pc, #620]	; (8005860 <_dtoa_r+0x938>)
 80055f4:	f7fb f808 	bl	8000608 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	f7fb fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005604:	2800      	cmp	r0, #0
 8005606:	d09a      	beq.n	800553e <_dtoa_r+0x616>
 8005608:	e7cb      	b.n	80055a2 <_dtoa_r+0x67a>
 800560a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800560c:	2a00      	cmp	r2, #0
 800560e:	f000 808b 	beq.w	8005728 <_dtoa_r+0x800>
 8005612:	9a06      	ldr	r2, [sp, #24]
 8005614:	2a01      	cmp	r2, #1
 8005616:	dc6e      	bgt.n	80056f6 <_dtoa_r+0x7ce>
 8005618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800561a:	2a00      	cmp	r2, #0
 800561c:	d067      	beq.n	80056ee <_dtoa_r+0x7c6>
 800561e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005622:	9f07      	ldr	r7, [sp, #28]
 8005624:	9d05      	ldr	r5, [sp, #20]
 8005626:	9a05      	ldr	r2, [sp, #20]
 8005628:	2101      	movs	r1, #1
 800562a:	441a      	add	r2, r3
 800562c:	4620      	mov	r0, r4
 800562e:	9205      	str	r2, [sp, #20]
 8005630:	4498      	add	r8, r3
 8005632:	f000 fb26 	bl	8005c82 <__i2b>
 8005636:	4606      	mov	r6, r0
 8005638:	2d00      	cmp	r5, #0
 800563a:	dd0c      	ble.n	8005656 <_dtoa_r+0x72e>
 800563c:	f1b8 0f00 	cmp.w	r8, #0
 8005640:	dd09      	ble.n	8005656 <_dtoa_r+0x72e>
 8005642:	4545      	cmp	r5, r8
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	462b      	mov	r3, r5
 8005648:	bfa8      	it	ge
 800564a:	4643      	movge	r3, r8
 800564c:	1ad2      	subs	r2, r2, r3
 800564e:	9205      	str	r2, [sp, #20]
 8005650:	1aed      	subs	r5, r5, r3
 8005652:	eba8 0803 	sub.w	r8, r8, r3
 8005656:	9b07      	ldr	r3, [sp, #28]
 8005658:	b1eb      	cbz	r3, 8005696 <_dtoa_r+0x76e>
 800565a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d067      	beq.n	8005730 <_dtoa_r+0x808>
 8005660:	b18f      	cbz	r7, 8005686 <_dtoa_r+0x75e>
 8005662:	4631      	mov	r1, r6
 8005664:	463a      	mov	r2, r7
 8005666:	4620      	mov	r0, r4
 8005668:	f000 fbaa 	bl	8005dc0 <__pow5mult>
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	4601      	mov	r1, r0
 8005670:	4606      	mov	r6, r0
 8005672:	4620      	mov	r0, r4
 8005674:	f000 fb0e 	bl	8005c94 <__multiply>
 8005678:	9904      	ldr	r1, [sp, #16]
 800567a:	9008      	str	r0, [sp, #32]
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fa60 	bl	8005b42 <_Bfree>
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	9304      	str	r3, [sp, #16]
 8005686:	9b07      	ldr	r3, [sp, #28]
 8005688:	1bda      	subs	r2, r3, r7
 800568a:	d004      	beq.n	8005696 <_dtoa_r+0x76e>
 800568c:	9904      	ldr	r1, [sp, #16]
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fb96 	bl	8005dc0 <__pow5mult>
 8005694:	9004      	str	r0, [sp, #16]
 8005696:	2101      	movs	r1, #1
 8005698:	4620      	mov	r0, r4
 800569a:	f000 faf2 	bl	8005c82 <__i2b>
 800569e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a0:	4607      	mov	r7, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 81d0 	beq.w	8005a48 <_dtoa_r+0xb20>
 80056a8:	461a      	mov	r2, r3
 80056aa:	4601      	mov	r1, r0
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fb87 	bl	8005dc0 <__pow5mult>
 80056b2:	9b06      	ldr	r3, [sp, #24]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	4607      	mov	r7, r0
 80056b8:	dc40      	bgt.n	800573c <_dtoa_r+0x814>
 80056ba:	9b00      	ldr	r3, [sp, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d139      	bne.n	8005734 <_dtoa_r+0x80c>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d136      	bne.n	8005738 <_dtoa_r+0x810>
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	0d1b      	lsrs	r3, r3, #20
 80056d2:	051b      	lsls	r3, r3, #20
 80056d4:	b12b      	cbz	r3, 80056e2 <_dtoa_r+0x7ba>
 80056d6:	9b05      	ldr	r3, [sp, #20]
 80056d8:	3301      	adds	r3, #1
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	f108 0801 	add.w	r8, r8, #1
 80056e0:	2301      	movs	r3, #1
 80056e2:	9307      	str	r3, [sp, #28]
 80056e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d12a      	bne.n	8005740 <_dtoa_r+0x818>
 80056ea:	2001      	movs	r0, #1
 80056ec:	e030      	b.n	8005750 <_dtoa_r+0x828>
 80056ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056f4:	e795      	b.n	8005622 <_dtoa_r+0x6fa>
 80056f6:	9b07      	ldr	r3, [sp, #28]
 80056f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80056fc:	42bb      	cmp	r3, r7
 80056fe:	bfbf      	itttt	lt
 8005700:	9b07      	ldrlt	r3, [sp, #28]
 8005702:	9707      	strlt	r7, [sp, #28]
 8005704:	1afa      	sublt	r2, r7, r3
 8005706:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005708:	bfbb      	ittet	lt
 800570a:	189b      	addlt	r3, r3, r2
 800570c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800570e:	1bdf      	subge	r7, r3, r7
 8005710:	2700      	movlt	r7, #0
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	bfb5      	itete	lt
 8005718:	9b05      	ldrlt	r3, [sp, #20]
 800571a:	9d05      	ldrge	r5, [sp, #20]
 800571c:	eba3 0509 	sublt.w	r5, r3, r9
 8005720:	464b      	movge	r3, r9
 8005722:	bfb8      	it	lt
 8005724:	2300      	movlt	r3, #0
 8005726:	e77e      	b.n	8005626 <_dtoa_r+0x6fe>
 8005728:	9f07      	ldr	r7, [sp, #28]
 800572a:	9d05      	ldr	r5, [sp, #20]
 800572c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800572e:	e783      	b.n	8005638 <_dtoa_r+0x710>
 8005730:	9a07      	ldr	r2, [sp, #28]
 8005732:	e7ab      	b.n	800568c <_dtoa_r+0x764>
 8005734:	2300      	movs	r3, #0
 8005736:	e7d4      	b.n	80056e2 <_dtoa_r+0x7ba>
 8005738:	9b00      	ldr	r3, [sp, #0]
 800573a:	e7d2      	b.n	80056e2 <_dtoa_r+0x7ba>
 800573c:	2300      	movs	r3, #0
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005746:	6918      	ldr	r0, [r3, #16]
 8005748:	f000 fa4d 	bl	8005be6 <__hi0bits>
 800574c:	f1c0 0020 	rsb	r0, r0, #32
 8005750:	4440      	add	r0, r8
 8005752:	f010 001f 	ands.w	r0, r0, #31
 8005756:	d047      	beq.n	80057e8 <_dtoa_r+0x8c0>
 8005758:	f1c0 0320 	rsb	r3, r0, #32
 800575c:	2b04      	cmp	r3, #4
 800575e:	dd3b      	ble.n	80057d8 <_dtoa_r+0x8b0>
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	f1c0 001c 	rsb	r0, r0, #28
 8005766:	4403      	add	r3, r0
 8005768:	9305      	str	r3, [sp, #20]
 800576a:	4405      	add	r5, r0
 800576c:	4480      	add	r8, r0
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	dd05      	ble.n	8005780 <_dtoa_r+0x858>
 8005774:	461a      	mov	r2, r3
 8005776:	9904      	ldr	r1, [sp, #16]
 8005778:	4620      	mov	r0, r4
 800577a:	f000 fb6f 	bl	8005e5c <__lshift>
 800577e:	9004      	str	r0, [sp, #16]
 8005780:	f1b8 0f00 	cmp.w	r8, #0
 8005784:	dd05      	ble.n	8005792 <_dtoa_r+0x86a>
 8005786:	4639      	mov	r1, r7
 8005788:	4642      	mov	r2, r8
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fb66 	bl	8005e5c <__lshift>
 8005790:	4607      	mov	r7, r0
 8005792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005794:	b353      	cbz	r3, 80057ec <_dtoa_r+0x8c4>
 8005796:	4639      	mov	r1, r7
 8005798:	9804      	ldr	r0, [sp, #16]
 800579a:	f000 fbb3 	bl	8005f04 <__mcmp>
 800579e:	2800      	cmp	r0, #0
 80057a0:	da24      	bge.n	80057ec <_dtoa_r+0x8c4>
 80057a2:	2300      	movs	r3, #0
 80057a4:	220a      	movs	r2, #10
 80057a6:	9904      	ldr	r1, [sp, #16]
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 f9e1 	bl	8005b70 <__multadd>
 80057ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b0:	9004      	str	r0, [sp, #16]
 80057b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 814d 	beq.w	8005a56 <_dtoa_r+0xb2e>
 80057bc:	2300      	movs	r3, #0
 80057be:	4631      	mov	r1, r6
 80057c0:	220a      	movs	r2, #10
 80057c2:	4620      	mov	r0, r4
 80057c4:	f000 f9d4 	bl	8005b70 <__multadd>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	4606      	mov	r6, r0
 80057ce:	dc4f      	bgt.n	8005870 <_dtoa_r+0x948>
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	dd4c      	ble.n	8005870 <_dtoa_r+0x948>
 80057d6:	e011      	b.n	80057fc <_dtoa_r+0x8d4>
 80057d8:	d0c9      	beq.n	800576e <_dtoa_r+0x846>
 80057da:	9a05      	ldr	r2, [sp, #20]
 80057dc:	331c      	adds	r3, #28
 80057de:	441a      	add	r2, r3
 80057e0:	9205      	str	r2, [sp, #20]
 80057e2:	441d      	add	r5, r3
 80057e4:	4498      	add	r8, r3
 80057e6:	e7c2      	b.n	800576e <_dtoa_r+0x846>
 80057e8:	4603      	mov	r3, r0
 80057ea:	e7f6      	b.n	80057da <_dtoa_r+0x8b2>
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	dc38      	bgt.n	8005864 <_dtoa_r+0x93c>
 80057f2:	9b06      	ldr	r3, [sp, #24]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	dd35      	ble.n	8005864 <_dtoa_r+0x93c>
 80057f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80057fc:	9b02      	ldr	r3, [sp, #8]
 80057fe:	b963      	cbnz	r3, 800581a <_dtoa_r+0x8f2>
 8005800:	4639      	mov	r1, r7
 8005802:	2205      	movs	r2, #5
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f9b3 	bl	8005b70 <__multadd>
 800580a:	4601      	mov	r1, r0
 800580c:	4607      	mov	r7, r0
 800580e:	9804      	ldr	r0, [sp, #16]
 8005810:	f000 fb78 	bl	8005f04 <__mcmp>
 8005814:	2800      	cmp	r0, #0
 8005816:	f73f adcc 	bgt.w	80053b2 <_dtoa_r+0x48a>
 800581a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581c:	465d      	mov	r5, fp
 800581e:	ea6f 0a03 	mvn.w	sl, r3
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	4639      	mov	r1, r7
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f98a 	bl	8005b42 <_Bfree>
 800582e:	2e00      	cmp	r6, #0
 8005830:	f43f aeb7 	beq.w	80055a2 <_dtoa_r+0x67a>
 8005834:	f1b9 0f00 	cmp.w	r9, #0
 8005838:	d005      	beq.n	8005846 <_dtoa_r+0x91e>
 800583a:	45b1      	cmp	r9, r6
 800583c:	d003      	beq.n	8005846 <_dtoa_r+0x91e>
 800583e:	4649      	mov	r1, r9
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f97e 	bl	8005b42 <_Bfree>
 8005846:	4631      	mov	r1, r6
 8005848:	4620      	mov	r0, r4
 800584a:	f000 f97a 	bl	8005b42 <_Bfree>
 800584e:	e6a8      	b.n	80055a2 <_dtoa_r+0x67a>
 8005850:	2700      	movs	r7, #0
 8005852:	463e      	mov	r6, r7
 8005854:	e7e1      	b.n	800581a <_dtoa_r+0x8f2>
 8005856:	f8dd a020 	ldr.w	sl, [sp, #32]
 800585a:	463e      	mov	r6, r7
 800585c:	e5a9      	b.n	80053b2 <_dtoa_r+0x48a>
 800585e:	bf00      	nop
 8005860:	40240000 	.word	0x40240000
 8005864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005866:	f8cd 9008 	str.w	r9, [sp, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80fa 	beq.w	8005a64 <_dtoa_r+0xb3c>
 8005870:	2d00      	cmp	r5, #0
 8005872:	dd05      	ble.n	8005880 <_dtoa_r+0x958>
 8005874:	4631      	mov	r1, r6
 8005876:	462a      	mov	r2, r5
 8005878:	4620      	mov	r0, r4
 800587a:	f000 faef 	bl	8005e5c <__lshift>
 800587e:	4606      	mov	r6, r0
 8005880:	9b07      	ldr	r3, [sp, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d04c      	beq.n	8005920 <_dtoa_r+0x9f8>
 8005886:	6871      	ldr	r1, [r6, #4]
 8005888:	4620      	mov	r0, r4
 800588a:	f000 f926 	bl	8005ada <_Balloc>
 800588e:	6932      	ldr	r2, [r6, #16]
 8005890:	3202      	adds	r2, #2
 8005892:	4605      	mov	r5, r0
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	f106 010c 	add.w	r1, r6, #12
 800589a:	300c      	adds	r0, #12
 800589c:	f000 f912 	bl	8005ac4 <memcpy>
 80058a0:	2201      	movs	r2, #1
 80058a2:	4629      	mov	r1, r5
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fad9 	bl	8005e5c <__lshift>
 80058aa:	9b00      	ldr	r3, [sp, #0]
 80058ac:	f8cd b014 	str.w	fp, [sp, #20]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	46b1      	mov	r9, r6
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	4606      	mov	r6, r0
 80058ba:	4639      	mov	r1, r7
 80058bc:	9804      	ldr	r0, [sp, #16]
 80058be:	f7ff faa7 	bl	8004e10 <quorem>
 80058c2:	4649      	mov	r1, r9
 80058c4:	4605      	mov	r5, r0
 80058c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058ca:	9804      	ldr	r0, [sp, #16]
 80058cc:	f000 fb1a 	bl	8005f04 <__mcmp>
 80058d0:	4632      	mov	r2, r6
 80058d2:	9000      	str	r0, [sp, #0]
 80058d4:	4639      	mov	r1, r7
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fb2e 	bl	8005f38 <__mdiff>
 80058dc:	68c3      	ldr	r3, [r0, #12]
 80058de:	4602      	mov	r2, r0
 80058e0:	bb03      	cbnz	r3, 8005924 <_dtoa_r+0x9fc>
 80058e2:	4601      	mov	r1, r0
 80058e4:	9008      	str	r0, [sp, #32]
 80058e6:	9804      	ldr	r0, [sp, #16]
 80058e8:	f000 fb0c 	bl	8005f04 <__mcmp>
 80058ec:	9a08      	ldr	r2, [sp, #32]
 80058ee:	4603      	mov	r3, r0
 80058f0:	4611      	mov	r1, r2
 80058f2:	4620      	mov	r0, r4
 80058f4:	9308      	str	r3, [sp, #32]
 80058f6:	f000 f924 	bl	8005b42 <_Bfree>
 80058fa:	9b08      	ldr	r3, [sp, #32]
 80058fc:	b9a3      	cbnz	r3, 8005928 <_dtoa_r+0xa00>
 80058fe:	9a06      	ldr	r2, [sp, #24]
 8005900:	b992      	cbnz	r2, 8005928 <_dtoa_r+0xa00>
 8005902:	9a07      	ldr	r2, [sp, #28]
 8005904:	b982      	cbnz	r2, 8005928 <_dtoa_r+0xa00>
 8005906:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800590a:	d029      	beq.n	8005960 <_dtoa_r+0xa38>
 800590c:	9b00      	ldr	r3, [sp, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	dd01      	ble.n	8005916 <_dtoa_r+0x9ee>
 8005912:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005916:	9b05      	ldr	r3, [sp, #20]
 8005918:	1c5d      	adds	r5, r3, #1
 800591a:	f883 8000 	strb.w	r8, [r3]
 800591e:	e782      	b.n	8005826 <_dtoa_r+0x8fe>
 8005920:	4630      	mov	r0, r6
 8005922:	e7c2      	b.n	80058aa <_dtoa_r+0x982>
 8005924:	2301      	movs	r3, #1
 8005926:	e7e3      	b.n	80058f0 <_dtoa_r+0x9c8>
 8005928:	9a00      	ldr	r2, [sp, #0]
 800592a:	2a00      	cmp	r2, #0
 800592c:	db04      	blt.n	8005938 <_dtoa_r+0xa10>
 800592e:	d125      	bne.n	800597c <_dtoa_r+0xa54>
 8005930:	9a06      	ldr	r2, [sp, #24]
 8005932:	bb1a      	cbnz	r2, 800597c <_dtoa_r+0xa54>
 8005934:	9a07      	ldr	r2, [sp, #28]
 8005936:	bb0a      	cbnz	r2, 800597c <_dtoa_r+0xa54>
 8005938:	2b00      	cmp	r3, #0
 800593a:	ddec      	ble.n	8005916 <_dtoa_r+0x9ee>
 800593c:	2201      	movs	r2, #1
 800593e:	9904      	ldr	r1, [sp, #16]
 8005940:	4620      	mov	r0, r4
 8005942:	f000 fa8b 	bl	8005e5c <__lshift>
 8005946:	4639      	mov	r1, r7
 8005948:	9004      	str	r0, [sp, #16]
 800594a:	f000 fadb 	bl	8005f04 <__mcmp>
 800594e:	2800      	cmp	r0, #0
 8005950:	dc03      	bgt.n	800595a <_dtoa_r+0xa32>
 8005952:	d1e0      	bne.n	8005916 <_dtoa_r+0x9ee>
 8005954:	f018 0f01 	tst.w	r8, #1
 8005958:	d0dd      	beq.n	8005916 <_dtoa_r+0x9ee>
 800595a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800595e:	d1d8      	bne.n	8005912 <_dtoa_r+0x9ea>
 8005960:	9b05      	ldr	r3, [sp, #20]
 8005962:	9a05      	ldr	r2, [sp, #20]
 8005964:	1c5d      	adds	r5, r3, #1
 8005966:	2339      	movs	r3, #57	; 0x39
 8005968:	7013      	strb	r3, [r2, #0]
 800596a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800596e:	2b39      	cmp	r3, #57	; 0x39
 8005970:	f105 32ff 	add.w	r2, r5, #4294967295
 8005974:	d04f      	beq.n	8005a16 <_dtoa_r+0xaee>
 8005976:	3301      	adds	r3, #1
 8005978:	7013      	strb	r3, [r2, #0]
 800597a:	e754      	b.n	8005826 <_dtoa_r+0x8fe>
 800597c:	9a05      	ldr	r2, [sp, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f102 0501 	add.w	r5, r2, #1
 8005984:	dd06      	ble.n	8005994 <_dtoa_r+0xa6c>
 8005986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800598a:	d0e9      	beq.n	8005960 <_dtoa_r+0xa38>
 800598c:	f108 0801 	add.w	r8, r8, #1
 8005990:	9b05      	ldr	r3, [sp, #20]
 8005992:	e7c2      	b.n	800591a <_dtoa_r+0x9f2>
 8005994:	9a02      	ldr	r2, [sp, #8]
 8005996:	f805 8c01 	strb.w	r8, [r5, #-1]
 800599a:	eba5 030b 	sub.w	r3, r5, fp
 800599e:	4293      	cmp	r3, r2
 80059a0:	d021      	beq.n	80059e6 <_dtoa_r+0xabe>
 80059a2:	2300      	movs	r3, #0
 80059a4:	220a      	movs	r2, #10
 80059a6:	9904      	ldr	r1, [sp, #16]
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f8e1 	bl	8005b70 <__multadd>
 80059ae:	45b1      	cmp	r9, r6
 80059b0:	9004      	str	r0, [sp, #16]
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f04f 020a 	mov.w	r2, #10
 80059ba:	4649      	mov	r1, r9
 80059bc:	4620      	mov	r0, r4
 80059be:	d105      	bne.n	80059cc <_dtoa_r+0xaa4>
 80059c0:	f000 f8d6 	bl	8005b70 <__multadd>
 80059c4:	4681      	mov	r9, r0
 80059c6:	4606      	mov	r6, r0
 80059c8:	9505      	str	r5, [sp, #20]
 80059ca:	e776      	b.n	80058ba <_dtoa_r+0x992>
 80059cc:	f000 f8d0 	bl	8005b70 <__multadd>
 80059d0:	4631      	mov	r1, r6
 80059d2:	4681      	mov	r9, r0
 80059d4:	2300      	movs	r3, #0
 80059d6:	220a      	movs	r2, #10
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 f8c9 	bl	8005b70 <__multadd>
 80059de:	4606      	mov	r6, r0
 80059e0:	e7f2      	b.n	80059c8 <_dtoa_r+0xaa0>
 80059e2:	f04f 0900 	mov.w	r9, #0
 80059e6:	2201      	movs	r2, #1
 80059e8:	9904      	ldr	r1, [sp, #16]
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fa36 	bl	8005e5c <__lshift>
 80059f0:	4639      	mov	r1, r7
 80059f2:	9004      	str	r0, [sp, #16]
 80059f4:	f000 fa86 	bl	8005f04 <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	dcb6      	bgt.n	800596a <_dtoa_r+0xa42>
 80059fc:	d102      	bne.n	8005a04 <_dtoa_r+0xadc>
 80059fe:	f018 0f01 	tst.w	r8, #1
 8005a02:	d1b2      	bne.n	800596a <_dtoa_r+0xa42>
 8005a04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a0e:	f47f af0a 	bne.w	8005826 <_dtoa_r+0x8fe>
 8005a12:	4615      	mov	r5, r2
 8005a14:	e7f6      	b.n	8005a04 <_dtoa_r+0xadc>
 8005a16:	4593      	cmp	fp, r2
 8005a18:	d105      	bne.n	8005a26 <_dtoa_r+0xafe>
 8005a1a:	2331      	movs	r3, #49	; 0x31
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	f88b 3000 	strb.w	r3, [fp]
 8005a24:	e6ff      	b.n	8005826 <_dtoa_r+0x8fe>
 8005a26:	4615      	mov	r5, r2
 8005a28:	e79f      	b.n	800596a <_dtoa_r+0xa42>
 8005a2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005a90 <_dtoa_r+0xb68>
 8005a2e:	e007      	b.n	8005a40 <_dtoa_r+0xb18>
 8005a30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005a94 <_dtoa_r+0xb6c>
 8005a36:	b11b      	cbz	r3, 8005a40 <_dtoa_r+0xb18>
 8005a38:	f10b 0308 	add.w	r3, fp, #8
 8005a3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4658      	mov	r0, fp
 8005a42:	b017      	add	sp, #92	; 0x5c
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	f77f ae35 	ble.w	80056ba <_dtoa_r+0x792>
 8005a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a52:	9307      	str	r3, [sp, #28]
 8005a54:	e649      	b.n	80056ea <_dtoa_r+0x7c2>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc03      	bgt.n	8005a64 <_dtoa_r+0xb3c>
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f73f aecc 	bgt.w	80057fc <_dtoa_r+0x8d4>
 8005a64:	465d      	mov	r5, fp
 8005a66:	4639      	mov	r1, r7
 8005a68:	9804      	ldr	r0, [sp, #16]
 8005a6a:	f7ff f9d1 	bl	8004e10 <quorem>
 8005a6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a72:	f805 8b01 	strb.w	r8, [r5], #1
 8005a76:	9a02      	ldr	r2, [sp, #8]
 8005a78:	eba5 030b 	sub.w	r3, r5, fp
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	ddb0      	ble.n	80059e2 <_dtoa_r+0xaba>
 8005a80:	2300      	movs	r3, #0
 8005a82:	220a      	movs	r2, #10
 8005a84:	9904      	ldr	r1, [sp, #16]
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f872 	bl	8005b70 <__multadd>
 8005a8c:	9004      	str	r0, [sp, #16]
 8005a8e:	e7ea      	b.n	8005a66 <_dtoa_r+0xb3e>
 8005a90:	08006620 	.word	0x08006620
 8005a94:	08006644 	.word	0x08006644

08005a98 <_localeconv_r>:
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <_localeconv_r+0x14>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a18      	ldr	r0, [r3, #32]
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <_localeconv_r+0x18>)
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	bf08      	it	eq
 8005aa4:	4618      	moveq	r0, r3
 8005aa6:	30f0      	adds	r0, #240	; 0xf0
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	2000000c 	.word	0x2000000c
 8005ab0:	20000070 	.word	0x20000070

08005ab4 <malloc>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <malloc+0xc>)
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	f000 bb45 	b.w	8006148 <_malloc_r>
 8005abe:	bf00      	nop
 8005ac0:	2000000c 	.word	0x2000000c

08005ac4 <memcpy>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	1e43      	subs	r3, r0, #1
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	d100      	bne.n	8005ad0 <memcpy+0xc>
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad8:	e7f7      	b.n	8005aca <memcpy+0x6>

08005ada <_Balloc>:
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	b93d      	cbnz	r5, 8005af4 <_Balloc+0x1a>
 8005ae4:	2010      	movs	r0, #16
 8005ae6:	f7ff ffe5 	bl	8005ab4 <malloc>
 8005aea:	6260      	str	r0, [r4, #36]	; 0x24
 8005aec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005af0:	6005      	str	r5, [r0, #0]
 8005af2:	60c5      	str	r5, [r0, #12]
 8005af4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005af6:	68eb      	ldr	r3, [r5, #12]
 8005af8:	b183      	cbz	r3, 8005b1c <_Balloc+0x42>
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b02:	b9b8      	cbnz	r0, 8005b34 <_Balloc+0x5a>
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f506 	lsl.w	r5, r1, r6
 8005b0a:	1d6a      	adds	r2, r5, #5
 8005b0c:	0092      	lsls	r2, r2, #2
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fabe 	bl	8006090 <_calloc_r>
 8005b14:	b160      	cbz	r0, 8005b30 <_Balloc+0x56>
 8005b16:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b1a:	e00e      	b.n	8005b3a <_Balloc+0x60>
 8005b1c:	2221      	movs	r2, #33	; 0x21
 8005b1e:	2104      	movs	r1, #4
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fab5 	bl	8006090 <_calloc_r>
 8005b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b28:	60e8      	str	r0, [r5, #12]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e4      	bne.n	8005afa <_Balloc+0x20>
 8005b30:	2000      	movs	r0, #0
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	6802      	ldr	r2, [r0, #0]
 8005b36:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b40:	e7f7      	b.n	8005b32 <_Balloc+0x58>

08005b42 <_Bfree>:
 8005b42:	b570      	push	{r4, r5, r6, lr}
 8005b44:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b46:	4606      	mov	r6, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	b93c      	cbnz	r4, 8005b5c <_Bfree+0x1a>
 8005b4c:	2010      	movs	r0, #16
 8005b4e:	f7ff ffb1 	bl	8005ab4 <malloc>
 8005b52:	6270      	str	r0, [r6, #36]	; 0x24
 8005b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b58:	6004      	str	r4, [r0, #0]
 8005b5a:	60c4      	str	r4, [r0, #12]
 8005b5c:	b13d      	cbz	r5, 8005b6e <_Bfree+0x2c>
 8005b5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b60:	686a      	ldr	r2, [r5, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b68:	6029      	str	r1, [r5, #0]
 8005b6a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}

08005b70 <__multadd>:
 8005b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	690d      	ldr	r5, [r1, #16]
 8005b76:	461f      	mov	r7, r3
 8005b78:	4606      	mov	r6, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f101 0c14 	add.w	ip, r1, #20
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8dc 0000 	ldr.w	r0, [ip]
 8005b86:	b281      	uxth	r1, r0
 8005b88:	fb02 7101 	mla	r1, r2, r1, r7
 8005b8c:	0c0f      	lsrs	r7, r1, #16
 8005b8e:	0c00      	lsrs	r0, r0, #16
 8005b90:	fb02 7000 	mla	r0, r2, r0, r7
 8005b94:	b289      	uxth	r1, r1
 8005b96:	3301      	adds	r3, #1
 8005b98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005b9c:	429d      	cmp	r5, r3
 8005b9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8005ba6:	dcec      	bgt.n	8005b82 <__multadd+0x12>
 8005ba8:	b1d7      	cbz	r7, 8005be0 <__multadd+0x70>
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	42ab      	cmp	r3, r5
 8005bae:	dc12      	bgt.n	8005bd6 <__multadd+0x66>
 8005bb0:	6861      	ldr	r1, [r4, #4]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	3101      	adds	r1, #1
 8005bb6:	f7ff ff90 	bl	8005ada <_Balloc>
 8005bba:	6922      	ldr	r2, [r4, #16]
 8005bbc:	3202      	adds	r2, #2
 8005bbe:	f104 010c 	add.w	r1, r4, #12
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	300c      	adds	r0, #12
 8005bc8:	f7ff ff7c 	bl	8005ac4 <memcpy>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffb7 	bl	8005b42 <_Bfree>
 8005bd4:	4644      	mov	r4, r8
 8005bd6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bda:	3501      	adds	r5, #1
 8005bdc:	615f      	str	r7, [r3, #20]
 8005bde:	6125      	str	r5, [r4, #16]
 8005be0:	4620      	mov	r0, r4
 8005be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005be6 <__hi0bits>:
 8005be6:	0c02      	lsrs	r2, r0, #16
 8005be8:	0412      	lsls	r2, r2, #16
 8005bea:	4603      	mov	r3, r0
 8005bec:	b9b2      	cbnz	r2, 8005c1c <__hi0bits+0x36>
 8005bee:	0403      	lsls	r3, r0, #16
 8005bf0:	2010      	movs	r0, #16
 8005bf2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bf6:	bf04      	itt	eq
 8005bf8:	021b      	lsleq	r3, r3, #8
 8005bfa:	3008      	addeq	r0, #8
 8005bfc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c00:	bf04      	itt	eq
 8005c02:	011b      	lsleq	r3, r3, #4
 8005c04:	3004      	addeq	r0, #4
 8005c06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c0a:	bf04      	itt	eq
 8005c0c:	009b      	lsleq	r3, r3, #2
 8005c0e:	3002      	addeq	r0, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db06      	blt.n	8005c22 <__hi0bits+0x3c>
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	d503      	bpl.n	8005c20 <__hi0bits+0x3a>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	4770      	bx	lr
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7e8      	b.n	8005bf2 <__hi0bits+0xc>
 8005c20:	2020      	movs	r0, #32
 8005c22:	4770      	bx	lr

08005c24 <__lo0bits>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	f013 0207 	ands.w	r2, r3, #7
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	d00b      	beq.n	8005c46 <__lo0bits+0x22>
 8005c2e:	07da      	lsls	r2, r3, #31
 8005c30:	d423      	bmi.n	8005c7a <__lo0bits+0x56>
 8005c32:	0798      	lsls	r0, r3, #30
 8005c34:	bf49      	itett	mi
 8005c36:	085b      	lsrmi	r3, r3, #1
 8005c38:	089b      	lsrpl	r3, r3, #2
 8005c3a:	2001      	movmi	r0, #1
 8005c3c:	600b      	strmi	r3, [r1, #0]
 8005c3e:	bf5c      	itt	pl
 8005c40:	600b      	strpl	r3, [r1, #0]
 8005c42:	2002      	movpl	r0, #2
 8005c44:	4770      	bx	lr
 8005c46:	b298      	uxth	r0, r3
 8005c48:	b9a8      	cbnz	r0, 8005c76 <__lo0bits+0x52>
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c52:	bf04      	itt	eq
 8005c54:	0a1b      	lsreq	r3, r3, #8
 8005c56:	3008      	addeq	r0, #8
 8005c58:	071a      	lsls	r2, r3, #28
 8005c5a:	bf04      	itt	eq
 8005c5c:	091b      	lsreq	r3, r3, #4
 8005c5e:	3004      	addeq	r0, #4
 8005c60:	079a      	lsls	r2, r3, #30
 8005c62:	bf04      	itt	eq
 8005c64:	089b      	lsreq	r3, r3, #2
 8005c66:	3002      	addeq	r0, #2
 8005c68:	07da      	lsls	r2, r3, #31
 8005c6a:	d402      	bmi.n	8005c72 <__lo0bits+0x4e>
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	d006      	beq.n	8005c7e <__lo0bits+0x5a>
 8005c70:	3001      	adds	r0, #1
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	4770      	bx	lr
 8005c76:	4610      	mov	r0, r2
 8005c78:	e7e9      	b.n	8005c4e <__lo0bits+0x2a>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	4770      	bx	lr
 8005c7e:	2020      	movs	r0, #32
 8005c80:	4770      	bx	lr

08005c82 <__i2b>:
 8005c82:	b510      	push	{r4, lr}
 8005c84:	460c      	mov	r4, r1
 8005c86:	2101      	movs	r1, #1
 8005c88:	f7ff ff27 	bl	8005ada <_Balloc>
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	6144      	str	r4, [r0, #20]
 8005c90:	6102      	str	r2, [r0, #16]
 8005c92:	bd10      	pop	{r4, pc}

08005c94 <__multiply>:
 8005c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	4614      	mov	r4, r2
 8005c9a:	690a      	ldr	r2, [r1, #16]
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bfb8      	it	lt
 8005ca2:	460b      	movlt	r3, r1
 8005ca4:	4688      	mov	r8, r1
 8005ca6:	bfbc      	itt	lt
 8005ca8:	46a0      	movlt	r8, r4
 8005caa:	461c      	movlt	r4, r3
 8005cac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cbc:	eb07 0609 	add.w	r6, r7, r9
 8005cc0:	42b3      	cmp	r3, r6
 8005cc2:	bfb8      	it	lt
 8005cc4:	3101      	addlt	r1, #1
 8005cc6:	f7ff ff08 	bl	8005ada <_Balloc>
 8005cca:	f100 0514 	add.w	r5, r0, #20
 8005cce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cd2:	462b      	mov	r3, r5
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4573      	cmp	r3, lr
 8005cd8:	d316      	bcc.n	8005d08 <__multiply+0x74>
 8005cda:	f104 0214 	add.w	r2, r4, #20
 8005cde:	f108 0114 	add.w	r1, r8, #20
 8005ce2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ce6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	9b00      	ldr	r3, [sp, #0]
 8005cee:	9201      	str	r2, [sp, #4]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d80c      	bhi.n	8005d0e <__multiply+0x7a>
 8005cf4:	2e00      	cmp	r6, #0
 8005cf6:	dd03      	ble.n	8005d00 <__multiply+0x6c>
 8005cf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05d      	beq.n	8005dbc <__multiply+0x128>
 8005d00:	6106      	str	r6, [r0, #16]
 8005d02:	b003      	add	sp, #12
 8005d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d08:	f843 2b04 	str.w	r2, [r3], #4
 8005d0c:	e7e3      	b.n	8005cd6 <__multiply+0x42>
 8005d0e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d12:	f1bb 0f00 	cmp.w	fp, #0
 8005d16:	d023      	beq.n	8005d60 <__multiply+0xcc>
 8005d18:	4689      	mov	r9, r1
 8005d1a:	46ac      	mov	ip, r5
 8005d1c:	f04f 0800 	mov.w	r8, #0
 8005d20:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d24:	f8dc a000 	ldr.w	sl, [ip]
 8005d28:	b2a3      	uxth	r3, r4
 8005d2a:	fa1f fa8a 	uxth.w	sl, sl
 8005d2e:	fb0b a303 	mla	r3, fp, r3, sl
 8005d32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d36:	f8dc 4000 	ldr.w	r4, [ip]
 8005d3a:	4443      	add	r3, r8
 8005d3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d40:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d48:	46e2      	mov	sl, ip
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d50:	454f      	cmp	r7, r9
 8005d52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d56:	f84a 3b04 	str.w	r3, [sl], #4
 8005d5a:	d82b      	bhi.n	8005db4 <__multiply+0x120>
 8005d5c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d66:	3204      	adds	r2, #4
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d020      	beq.n	8005db0 <__multiply+0x11c>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	4689      	mov	r9, r1
 8005d72:	46a8      	mov	r8, r5
 8005d74:	f04f 0b00 	mov.w	fp, #0
 8005d78:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d80:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d84:	445c      	add	r4, fp
 8005d86:	46c4      	mov	ip, r8
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d92:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d9a:	0c1b      	lsrs	r3, r3, #16
 8005d9c:	fb0a b303 	mla	r3, sl, r3, fp
 8005da0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005da4:	454f      	cmp	r7, r9
 8005da6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005daa:	d805      	bhi.n	8005db8 <__multiply+0x124>
 8005dac:	f8c8 3004 	str.w	r3, [r8, #4]
 8005db0:	3504      	adds	r5, #4
 8005db2:	e79b      	b.n	8005cec <__multiply+0x58>
 8005db4:	46d4      	mov	ip, sl
 8005db6:	e7b3      	b.n	8005d20 <__multiply+0x8c>
 8005db8:	46e0      	mov	r8, ip
 8005dba:	e7dd      	b.n	8005d78 <__multiply+0xe4>
 8005dbc:	3e01      	subs	r6, #1
 8005dbe:	e799      	b.n	8005cf4 <__multiply+0x60>

08005dc0 <__pow5mult>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	f012 0203 	ands.w	r2, r2, #3
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	d007      	beq.n	8005de0 <__pow5mult+0x20>
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	4c21      	ldr	r4, [pc, #132]	; (8005e58 <__pow5mult+0x98>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dda:	f7ff fec9 	bl	8005b70 <__multadd>
 8005dde:	4607      	mov	r7, r0
 8005de0:	10ad      	asrs	r5, r5, #2
 8005de2:	d035      	beq.n	8005e50 <__pow5mult+0x90>
 8005de4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005de6:	b93c      	cbnz	r4, 8005df8 <__pow5mult+0x38>
 8005de8:	2010      	movs	r0, #16
 8005dea:	f7ff fe63 	bl	8005ab4 <malloc>
 8005dee:	6270      	str	r0, [r6, #36]	; 0x24
 8005df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df4:	6004      	str	r4, [r0, #0]
 8005df6:	60c4      	str	r4, [r0, #12]
 8005df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e00:	b94c      	cbnz	r4, 8005e16 <__pow5mult+0x56>
 8005e02:	f240 2171 	movw	r1, #625	; 0x271
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ff3b 	bl	8005c82 <__i2b>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e12:	4604      	mov	r4, r0
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	07eb      	lsls	r3, r5, #31
 8005e1c:	d50a      	bpl.n	8005e34 <__pow5mult+0x74>
 8005e1e:	4639      	mov	r1, r7
 8005e20:	4622      	mov	r2, r4
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff36 	bl	8005c94 <__multiply>
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4681      	mov	r9, r0
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff fe88 	bl	8005b42 <_Bfree>
 8005e32:	464f      	mov	r7, r9
 8005e34:	106d      	asrs	r5, r5, #1
 8005e36:	d00b      	beq.n	8005e50 <__pow5mult+0x90>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	b938      	cbnz	r0, 8005e4c <__pow5mult+0x8c>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f7ff ff27 	bl	8005c94 <__multiply>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	f8c0 8000 	str.w	r8, [r0]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	e7e4      	b.n	8005e1a <__pow5mult+0x5a>
 8005e50:	4638      	mov	r0, r7
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	bf00      	nop
 8005e58:	08006748 	.word	0x08006748

08005e5c <__lshift>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6849      	ldr	r1, [r1, #4]
 8005e6a:	eb0a 0903 	add.w	r9, sl, r3
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	4607      	mov	r7, r0
 8005e72:	4616      	mov	r6, r2
 8005e74:	f109 0501 	add.w	r5, r9, #1
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	db32      	blt.n	8005ee2 <__lshift+0x86>
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff fe2c 	bl	8005ada <_Balloc>
 8005e82:	2300      	movs	r3, #0
 8005e84:	4680      	mov	r8, r0
 8005e86:	f100 0114 	add.w	r1, r0, #20
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4553      	cmp	r3, sl
 8005e8e:	db2b      	blt.n	8005ee8 <__lshift+0x8c>
 8005e90:	6920      	ldr	r0, [r4, #16]
 8005e92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e96:	f104 0314 	add.w	r3, r4, #20
 8005e9a:	f016 021f 	ands.w	r2, r6, #31
 8005e9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ea2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ea6:	d025      	beq.n	8005ef4 <__lshift+0x98>
 8005ea8:	f1c2 0e20 	rsb	lr, r2, #32
 8005eac:	2000      	movs	r0, #0
 8005eae:	681e      	ldr	r6, [r3, #0]
 8005eb0:	468a      	mov	sl, r1
 8005eb2:	4096      	lsls	r6, r2
 8005eb4:	4330      	orrs	r0, r6
 8005eb6:	f84a 0b04 	str.w	r0, [sl], #4
 8005eba:	f853 0b04 	ldr.w	r0, [r3], #4
 8005ebe:	459c      	cmp	ip, r3
 8005ec0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ec4:	d814      	bhi.n	8005ef0 <__lshift+0x94>
 8005ec6:	6048      	str	r0, [r1, #4]
 8005ec8:	b108      	cbz	r0, 8005ece <__lshift+0x72>
 8005eca:	f109 0502 	add.w	r5, r9, #2
 8005ece:	3d01      	subs	r5, #1
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	f7ff fe33 	bl	8005b42 <_Bfree>
 8005edc:	4640      	mov	r0, r8
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee2:	3101      	adds	r1, #1
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	e7c7      	b.n	8005e78 <__lshift+0x1c>
 8005ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005eec:	3301      	adds	r3, #1
 8005eee:	e7cd      	b.n	8005e8c <__lshift+0x30>
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	e7dc      	b.n	8005eae <__lshift+0x52>
 8005ef4:	3904      	subs	r1, #4
 8005ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efa:	f841 2f04 	str.w	r2, [r1, #4]!
 8005efe:	459c      	cmp	ip, r3
 8005f00:	d8f9      	bhi.n	8005ef6 <__lshift+0x9a>
 8005f02:	e7e4      	b.n	8005ece <__lshift+0x72>

08005f04 <__mcmp>:
 8005f04:	6903      	ldr	r3, [r0, #16]
 8005f06:	690a      	ldr	r2, [r1, #16]
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	b530      	push	{r4, r5, lr}
 8005f0c:	d10c      	bne.n	8005f28 <__mcmp+0x24>
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	3014      	adds	r0, #20
 8005f12:	3114      	adds	r1, #20
 8005f14:	1884      	adds	r4, r0, r2
 8005f16:	4411      	add	r1, r2
 8005f18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f20:	4295      	cmp	r5, r2
 8005f22:	d003      	beq.n	8005f2c <__mcmp+0x28>
 8005f24:	d305      	bcc.n	8005f32 <__mcmp+0x2e>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd30      	pop	{r4, r5, pc}
 8005f2c:	42a0      	cmp	r0, r4
 8005f2e:	d3f3      	bcc.n	8005f18 <__mcmp+0x14>
 8005f30:	e7fa      	b.n	8005f28 <__mcmp+0x24>
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e7f7      	b.n	8005f28 <__mcmp+0x24>

08005f38 <__mdiff>:
 8005f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	4607      	mov	r7, r0
 8005f40:	4611      	mov	r1, r2
 8005f42:	4628      	mov	r0, r5
 8005f44:	4614      	mov	r4, r2
 8005f46:	f7ff ffdd 	bl	8005f04 <__mcmp>
 8005f4a:	1e06      	subs	r6, r0, #0
 8005f4c:	d108      	bne.n	8005f60 <__mdiff+0x28>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff fdc2 	bl	8005ada <_Balloc>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f60:	bfa4      	itt	ge
 8005f62:	4623      	movge	r3, r4
 8005f64:	462c      	movge	r4, r5
 8005f66:	4638      	mov	r0, r7
 8005f68:	6861      	ldr	r1, [r4, #4]
 8005f6a:	bfa6      	itte	ge
 8005f6c:	461d      	movge	r5, r3
 8005f6e:	2600      	movge	r6, #0
 8005f70:	2601      	movlt	r6, #1
 8005f72:	f7ff fdb2 	bl	8005ada <_Balloc>
 8005f76:	692b      	ldr	r3, [r5, #16]
 8005f78:	60c6      	str	r6, [r0, #12]
 8005f7a:	6926      	ldr	r6, [r4, #16]
 8005f7c:	f105 0914 	add.w	r9, r5, #20
 8005f80:	f104 0214 	add.w	r2, r4, #20
 8005f84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f8c:	f100 0514 	add.w	r5, r0, #20
 8005f90:	f04f 0e00 	mov.w	lr, #0
 8005f94:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f98:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f9c:	fa1e f18a 	uxtah	r1, lr, sl
 8005fa0:	b2a3      	uxth	r3, r4
 8005fa2:	1ac9      	subs	r1, r1, r3
 8005fa4:	0c23      	lsrs	r3, r4, #16
 8005fa6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005faa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fae:	b289      	uxth	r1, r1
 8005fb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005fb4:	45c8      	cmp	r8, r9
 8005fb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fba:	4694      	mov	ip, r2
 8005fbc:	f845 3b04 	str.w	r3, [r5], #4
 8005fc0:	d8e8      	bhi.n	8005f94 <__mdiff+0x5c>
 8005fc2:	45bc      	cmp	ip, r7
 8005fc4:	d304      	bcc.n	8005fd0 <__mdiff+0x98>
 8005fc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005fca:	b183      	cbz	r3, 8005fee <__mdiff+0xb6>
 8005fcc:	6106      	str	r6, [r0, #16]
 8005fce:	e7c5      	b.n	8005f5c <__mdiff+0x24>
 8005fd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fd4:	fa1e f381 	uxtah	r3, lr, r1
 8005fd8:	141a      	asrs	r2, r3, #16
 8005fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005fe8:	f845 3b04 	str.w	r3, [r5], #4
 8005fec:	e7e9      	b.n	8005fc2 <__mdiff+0x8a>
 8005fee:	3e01      	subs	r6, #1
 8005ff0:	e7e9      	b.n	8005fc6 <__mdiff+0x8e>

08005ff2 <__d2b>:
 8005ff2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ff6:	460e      	mov	r6, r1
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	ec59 8b10 	vmov	r8, r9, d0
 8005ffe:	4615      	mov	r5, r2
 8006000:	f7ff fd6b 	bl	8005ada <_Balloc>
 8006004:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006008:	4607      	mov	r7, r0
 800600a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800600e:	bb34      	cbnz	r4, 800605e <__d2b+0x6c>
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	f1b8 0300 	subs.w	r3, r8, #0
 8006016:	d027      	beq.n	8006068 <__d2b+0x76>
 8006018:	a802      	add	r0, sp, #8
 800601a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800601e:	f7ff fe01 	bl	8005c24 <__lo0bits>
 8006022:	9900      	ldr	r1, [sp, #0]
 8006024:	b1f0      	cbz	r0, 8006064 <__d2b+0x72>
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	f1c0 0320 	rsb	r3, r0, #32
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	430b      	orrs	r3, r1
 8006032:	40c2      	lsrs	r2, r0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	9b01      	ldr	r3, [sp, #4]
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2102      	movne	r1, #2
 8006042:	2101      	moveq	r1, #1
 8006044:	6139      	str	r1, [r7, #16]
 8006046:	b1c4      	cbz	r4, 800607a <__d2b+0x88>
 8006048:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800604c:	4404      	add	r4, r0
 800604e:	6034      	str	r4, [r6, #0]
 8006050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006054:	6028      	str	r0, [r5, #0]
 8006056:	4638      	mov	r0, r7
 8006058:	b003      	add	sp, #12
 800605a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006062:	e7d5      	b.n	8006010 <__d2b+0x1e>
 8006064:	6179      	str	r1, [r7, #20]
 8006066:	e7e7      	b.n	8006038 <__d2b+0x46>
 8006068:	a801      	add	r0, sp, #4
 800606a:	f7ff fddb 	bl	8005c24 <__lo0bits>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	2101      	movs	r1, #1
 8006074:	6139      	str	r1, [r7, #16]
 8006076:	3020      	adds	r0, #32
 8006078:	e7e5      	b.n	8006046 <__d2b+0x54>
 800607a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800607e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006082:	6030      	str	r0, [r6, #0]
 8006084:	6918      	ldr	r0, [r3, #16]
 8006086:	f7ff fdae 	bl	8005be6 <__hi0bits>
 800608a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800608e:	e7e1      	b.n	8006054 <__d2b+0x62>

08006090 <_calloc_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	fb02 f401 	mul.w	r4, r2, r1
 8006096:	4621      	mov	r1, r4
 8006098:	f000 f856 	bl	8006148 <_malloc_r>
 800609c:	4605      	mov	r5, r0
 800609e:	b118      	cbz	r0, 80060a8 <_calloc_r+0x18>
 80060a0:	4622      	mov	r2, r4
 80060a2:	2100      	movs	r1, #0
 80060a4:	f7fe fa30 	bl	8004508 <memset>
 80060a8:	4628      	mov	r0, r5
 80060aa:	bd38      	pop	{r3, r4, r5, pc}

080060ac <_free_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4605      	mov	r5, r0
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d045      	beq.n	8006140 <_free_r+0x94>
 80060b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b8:	1f0c      	subs	r4, r1, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bfb8      	it	lt
 80060be:	18e4      	addlt	r4, r4, r3
 80060c0:	f000 fa29 	bl	8006516 <__malloc_lock>
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <_free_r+0x98>)
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	4610      	mov	r0, r2
 80060ca:	b933      	cbnz	r3, 80060da <_free_r+0x2e>
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	6014      	str	r4, [r2, #0]
 80060d0:	4628      	mov	r0, r5
 80060d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060d6:	f000 ba1f 	b.w	8006518 <__malloc_unlock>
 80060da:	42a3      	cmp	r3, r4
 80060dc:	d90c      	bls.n	80060f8 <_free_r+0x4c>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	1862      	adds	r2, r4, r1
 80060e2:	4293      	cmp	r3, r2
 80060e4:	bf04      	itt	eq
 80060e6:	681a      	ldreq	r2, [r3, #0]
 80060e8:	685b      	ldreq	r3, [r3, #4]
 80060ea:	6063      	str	r3, [r4, #4]
 80060ec:	bf04      	itt	eq
 80060ee:	1852      	addeq	r2, r2, r1
 80060f0:	6022      	streq	r2, [r4, #0]
 80060f2:	6004      	str	r4, [r0, #0]
 80060f4:	e7ec      	b.n	80060d0 <_free_r+0x24>
 80060f6:	4613      	mov	r3, r2
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	b10a      	cbz	r2, 8006100 <_free_r+0x54>
 80060fc:	42a2      	cmp	r2, r4
 80060fe:	d9fa      	bls.n	80060f6 <_free_r+0x4a>
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	1858      	adds	r0, r3, r1
 8006104:	42a0      	cmp	r0, r4
 8006106:	d10b      	bne.n	8006120 <_free_r+0x74>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	4401      	add	r1, r0
 800610c:	1858      	adds	r0, r3, r1
 800610e:	4282      	cmp	r2, r0
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	d1dd      	bne.n	80060d0 <_free_r+0x24>
 8006114:	6810      	ldr	r0, [r2, #0]
 8006116:	6852      	ldr	r2, [r2, #4]
 8006118:	605a      	str	r2, [r3, #4]
 800611a:	4401      	add	r1, r0
 800611c:	6019      	str	r1, [r3, #0]
 800611e:	e7d7      	b.n	80060d0 <_free_r+0x24>
 8006120:	d902      	bls.n	8006128 <_free_r+0x7c>
 8006122:	230c      	movs	r3, #12
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	e7d3      	b.n	80060d0 <_free_r+0x24>
 8006128:	6820      	ldr	r0, [r4, #0]
 800612a:	1821      	adds	r1, r4, r0
 800612c:	428a      	cmp	r2, r1
 800612e:	bf04      	itt	eq
 8006130:	6811      	ldreq	r1, [r2, #0]
 8006132:	6852      	ldreq	r2, [r2, #4]
 8006134:	6062      	str	r2, [r4, #4]
 8006136:	bf04      	itt	eq
 8006138:	1809      	addeq	r1, r1, r0
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	605c      	str	r4, [r3, #4]
 800613e:	e7c7      	b.n	80060d0 <_free_r+0x24>
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	20000200 	.word	0x20000200

08006148 <_malloc_r>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	1ccd      	adds	r5, r1, #3
 800614c:	f025 0503 	bic.w	r5, r5, #3
 8006150:	3508      	adds	r5, #8
 8006152:	2d0c      	cmp	r5, #12
 8006154:	bf38      	it	cc
 8006156:	250c      	movcc	r5, #12
 8006158:	2d00      	cmp	r5, #0
 800615a:	4606      	mov	r6, r0
 800615c:	db01      	blt.n	8006162 <_malloc_r+0x1a>
 800615e:	42a9      	cmp	r1, r5
 8006160:	d903      	bls.n	800616a <_malloc_r+0x22>
 8006162:	230c      	movs	r3, #12
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	2000      	movs	r0, #0
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	f000 f9d4 	bl	8006516 <__malloc_lock>
 800616e:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <_malloc_r+0xac>)
 8006170:	6814      	ldr	r4, [r2, #0]
 8006172:	4621      	mov	r1, r4
 8006174:	b991      	cbnz	r1, 800619c <_malloc_r+0x54>
 8006176:	4c20      	ldr	r4, [pc, #128]	; (80061f8 <_malloc_r+0xb0>)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	b91b      	cbnz	r3, 8006184 <_malloc_r+0x3c>
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f98f 	bl	80064a0 <_sbrk_r>
 8006182:	6020      	str	r0, [r4, #0]
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f98a 	bl	80064a0 <_sbrk_r>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d124      	bne.n	80061da <_malloc_r+0x92>
 8006190:	230c      	movs	r3, #12
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f9bf 	bl	8006518 <__malloc_unlock>
 800619a:	e7e4      	b.n	8006166 <_malloc_r+0x1e>
 800619c:	680b      	ldr	r3, [r1, #0]
 800619e:	1b5b      	subs	r3, r3, r5
 80061a0:	d418      	bmi.n	80061d4 <_malloc_r+0x8c>
 80061a2:	2b0b      	cmp	r3, #11
 80061a4:	d90f      	bls.n	80061c6 <_malloc_r+0x7e>
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	50cd      	str	r5, [r1, r3]
 80061aa:	18cc      	adds	r4, r1, r3
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f9b3 	bl	8006518 <__malloc_unlock>
 80061b2:	f104 000b 	add.w	r0, r4, #11
 80061b6:	1d23      	adds	r3, r4, #4
 80061b8:	f020 0007 	bic.w	r0, r0, #7
 80061bc:	1ac3      	subs	r3, r0, r3
 80061be:	d0d3      	beq.n	8006168 <_malloc_r+0x20>
 80061c0:	425a      	negs	r2, r3
 80061c2:	50e2      	str	r2, [r4, r3]
 80061c4:	e7d0      	b.n	8006168 <_malloc_r+0x20>
 80061c6:	428c      	cmp	r4, r1
 80061c8:	684b      	ldr	r3, [r1, #4]
 80061ca:	bf16      	itet	ne
 80061cc:	6063      	strne	r3, [r4, #4]
 80061ce:	6013      	streq	r3, [r2, #0]
 80061d0:	460c      	movne	r4, r1
 80061d2:	e7eb      	b.n	80061ac <_malloc_r+0x64>
 80061d4:	460c      	mov	r4, r1
 80061d6:	6849      	ldr	r1, [r1, #4]
 80061d8:	e7cc      	b.n	8006174 <_malloc_r+0x2c>
 80061da:	1cc4      	adds	r4, r0, #3
 80061dc:	f024 0403 	bic.w	r4, r4, #3
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d005      	beq.n	80061f0 <_malloc_r+0xa8>
 80061e4:	1a21      	subs	r1, r4, r0
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 f95a 	bl	80064a0 <_sbrk_r>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d0cf      	beq.n	8006190 <_malloc_r+0x48>
 80061f0:	6025      	str	r5, [r4, #0]
 80061f2:	e7db      	b.n	80061ac <_malloc_r+0x64>
 80061f4:	20000200 	.word	0x20000200
 80061f8:	20000204 	.word	0x20000204

080061fc <__ssputs_r>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	688e      	ldr	r6, [r1, #8]
 8006202:	429e      	cmp	r6, r3
 8006204:	4682      	mov	sl, r0
 8006206:	460c      	mov	r4, r1
 8006208:	4690      	mov	r8, r2
 800620a:	4699      	mov	r9, r3
 800620c:	d837      	bhi.n	800627e <__ssputs_r+0x82>
 800620e:	898a      	ldrh	r2, [r1, #12]
 8006210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006214:	d031      	beq.n	800627a <__ssputs_r+0x7e>
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	6909      	ldr	r1, [r1, #16]
 800621a:	1a6f      	subs	r7, r5, r1
 800621c:	6965      	ldr	r5, [r4, #20]
 800621e:	2302      	movs	r3, #2
 8006220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006224:	fb95 f5f3 	sdiv	r5, r5, r3
 8006228:	f109 0301 	add.w	r3, r9, #1
 800622c:	443b      	add	r3, r7
 800622e:	429d      	cmp	r5, r3
 8006230:	bf38      	it	cc
 8006232:	461d      	movcc	r5, r3
 8006234:	0553      	lsls	r3, r2, #21
 8006236:	d530      	bpl.n	800629a <__ssputs_r+0x9e>
 8006238:	4629      	mov	r1, r5
 800623a:	f7ff ff85 	bl	8006148 <_malloc_r>
 800623e:	4606      	mov	r6, r0
 8006240:	b950      	cbnz	r0, 8006258 <__ssputs_r+0x5c>
 8006242:	230c      	movs	r3, #12
 8006244:	f8ca 3000 	str.w	r3, [sl]
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	463a      	mov	r2, r7
 800625a:	6921      	ldr	r1, [r4, #16]
 800625c:	f7ff fc32 	bl	8005ac4 <memcpy>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	6126      	str	r6, [r4, #16]
 800626e:	6165      	str	r5, [r4, #20]
 8006270:	443e      	add	r6, r7
 8006272:	1bed      	subs	r5, r5, r7
 8006274:	6026      	str	r6, [r4, #0]
 8006276:	60a5      	str	r5, [r4, #8]
 8006278:	464e      	mov	r6, r9
 800627a:	454e      	cmp	r6, r9
 800627c:	d900      	bls.n	8006280 <__ssputs_r+0x84>
 800627e:	464e      	mov	r6, r9
 8006280:	4632      	mov	r2, r6
 8006282:	4641      	mov	r1, r8
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	f000 f92d 	bl	80064e4 <memmove>
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	1b9b      	subs	r3, r3, r6
 800628e:	60a3      	str	r3, [r4, #8]
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	441e      	add	r6, r3
 8006294:	6026      	str	r6, [r4, #0]
 8006296:	2000      	movs	r0, #0
 8006298:	e7dc      	b.n	8006254 <__ssputs_r+0x58>
 800629a:	462a      	mov	r2, r5
 800629c:	f000 f93d 	bl	800651a <_realloc_r>
 80062a0:	4606      	mov	r6, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1e2      	bne.n	800626c <__ssputs_r+0x70>
 80062a6:	6921      	ldr	r1, [r4, #16]
 80062a8:	4650      	mov	r0, sl
 80062aa:	f7ff feff 	bl	80060ac <_free_r>
 80062ae:	e7c8      	b.n	8006242 <__ssputs_r+0x46>

080062b0 <_svfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	461d      	mov	r5, r3
 80062b6:	898b      	ldrh	r3, [r1, #12]
 80062b8:	061f      	lsls	r7, r3, #24
 80062ba:	b09d      	sub	sp, #116	; 0x74
 80062bc:	4680      	mov	r8, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4616      	mov	r6, r2
 80062c2:	d50f      	bpl.n	80062e4 <_svfiprintf_r+0x34>
 80062c4:	690b      	ldr	r3, [r1, #16]
 80062c6:	b96b      	cbnz	r3, 80062e4 <_svfiprintf_r+0x34>
 80062c8:	2140      	movs	r1, #64	; 0x40
 80062ca:	f7ff ff3d 	bl	8006148 <_malloc_r>
 80062ce:	6020      	str	r0, [r4, #0]
 80062d0:	6120      	str	r0, [r4, #16]
 80062d2:	b928      	cbnz	r0, 80062e0 <_svfiprintf_r+0x30>
 80062d4:	230c      	movs	r3, #12
 80062d6:	f8c8 3000 	str.w	r3, [r8]
 80062da:	f04f 30ff 	mov.w	r0, #4294967295
 80062de:	e0c8      	b.n	8006472 <_svfiprintf_r+0x1c2>
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	6163      	str	r3, [r4, #20]
 80062e4:	2300      	movs	r3, #0
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	2320      	movs	r3, #32
 80062ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ee:	2330      	movs	r3, #48	; 0x30
 80062f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f4:	9503      	str	r5, [sp, #12]
 80062f6:	f04f 0b01 	mov.w	fp, #1
 80062fa:	4637      	mov	r7, r6
 80062fc:	463d      	mov	r5, r7
 80062fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006302:	b10b      	cbz	r3, 8006308 <_svfiprintf_r+0x58>
 8006304:	2b25      	cmp	r3, #37	; 0x25
 8006306:	d13e      	bne.n	8006386 <_svfiprintf_r+0xd6>
 8006308:	ebb7 0a06 	subs.w	sl, r7, r6
 800630c:	d00b      	beq.n	8006326 <_svfiprintf_r+0x76>
 800630e:	4653      	mov	r3, sl
 8006310:	4632      	mov	r2, r6
 8006312:	4621      	mov	r1, r4
 8006314:	4640      	mov	r0, r8
 8006316:	f7ff ff71 	bl	80061fc <__ssputs_r>
 800631a:	3001      	adds	r0, #1
 800631c:	f000 80a4 	beq.w	8006468 <_svfiprintf_r+0x1b8>
 8006320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006322:	4453      	add	r3, sl
 8006324:	9309      	str	r3, [sp, #36]	; 0x24
 8006326:	783b      	ldrb	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 809d 	beq.w	8006468 <_svfiprintf_r+0x1b8>
 800632e:	2300      	movs	r3, #0
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006340:	931a      	str	r3, [sp, #104]	; 0x68
 8006342:	462f      	mov	r7, r5
 8006344:	2205      	movs	r2, #5
 8006346:	f817 1b01 	ldrb.w	r1, [r7], #1
 800634a:	4850      	ldr	r0, [pc, #320]	; (800648c <_svfiprintf_r+0x1dc>)
 800634c:	f7f9 ff50 	bl	80001f0 <memchr>
 8006350:	9b04      	ldr	r3, [sp, #16]
 8006352:	b9d0      	cbnz	r0, 800638a <_svfiprintf_r+0xda>
 8006354:	06d9      	lsls	r1, r3, #27
 8006356:	bf44      	itt	mi
 8006358:	2220      	movmi	r2, #32
 800635a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800635e:	071a      	lsls	r2, r3, #28
 8006360:	bf44      	itt	mi
 8006362:	222b      	movmi	r2, #43	; 0x2b
 8006364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006368:	782a      	ldrb	r2, [r5, #0]
 800636a:	2a2a      	cmp	r2, #42	; 0x2a
 800636c:	d015      	beq.n	800639a <_svfiprintf_r+0xea>
 800636e:	9a07      	ldr	r2, [sp, #28]
 8006370:	462f      	mov	r7, r5
 8006372:	2000      	movs	r0, #0
 8006374:	250a      	movs	r5, #10
 8006376:	4639      	mov	r1, r7
 8006378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800637c:	3b30      	subs	r3, #48	; 0x30
 800637e:	2b09      	cmp	r3, #9
 8006380:	d94d      	bls.n	800641e <_svfiprintf_r+0x16e>
 8006382:	b1b8      	cbz	r0, 80063b4 <_svfiprintf_r+0x104>
 8006384:	e00f      	b.n	80063a6 <_svfiprintf_r+0xf6>
 8006386:	462f      	mov	r7, r5
 8006388:	e7b8      	b.n	80062fc <_svfiprintf_r+0x4c>
 800638a:	4a40      	ldr	r2, [pc, #256]	; (800648c <_svfiprintf_r+0x1dc>)
 800638c:	1a80      	subs	r0, r0, r2
 800638e:	fa0b f000 	lsl.w	r0, fp, r0
 8006392:	4318      	orrs	r0, r3
 8006394:	9004      	str	r0, [sp, #16]
 8006396:	463d      	mov	r5, r7
 8006398:	e7d3      	b.n	8006342 <_svfiprintf_r+0x92>
 800639a:	9a03      	ldr	r2, [sp, #12]
 800639c:	1d11      	adds	r1, r2, #4
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	9103      	str	r1, [sp, #12]
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	db01      	blt.n	80063aa <_svfiprintf_r+0xfa>
 80063a6:	9207      	str	r2, [sp, #28]
 80063a8:	e004      	b.n	80063b4 <_svfiprintf_r+0x104>
 80063aa:	4252      	negs	r2, r2
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	9207      	str	r2, [sp, #28]
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	783b      	ldrb	r3, [r7, #0]
 80063b6:	2b2e      	cmp	r3, #46	; 0x2e
 80063b8:	d10c      	bne.n	80063d4 <_svfiprintf_r+0x124>
 80063ba:	787b      	ldrb	r3, [r7, #1]
 80063bc:	2b2a      	cmp	r3, #42	; 0x2a
 80063be:	d133      	bne.n	8006428 <_svfiprintf_r+0x178>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	1d1a      	adds	r2, r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	9203      	str	r2, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bfb8      	it	lt
 80063cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d0:	3702      	adds	r7, #2
 80063d2:	9305      	str	r3, [sp, #20]
 80063d4:	4d2e      	ldr	r5, [pc, #184]	; (8006490 <_svfiprintf_r+0x1e0>)
 80063d6:	7839      	ldrb	r1, [r7, #0]
 80063d8:	2203      	movs	r2, #3
 80063da:	4628      	mov	r0, r5
 80063dc:	f7f9 ff08 	bl	80001f0 <memchr>
 80063e0:	b138      	cbz	r0, 80063f2 <_svfiprintf_r+0x142>
 80063e2:	2340      	movs	r3, #64	; 0x40
 80063e4:	1b40      	subs	r0, r0, r5
 80063e6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	4303      	orrs	r3, r0
 80063ee:	3701      	adds	r7, #1
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	7839      	ldrb	r1, [r7, #0]
 80063f4:	4827      	ldr	r0, [pc, #156]	; (8006494 <_svfiprintf_r+0x1e4>)
 80063f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063fa:	2206      	movs	r2, #6
 80063fc:	1c7e      	adds	r6, r7, #1
 80063fe:	f7f9 fef7 	bl	80001f0 <memchr>
 8006402:	2800      	cmp	r0, #0
 8006404:	d038      	beq.n	8006478 <_svfiprintf_r+0x1c8>
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <_svfiprintf_r+0x1e8>)
 8006408:	bb13      	cbnz	r3, 8006450 <_svfiprintf_r+0x1a0>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	3307      	adds	r3, #7
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	3308      	adds	r3, #8
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	444b      	add	r3, r9
 800641a:	9309      	str	r3, [sp, #36]	; 0x24
 800641c:	e76d      	b.n	80062fa <_svfiprintf_r+0x4a>
 800641e:	fb05 3202 	mla	r2, r5, r2, r3
 8006422:	2001      	movs	r0, #1
 8006424:	460f      	mov	r7, r1
 8006426:	e7a6      	b.n	8006376 <_svfiprintf_r+0xc6>
 8006428:	2300      	movs	r3, #0
 800642a:	3701      	adds	r7, #1
 800642c:	9305      	str	r3, [sp, #20]
 800642e:	4619      	mov	r1, r3
 8006430:	250a      	movs	r5, #10
 8006432:	4638      	mov	r0, r7
 8006434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006438:	3a30      	subs	r2, #48	; 0x30
 800643a:	2a09      	cmp	r2, #9
 800643c:	d903      	bls.n	8006446 <_svfiprintf_r+0x196>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0c8      	beq.n	80063d4 <_svfiprintf_r+0x124>
 8006442:	9105      	str	r1, [sp, #20]
 8006444:	e7c6      	b.n	80063d4 <_svfiprintf_r+0x124>
 8006446:	fb05 2101 	mla	r1, r5, r1, r2
 800644a:	2301      	movs	r3, #1
 800644c:	4607      	mov	r7, r0
 800644e:	e7f0      	b.n	8006432 <_svfiprintf_r+0x182>
 8006450:	ab03      	add	r3, sp, #12
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4622      	mov	r2, r4
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <_svfiprintf_r+0x1ec>)
 8006458:	a904      	add	r1, sp, #16
 800645a:	4640      	mov	r0, r8
 800645c:	f7fe f8f0 	bl	8004640 <_printf_float>
 8006460:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006464:	4681      	mov	r9, r0
 8006466:	d1d6      	bne.n	8006416 <_svfiprintf_r+0x166>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	065b      	lsls	r3, r3, #25
 800646c:	f53f af35 	bmi.w	80062da <_svfiprintf_r+0x2a>
 8006470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006472:	b01d      	add	sp, #116	; 0x74
 8006474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4622      	mov	r2, r4
 800647e:	4b07      	ldr	r3, [pc, #28]	; (800649c <_svfiprintf_r+0x1ec>)
 8006480:	a904      	add	r1, sp, #16
 8006482:	4640      	mov	r0, r8
 8006484:	f7fe fb92 	bl	8004bac <_printf_i>
 8006488:	e7ea      	b.n	8006460 <_svfiprintf_r+0x1b0>
 800648a:	bf00      	nop
 800648c:	08006754 	.word	0x08006754
 8006490:	0800675a 	.word	0x0800675a
 8006494:	0800675e 	.word	0x0800675e
 8006498:	08004641 	.word	0x08004641
 800649c:	080061fd 	.word	0x080061fd

080064a0 <_sbrk_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4c06      	ldr	r4, [pc, #24]	; (80064bc <_sbrk_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4605      	mov	r5, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	f7fa ffcc 	bl	8001448 <_sbrk>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_sbrk_r+0x1a>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_sbrk_r+0x1a>
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200002f8 	.word	0x200002f8

080064c0 <__ascii_mbtowc>:
 80064c0:	b082      	sub	sp, #8
 80064c2:	b901      	cbnz	r1, 80064c6 <__ascii_mbtowc+0x6>
 80064c4:	a901      	add	r1, sp, #4
 80064c6:	b142      	cbz	r2, 80064da <__ascii_mbtowc+0x1a>
 80064c8:	b14b      	cbz	r3, 80064de <__ascii_mbtowc+0x1e>
 80064ca:	7813      	ldrb	r3, [r2, #0]
 80064cc:	600b      	str	r3, [r1, #0]
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	1c10      	adds	r0, r2, #0
 80064d2:	bf18      	it	ne
 80064d4:	2001      	movne	r0, #1
 80064d6:	b002      	add	sp, #8
 80064d8:	4770      	bx	lr
 80064da:	4610      	mov	r0, r2
 80064dc:	e7fb      	b.n	80064d6 <__ascii_mbtowc+0x16>
 80064de:	f06f 0001 	mvn.w	r0, #1
 80064e2:	e7f8      	b.n	80064d6 <__ascii_mbtowc+0x16>

080064e4 <memmove>:
 80064e4:	4288      	cmp	r0, r1
 80064e6:	b510      	push	{r4, lr}
 80064e8:	eb01 0302 	add.w	r3, r1, r2
 80064ec:	d807      	bhi.n	80064fe <memmove+0x1a>
 80064ee:	1e42      	subs	r2, r0, #1
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d00a      	beq.n	800650a <memmove+0x26>
 80064f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80064fc:	e7f8      	b.n	80064f0 <memmove+0xc>
 80064fe:	4283      	cmp	r3, r0
 8006500:	d9f5      	bls.n	80064ee <memmove+0xa>
 8006502:	1881      	adds	r1, r0, r2
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	42d3      	cmn	r3, r2
 8006508:	d100      	bne.n	800650c <memmove+0x28>
 800650a:	bd10      	pop	{r4, pc}
 800650c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006510:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006514:	e7f7      	b.n	8006506 <memmove+0x22>

08006516 <__malloc_lock>:
 8006516:	4770      	bx	lr

08006518 <__malloc_unlock>:
 8006518:	4770      	bx	lr

0800651a <_realloc_r>:
 800651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651c:	4607      	mov	r7, r0
 800651e:	4614      	mov	r4, r2
 8006520:	460e      	mov	r6, r1
 8006522:	b921      	cbnz	r1, 800652e <_realloc_r+0x14>
 8006524:	4611      	mov	r1, r2
 8006526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800652a:	f7ff be0d 	b.w	8006148 <_malloc_r>
 800652e:	b922      	cbnz	r2, 800653a <_realloc_r+0x20>
 8006530:	f7ff fdbc 	bl	80060ac <_free_r>
 8006534:	4625      	mov	r5, r4
 8006536:	4628      	mov	r0, r5
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	f000 f821 	bl	8006580 <_malloc_usable_size_r>
 800653e:	42a0      	cmp	r0, r4
 8006540:	d20f      	bcs.n	8006562 <_realloc_r+0x48>
 8006542:	4621      	mov	r1, r4
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff fdff 	bl	8006148 <_malloc_r>
 800654a:	4605      	mov	r5, r0
 800654c:	2800      	cmp	r0, #0
 800654e:	d0f2      	beq.n	8006536 <_realloc_r+0x1c>
 8006550:	4631      	mov	r1, r6
 8006552:	4622      	mov	r2, r4
 8006554:	f7ff fab6 	bl	8005ac4 <memcpy>
 8006558:	4631      	mov	r1, r6
 800655a:	4638      	mov	r0, r7
 800655c:	f7ff fda6 	bl	80060ac <_free_r>
 8006560:	e7e9      	b.n	8006536 <_realloc_r+0x1c>
 8006562:	4635      	mov	r5, r6
 8006564:	e7e7      	b.n	8006536 <_realloc_r+0x1c>

08006566 <__ascii_wctomb>:
 8006566:	b149      	cbz	r1, 800657c <__ascii_wctomb+0x16>
 8006568:	2aff      	cmp	r2, #255	; 0xff
 800656a:	bf85      	ittet	hi
 800656c:	238a      	movhi	r3, #138	; 0x8a
 800656e:	6003      	strhi	r3, [r0, #0]
 8006570:	700a      	strbls	r2, [r1, #0]
 8006572:	f04f 30ff 	movhi.w	r0, #4294967295
 8006576:	bf98      	it	ls
 8006578:	2001      	movls	r0, #1
 800657a:	4770      	bx	lr
 800657c:	4608      	mov	r0, r1
 800657e:	4770      	bx	lr

08006580 <_malloc_usable_size_r>:
 8006580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006584:	1f18      	subs	r0, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbc      	itt	lt
 800658a:	580b      	ldrlt	r3, [r1, r0]
 800658c:	18c0      	addlt	r0, r0, r3
 800658e:	4770      	bx	lr

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
