
spectral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006750  08006750  00016750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a08  08006a08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006a08  08006a08  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a08  08006a08  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  08006bec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006bec  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c73b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b68  00000000  00000000  0002c947  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002ee98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d435  00000000  00000000  0002f798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000935d  00000000  00000000  0004cbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8246  00000000  00000000  00055f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  000fe1ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006738 	.word	0x08006738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006738 	.word	0x08006738

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <check_error>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int check_error() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	if (ret != HAL_OK) {
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <check_error+0x44>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d017      	beq.n	8000bf4 <check_error+0x3c>
		strcpy((char*)buf, "Err \r\n");
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <check_error+0x48>)
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <check_error+0x4c>)
 8000bc8:	6810      	ldr	r0, [r2, #0]
 8000bca:	6018      	str	r0, [r3, #0]
 8000bcc:	8891      	ldrh	r1, [r2, #4]
 8000bce:	7992      	ldrb	r2, [r2, #6]
 8000bd0:	8099      	strh	r1, [r3, #4]
 8000bd2:	719a      	strb	r2, [r3, #6]

    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <check_error+0x48>)
 8000bd6:	f7ff fb03 	bl	80001e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	4907      	ldr	r1, [pc, #28]	; (8000c00 <check_error+0x48>)
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <check_error+0x50>)
 8000be6:	f003 f929 	bl	8003e3c <HAL_UART_Transmit>
    HAL_Delay(10);
 8000bea:	200a      	movs	r0, #10
 8000bec:	f000 fdd2 	bl	8001794 <HAL_Delay>
		return 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <check_error+0x3e>
	}
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001f8 	.word	0x200001f8
 8000c00:	20000258 	.word	0x20000258
 8000c04:	08006750 	.word	0x08006750
 8000c08:	20000278 	.word	0x20000278

08000c0c <nucleo_byte_read>:

uint8_t nucleo_byte_read(uint8_t device_reg) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	//transmits the address to read from
	buf[0] = device_reg;
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	7013      	strb	r3, [r2, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS << 1, buf, 1, HAL_MAX_DELAY);
 8000c1c:	2349      	movs	r3, #73	; 0x49
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <nucleo_byte_read+0x70>)
 8000c30:	f001 f8ea 	bl	8001e08 <HAL_I2C_Master_Transmit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <nucleo_byte_read+0x74>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c3c:	f7ff ffbc 	bl	8000bb8 <check_error>

	//reads from address sent above
	ret = HAL_I2C_Master_Receive(&hi2c1, (DEVICE_SLAVE_ADDRESS << 1) | 1, buf, 1, HAL_MAX_DELAY);
 8000c40:	2349      	movs	r3, #73	; 0x49
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2301      	movs	r3, #1
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <nucleo_byte_read+0x70>)
 8000c5a:	f001 f9c9 	bl	8001ff0 <HAL_I2C_Master_Receive>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <nucleo_byte_read+0x74>)
 8000c64:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c66:	f7ff ffa7 	bl	8000bb8 <check_error>
	return buf[0];
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000258 	.word	0x20000258
 8000c7c:	20000208 	.word	0x20000208
 8000c80:	200001f8 	.word	0x200001f8

08000c84 <virtual_read>:
	//SMBUS docs first byte is addr to write to, second is data
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
	check_error();
}

uint8_t virtual_read(uint8_t v_reg) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <virtual_read+0xc8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2249      	movs	r2, #73	; 0x49
 8000c94:	b2d1      	uxtb	r1, r2
 8000c96:	2200      	movs	r2, #0
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fb33 	bl	8001306 <read_byte_data>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00a      	beq.n	8000cc4 <virtual_read+0x40>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <virtual_read+0xc8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2249      	movs	r2, #73	; 0x49
 8000cb4:	b2d1      	uxtb	r1, r2
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fb23 	bl	8001306 <read_byte_data>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73bb      	strb	r3, [r7, #14]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <virtual_read+0xc8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2249      	movs	r2, #73	; 0x49
 8000cca:	b2d1      	uxtb	r1, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fb18 	bl	8001306 <read_byte_data>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2202      	movs	r2, #2
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <virtual_read+0x68>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000ce4:	2005      	movs	r0, #5
 8000ce6:	f000 fd55 	bl	8001794 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000cea:	e7eb      	b.n	8000cc4 <virtual_read+0x40>
			break;
 8000cec:	bf00      	nop
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <virtual_read+0xc8>)
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	2349      	movs	r3, #73	; 0x49
 8000cf4:	b2d9      	uxtb	r1, r3
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f000 fb43 	bl	8001386 <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <virtual_read+0xc8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2249      	movs	r2, #73	; 0x49
 8000d06:	b2d1      	uxtb	r1, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fafa 	bl	8001306 <read_byte_data>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000d20:	2005      	movs	r0, #5
 8000d22:	f000 fd37 	bl	8001794 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000d26:	e7eb      	b.n	8000d00 <virtual_read+0x7c>
			break;
 8000d28:	bf00      	nop
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <virtual_read+0xc8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2249      	movs	r2, #73	; 0x49
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	2202      	movs	r2, #2
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fae5 	bl	8001306 <read_byte_data>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73bb      	strb	r3, [r7, #14]

	return d;
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000254 	.word	0x20000254

08000d50 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <virtual_write+0x90>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2249      	movs	r2, #73	; 0x49
 8000d66:	b2d1      	uxtb	r1, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 faca 	bl	8001306 <read_byte_data>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2202      	movs	r2, #2
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <virtual_write+0x38>
			break;
		}
		HAL_Delay(5);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f000 fd07 	bl	8001794 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000d86:	e7eb      	b.n	8000d60 <virtual_write+0x10>
			break;
 8000d88:	bf00      	nop
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <virtual_write+0x90>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	2349      	movs	r3, #73	; 0x49
 8000d90:	b2d9      	uxtb	r1, r3
 8000d92:	2301      	movs	r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f000 faf2 	bl	8001386 <write_byte_data>

	while(1) {
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000da2:	2300      	movs	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff30 	bl	8000c0c <nucleo_byte_read>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2202      	movs	r2, #2
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <virtual_write+0x72>
			break;
		}
		HAL_Delay(5);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f000 fcea 	bl	8001794 <HAL_Delay>
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000dc0:	e7ef      	b.n	8000da2 <virtual_write+0x52>
			break;
 8000dc2:	bf00      	nop
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <virtual_write+0x90>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	2349      	movs	r3, #73	; 0x49
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	2301      	movs	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	f000 fad8 	bl	8001386 <write_byte_data>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000254 	.word	0x20000254

08000de4 <get_decimal>:

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff44 	bl	8000c84 <virtual_read>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	81fb      	strh	r3, [r7, #14]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff3c 	bl	8000c84 <virtual_read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b29b      	uxth	r3, r3
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	460a      	mov	r2, r1
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71bb      	strb	r3, [r7, #6]
	Channel* ch = malloc(sizeof(Channel));
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f003 fc3e 	bl	80046b0 <malloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	705a      	strb	r2, [r3, #1]
	return ch;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <new_device>:

//not the most readable code..
//dev channels start at 0x08 and increase by 8 up until 0x13

Device* new_device(uint8_t dev_register) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	Device* dev = malloc(sizeof(Device));
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f003 fc26 	bl	80046b0 <malloc>
 8000e64:	4603      	mov	r3, r0
 8000e66:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
 8000e76:	e019      	b.n	8000eac <new_device+0x58>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	4413      	add	r3, r2
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	7dfc      	ldrb	r4, [r7, #23]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff ffc1 	bl	8000e1e <new_channel>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	00a3      	lsls	r3, r4, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	6059      	str	r1, [r3, #4]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d9e2      	bls.n	8000e78 <new_device+0x24>
	}
	return dev;
 8000eb2:	693b      	ldr	r3, [r7, #16]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fc01 	bl	80016c8 <HAL_Init>

  /* USER CODE BEGIN Init */

  	i2cBus = new_bus(&hi2c1, &huart2);
 8000ec6:	4955      	ldr	r1, [pc, #340]	; (800101c <main+0x160>)
 8000ec8:	4855      	ldr	r0, [pc, #340]	; (8001020 <main+0x164>)
 8000eca:	f000 fa00 	bl	80012ce <new_bus>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b54      	ldr	r3, [pc, #336]	; (8001024 <main+0x168>)
 8000ed2:	601a      	str	r2, [r3, #0]

	uint8_t buf[30];

	Device *triad_dev_1 = new_device(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ffbd 	bl	8000e54 <new_device>
 8000eda:	63b8      	str	r0, [r7, #56]	; 0x38

	Device *triad_dev_2 = new_device(0x01);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff ffb9 	bl	8000e54 <new_device>
 8000ee2:	6378      	str	r0, [r7, #52]	; 0x34

	Device *triad_dev_3 = new_device(0x02);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff ffb5 	bl	8000e54 <new_device>
 8000eea:	6338      	str	r0, [r7, #48]	; 0x30

	Device *triad[3] = { triad_dev_1, triad_dev_2, triad_dev_3 };
 8000eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef6:	60bb      	str	r3, [r7, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f898 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 f966 	bl	80011cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f00:	f000 f934 	bl	800116c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f04:	f000 f8f2 	bl	80010ec <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //enable the spectral sensor

  virtual_write(0x04, 0x28);
 8000f08:	2128      	movs	r1, #40	; 0x28
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f7ff ff20 	bl	8000d50 <virtual_write>
  virtual_write(0x04, 0x28);
 8000f10:	2128      	movs	r1, #40	; 0x28
 8000f12:	2004      	movs	r0, #4
 8000f14:	f7ff ff1c 	bl	8000d50 <virtual_write>
  virtual_write(0x05, 0xFF);
 8000f18:	21ff      	movs	r1, #255	; 0xff
 8000f1a:	2005      	movs	r0, #5
 8000f1c:	f7ff ff18 	bl	8000d50 <virtual_write>
  {
	  // strcpy((char*)buf, "Hello!\r\n");
	  // HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  // HAL_Delay(500);

	  Channel *channel = new_channel(0, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff7b 	bl	8000e1e <new_channel>
 8000f28:	62f8      	str	r0, [r7, #44]	; 0x2c

	  for (uint8_t i = 0; i < 3; ++i) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f30:	e06a      	b.n	8001008 <main+0x14c>
		  virtual_write(DEV_SEL, triad[i]->dev_register);
 8000f32:	234f      	movs	r3, #79	; 0x4f
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f40:	440b      	add	r3, r1
 8000f42:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f7ff ff00 	bl	8000d50 <virtual_write>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000f56:	e04e      	b.n	8000ff6 <main+0x13a>
			  channel = triad[i]->channels[j];
 8000f58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f62:	4413      	add	r3, r2
 8000f64:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000f68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
			  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4610      	mov	r0, r2
 8000f80:	f7ff ff30 	bl	8000de4 <get_decimal>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8a:	805a      	strh	r2, [r3, #2]

			  //complicated way to print "channel {x} : {data}"
			  sprintf((char*)buf , "channel %u : %f \r\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8000f8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f9e:	4413      	add	r3, r2
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fae:	ee17 0a90 	vmov	r0, s15
 8000fb2:	f7ff fad1 	bl	8000558 <__aeabi_f2d>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	f107 000c 	add.w	r0, r7, #12
 8000fbe:	e9cd 3400 	strd	r3, r4, [sp]
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	4918      	ldr	r1, [pc, #96]	; (8001028 <main+0x16c>)
 8000fc6:	f004 f897 	bl	80050f8 <siprintf>

			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f906 	bl	80001e0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <main+0x160>)
 8000fe2:	f002 ff2b 	bl	8003e3c <HAL_UART_Transmit>
			  HAL_Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 fbd4 	bl	8001794 <HAL_Delay>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000fec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000ff6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d9ac      	bls.n	8000f58 <main+0x9c>
	  for (uint8_t i = 0; i < 3; ++i) {
 8000ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001002:	3301      	adds	r3, #1
 8001004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800100c:	2b02      	cmp	r3, #2
 800100e:	d990      	bls.n	8000f32 <main+0x76>
		  }
	  }
	  HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fbbe 	bl	8001794 <HAL_Delay>
  {
 8001018:	e782      	b.n	8000f20 <main+0x64>
 800101a:	bf00      	nop
 800101c:	20000278 	.word	0x20000278
 8001020:	20000208 	.word	0x20000208
 8001024:	20000254 	.word	0x20000254
 8001028:	08006758 	.word	0x08006758

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0a6      	sub	sp, #152	; 0x98
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fb40 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2258      	movs	r2, #88	; 0x58
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fb32 	bl	80046c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001078:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800107c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fb1e 	bl	80026cc <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001096:	f000 f913 	bl	80012c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2302      	movs	r3, #2
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010b4:	2102      	movs	r1, #2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fa1e 	bl	80034f8 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c2:	f000 f8fd 	bl	80012c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010c6:	2322      	movs	r3, #34	; 0x22
 80010c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fc45 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010e0:	f000 f8ee 	bl	80012c0 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3798      	adds	r7, #152	; 0x98
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_I2C1_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_I2C1_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_I2C1_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_I2C1_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_I2C1_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_I2C1_Init+0x74>)
 8001128:	f000 fdde 	bl	8001ce8 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 f8c5 	bl	80012c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_I2C1_Init+0x74>)
 800113a:	f001 fa2f 	bl	800259c <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 f8bc 	bl	80012c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_I2C1_Init+0x74>)
 800114c:	f001 fa71 	bl	8002632 <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 f8b3 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000208 	.word	0x20000208
 8001164:	40005400 	.word	0x40005400
 8001168:	2000090e 	.word	0x2000090e

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <MX_USART2_UART_Init+0x5c>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001178:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011b0:	f002 fdf6 	bl	8003da0 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ba:	f000 f881 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000278 	.word	0x20000278
 80011c8:	40004400 	.word	0x40004400

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_GPIO_Init+0xe8>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <MX_GPIO_Init+0xe8>)
 80011e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MX_GPIO_Init+0xe8>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <MX_GPIO_Init+0xe8>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_GPIO_Init+0xe8>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_GPIO_Init+0xe8>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fd35 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0xec>)
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4816      	ldr	r0, [pc, #88]	; (80012bc <MX_GPIO_Init+0xf0>)
 8001264:	f000 fb9e 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001268:	2320      	movs	r3, #32
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f000 fb8f 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001298:	2307      	movs	r3, #7
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f000 fb7d 	bl	80019a4 <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	48000800 	.word	0x48000800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <new_bus>:
#include "smbus.h"


Bus *new_bus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
    Bus *bus = malloc(sizeof(Bus));
 80012d8:	2028      	movs	r0, #40	; 0x28
 80012da:	f003 f9e9 	bl	80046b0 <malloc>
 80012de:	4603      	mov	r3, r0
 80012e0:	60fb      	str	r3, [r7, #12]
    bus->i2c = hi2c;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
    bus->uart = huart;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	605a      	str	r2, [r3, #4]
    memset(bus->buf, 0, sizeof bus->buf);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3309      	adds	r3, #9
 80012f2:	221e      	movs	r2, #30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 f9e2 	bl	80046c0 <memset>
    return bus;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <read_byte_data>:
    bus->buf[0] = data;
    bus->ret = HAL_I2C_Master_Transmit(bus->i2c, addr << 1, bus->buf, 1, HAL_MAX_DELAY);
    _check_error(bus);
}

long read_byte_data(Bus *bus, uint8_t addr, char cmd) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af02      	add	r7, sp, #8
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
 8001312:	4613      	mov	r3, r2
 8001314:	70bb      	strb	r3, [r7, #2]
    //transmits the address to read from
    bus->buf[0] = cmd;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	725a      	strb	r2, [r3, #9]
    bus->ret = HAL_I2C_Master_Transmit(bus->i2c, addr << 1, bus->buf, 1, HAL_MAX_DELAY);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	b29b      	uxth	r3, r3
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	b299      	uxth	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f103 0209 	add.w	r2, r3, #9
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	f000 fd67 	bl	8001e08 <HAL_I2C_Master_Transmit>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	721a      	strb	r2, [r3, #8]
    _check_error(bus);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f84c 	bl	80013e0 <_check_error>
    
    //reads from address sent above
    bus->ret = HAL_I2C_Master_Receive(bus->i2c, (addr << 1) | 1, bus->buf, 1, HAL_MAX_DELAY);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	b21b      	sxth	r3, r3
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	b21b      	sxth	r3, r3
 8001358:	b299      	uxth	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f103 0209 	add.w	r2, r3, #9
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	f000 fe42 	bl	8001ff0 <HAL_I2C_Master_Receive>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	721a      	strb	r2, [r3, #8]
    _check_error(bus);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f833 	bl	80013e0 <_check_error>
    return bus->buf[0];
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7a5b      	ldrb	r3, [r3, #9]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <write_byte_data>:

void write_byte_data(Bus *bus, uint8_t addr, char cmd, uint8_t data) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af02      	add	r7, sp, #8
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	4608      	mov	r0, r1
 8001390:	4611      	mov	r1, r2
 8001392:	461a      	mov	r2, r3
 8001394:	4603      	mov	r3, r0
 8001396:	70fb      	strb	r3, [r7, #3]
 8001398:	460b      	mov	r3, r1
 800139a:	70bb      	strb	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
    bus->buf[0] = cmd;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78ba      	ldrb	r2, [r7, #2]
 80013a4:	725a      	strb	r2, [r3, #9]
    bus->buf[1] = data;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	787a      	ldrb	r2, [r7, #1]
 80013aa:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    bus->ret = HAL_I2C_Master_Transmit(bus->i2c, addr << 1, bus->buf, 2, HAL_MAX_DELAY);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	b299      	uxth	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f103 0209 	add.w	r2, r3, #9
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	f000 fd1f 	bl	8001e08 <HAL_I2C_Master_Transmit>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	721a      	strb	r2, [r3, #8]
    _check_error(bus);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f804 	bl	80013e0 <_check_error>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_check_error>:
    bus->ret = HAL_I2C_Master_Transmit(bus->i2c, addr << 1, bus->buf, 3, HAL_MAX_DELAY);
    
    _check_error(bus);
}

int _check_error(Bus *bus) {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    if (bus->ret != HAL_OK) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01f      	beq.n	8001430 <_check_error+0x50>
        strcpy((char*)bus->buf, "Err \r\n");
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3309      	adds	r3, #9
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <_check_error+0x5c>)
 80013f6:	6810      	ldr	r0, [r2, #0]
 80013f8:	6018      	str	r0, [r3, #0]
 80013fa:	8891      	ldrh	r1, [r2, #4]
 80013fc:	7992      	ldrb	r2, [r2, #6]
 80013fe:	8099      	strh	r1, [r3, #4]
 8001400:	719a      	strb	r2, [r3, #6]

        HAL_UART_Transmit(bus->uart, bus->buf, strlen((char*)bus->buf), HAL_MAX_DELAY);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685c      	ldr	r4, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f103 0509 	add.w	r5, r3, #9
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3309      	adds	r3, #9
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe fee5 	bl	80001e0 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	4629      	mov	r1, r5
 8001420:	4620      	mov	r0, r4
 8001422:	f002 fd0b 	bl	8003e3c <HAL_UART_Transmit>
        HAL_Delay(10);
 8001426:	200a      	movs	r0, #10
 8001428:	f000 f9b4 	bl	8001794 <HAL_Delay>
        return FALSE;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <_check_error+0x52>
    }
    return TRUE;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	bf00      	nop
 800143c:	0800676c 	.word	0x0800676c

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001476:	2007      	movs	r0, #7
 8001478:	f000 fa60 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_I2C_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_I2C_MspInit+0x84>)
 80014e0:	f000 fa60 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ee:	61d3      	str	r3, [r2, #28]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_I2C_MspInit+0x80>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005400 	.word	0x40005400
 8001508:	40021000 	.word	0x40021000
 800150c:	48000400 	.word	0x48000400

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_UART_MspInit+0x7c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d128      	bne.n	8001584 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_UART_MspInit+0x80>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_UART_MspInit+0x80>)
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_UART_MspInit+0x80>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_UART_MspInit+0x80>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_UART_MspInit+0x80>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_UART_MspInit+0x80>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001562:	230c      	movs	r3, #12
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001572:	2307      	movs	r3, #7
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f000 fa10 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40004400 	.word	0x40004400
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f8b4 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x50>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x16>
		heap_end = &end;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <_sbrk+0x50>)
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <_sbrk+0x54>)
 8001604:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <_sbrk+0x50>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <_sbrk+0x50>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	466a      	mov	r2, sp
 8001616:	4293      	cmp	r3, r2
 8001618:	d907      	bls.n	800162a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800161a:	f003 f81f 	bl	800465c <__errno>
 800161e:	4602      	mov	r2, r0
 8001620:	230c      	movs	r3, #12
 8001622:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	e006      	b.n	8001638 <_sbrk+0x48>
	}

	heap_end += incr;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <_sbrk+0x50>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <_sbrk+0x50>)
 8001634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001fc 	.word	0x200001fc
 8001644:	20000300 	.word	0x20000300

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SystemInit+0x28>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <SystemInit+0x28>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SystemInit+0x28>)
 800165e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001662:	609a      	str	r2, [r3, #8]
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001678:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800167a:	e003      	b.n	8001684 <LoopCopyDataInit>

0800167c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800167e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001680:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001682:	3104      	adds	r1, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001688:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800168a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800168c:	d3f6      	bcc.n	800167c <CopyDataInit>
	ldr	r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001690:	e002      	b.n	8001698 <LoopFillZerobss>

08001692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001692:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001694:	f842 3b04 	str.w	r3, [r2], #4

08001698 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <LoopForever+0x16>)
	cmp	r2, r3
 800169a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800169c:	d3f9      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800169e:	f7ff ffd3 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f002 ffe1 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7ff fc09 	bl	8000ebc <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016ac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80016b0:	08006a10 	.word	0x08006a10
	ldr	r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016b8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80016bc:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80016c0:	20000300 	.word	0x20000300

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x28>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f92f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff feac 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f939 	bl	800198a <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f90f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	200002f8 	.word	0x200002f8

0800177c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200002f8 	.word	0x200002f8

08001794 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_Delay+0x40>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff47 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff5c 	bl	8001820 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffb0 	bl	80018f8 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	e160      	b.n	8001c76 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8152 	beq.w	8001c70 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x38>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d00b      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6c:	2b11      	cmp	r3, #17
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80ac 	beq.w	8001c70 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	4b5e      	ldr	r3, [pc, #376]	; (8001c94 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a5d      	ldr	r2, [pc, #372]	; (8001c94 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <HAL_GPIO_Init+0x2f0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b30:	4a59      	ldr	r2, [pc, #356]	; (8001c98 <HAL_GPIO_Init+0x2f4>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5a:	d025      	beq.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x2f8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d01f      	beq.n	8001ba4 <HAL_GPIO_Init+0x200>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x2fc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d019      	beq.n	8001ba0 <HAL_GPIO_Init+0x1fc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x300>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_GPIO_Init+0x1f8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1f4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x308>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1f0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1ec>
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	e00c      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b90:	2307      	movs	r3, #7
 8001b92:	e00a      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b94:	2305      	movs	r3, #5
 8001b96:	e008      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bba:	4937      	ldr	r1, [pc, #220]	; (8001c98 <HAL_GPIO_Init+0x2f4>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bec:	4a31      	ldr	r2, [pc, #196]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f ae97 	bne.w	80019b4 <HAL_GPIO_Init+0x10>
  }
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000c00 	.word	0x48000c00
 8001ca8:	48001000 	.word	0x48001000
 8001cac:	48001400 	.word	0x48001400
 8001cb0:	48001800 	.word	0x48001800
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e081      	b.n	8001dfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fbba 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	e006      	b.n	8001d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d104      	bne.n	8001d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	ea42 0103 	orr.w	r1, r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	021a      	lsls	r2, r3, #8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69d9      	ldr	r1, [r3, #28]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	817b      	strh	r3, [r7, #10]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	f040 80da 	bne.w	8001fde <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2C_Master_Transmit+0x30>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0d3      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff fc9c 	bl	800177c <HAL_GetTick>
 8001e44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2319      	movs	r3, #25
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f9e6 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0be      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2bff      	cmp	r3, #255	; 0xff
 8001e92:	d90e      	bls.n	8001eb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	22ff      	movs	r2, #255	; 0xff
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	8979      	ldrh	r1, [r7, #10]
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fb48 	bl	8002540 <I2C_TransferConfig>
 8001eb0:	e06c      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fb37 	bl	8002540 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ed2:	e05b      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	6a39      	ldr	r1, [r7, #32]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9e3 	bl	80022a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e07b      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d034      	beq.n	8001f8c <HAL_I2C_Master_Transmit+0x184>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d130      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f975 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e04d      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d90e      	bls.n	8001f6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	8979      	ldrh	r1, [r7, #10]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 faeb 	bl	8002540 <I2C_TransferConfig>
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	8979      	ldrh	r1, [r7, #10]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fada 	bl	8002540 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d19e      	bne.n	8001ed4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f9c2 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e01a      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_I2C_Master_Transmit+0x1e4>)
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	80002000 	.word	0x80002000
 8001fec:	fe00e800 	.word	0xfe00e800

08001ff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	817b      	strh	r3, [r7, #10]
 8002000:	4613      	mov	r3, r2
 8002002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b20      	cmp	r3, #32
 800200e:	f040 80db 	bne.w	80021c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Receive+0x30>
 800201c:	2302      	movs	r3, #2
 800201e:	e0d4      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002028:	f7ff fba8 	bl	800177c <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2319      	movs	r3, #25
 8002034:	2201      	movs	r2, #1
 8002036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f8f2 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0bf      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2222      	movs	r2, #34	; 0x22
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2210      	movs	r2, #16
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2bff      	cmp	r3, #255	; 0xff
 800207a:	d90e      	bls.n	800209a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <HAL_I2C_Master_Receive+0x1e4>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa54 	bl	8002540 <I2C_TransferConfig>
 8002098:	e06d      	b.n	8002176 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_I2C_Master_Receive+0x1e4>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fa43 	bl	8002540 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80020ba:	e05c      	b.n	8002176 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6a39      	ldr	r1, [r7, #32]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f96b 	bl	800239c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e07c      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d034      	beq.n	8002176 <HAL_I2C_Master_Receive+0x186>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d130      	bne.n	8002176 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2200      	movs	r2, #0
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f880 	bl	8002224 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e04d      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d90e      	bls.n	8002156 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9f6 	bl	8002540 <I2C_TransferConfig>
 8002154:	e00f      	b.n	8002176 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f9e5 	bl	8002540 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d19d      	bne.n	80020bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	6a39      	ldr	r1, [r7, #32]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f8cd 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e01a      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_I2C_Master_Receive+0x1e8>)
 80021a8:	400b      	ands	r3, r1
 80021aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	80002400 	.word	0x80002400
 80021d8:	fe00e800 	.word	0xfe00e800

080021dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d103      	bne.n	80021fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d007      	beq.n	8002218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	619a      	str	r2, [r3, #24]
  }
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002234:	e022      	b.n	800227c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d01e      	beq.n	800227c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7ff fa9d 	bl	800177c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d113      	bne.n	800227c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e00f      	b.n	800229c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	429a      	cmp	r2, r3
 8002298:	d0cd      	beq.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022b0:	e02c      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8dc 	bl	8002474 <I2C_IsAcknowledgeFailed>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e02a      	b.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d01e      	beq.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7ff fa55 	bl	800177c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d113      	bne.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d1cb      	bne.n	80022b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002330:	e028      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f89c 	bl	8002474 <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e026      	b.n	8002394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7ff fa19 	bl	800177c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d113      	bne.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	d1cf      	bne.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a8:	e055      	b.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f860 	bl	8002474 <I2C_IsAcknowledgeFailed>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e053      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d129      	bne.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d105      	bne.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e03f      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e022      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7ff f9ac 	bl	800177c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e007      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d1a2      	bne.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b10      	cmp	r3, #16
 800248c:	d151      	bne.n	8002532 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248e:	e022      	b.n	80024d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d01e      	beq.n	80024d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002498:	f7ff f970 	bl	800177c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d302      	bcc.n	80024ae <I2C_IsAcknowledgeFailed+0x3a>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d113      	bne.n	80024d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02e      	b.n	8002534 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d1d5      	bne.n	8002490 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fe71 	bl	80021dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <I2C_IsAcknowledgeFailed+0xc8>)
 8002506:	400b      	ands	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	fe00e800 	.word	0xfe00e800

08002540 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	817b      	strh	r3, [r7, #10]
 800254e:	4613      	mov	r3, r2
 8002550:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	0d5b      	lsrs	r3, r3, #21
 800255c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <I2C_TransferConfig+0x58>)
 8002562:	430b      	orrs	r3, r1
 8002564:	43db      	mvns	r3, r3
 8002566:	ea02 0103 	and.w	r1, r2, r3
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002570:	7a7b      	ldrb	r3, [r7, #9]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	03ff63ff 	.word	0x03ff63ff

0800259c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d138      	bne.n	8002624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025bc:	2302      	movs	r3, #2
 80025be:	e032      	b.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	d139      	bne.n	80026bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002652:	2302      	movs	r3, #2
 8002654:	e033      	b.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f000 bf01 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8160 	beq.w	80029b6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026f6:	4bae      	ldr	r3, [pc, #696]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d00c      	beq.n	800271c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002702:	4bab      	ldr	r3, [pc, #684]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d159      	bne.n	80027c2 <HAL_RCC_OscConfig+0xf6>
 800270e:	4ba8      	ldr	r3, [pc, #672]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d152      	bne.n	80027c2 <HAL_RCC_OscConfig+0xf6>
 800271c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002720:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002730:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <HAL_RCC_OscConfig+0x82>
 8002748:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0xae>
 800274e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002752:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002766:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800276a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002776:	4b8e      	ldr	r3, [pc, #568]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800277e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002782:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800278e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8102 	beq.w	80029b4 <HAL_RCC_OscConfig+0x2e8>
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80fc 	bne.w	80029b4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 be93 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x110>
 80027ce:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e030      	b.n	800283e <HAL_RCC_OscConfig+0x172>
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x134>
 80027e6:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a71      	ldr	r2, [pc, #452]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01e      	b.n	800283e <HAL_RCC_OscConfig+0x172>
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x15a>
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a64      	ldr	r2, [pc, #400]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x172>
 8002826:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d059      	beq.n	80028fc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe ff98 	bl	800177c <HAL_GetTick>
 800284c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002852:	f7fe ff93 	bl	800177c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d902      	bls.n	8002868 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	f000 be40 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800287c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_RCC_OscConfig+0x1ce>
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x1fa>
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80028ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80028ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80028d2:	fa92 f2a2 	rbit	r2, r2
 80028d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80028da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ab      	beq.n	8002852 <HAL_RCC_OscConfig+0x186>
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe ff3e 	bl	800177c <HAL_GetTick>
 8002900:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002906:	f7fe ff39 	bl	800177c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d902      	bls.n	800291c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	f000 bde6 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
 800291c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002920:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002930:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x282>
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x2ae>
 800294e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002952:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002966:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800296a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_RCC_OscConfig+0x2e4>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800297e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002982:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800298e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f042 0220 	orr.w	r2, r2, #32
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f002 021f 	and.w	r2, r2, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ab      	bne.n	8002906 <HAL_RCC_OscConfig+0x23a>
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
 80029b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8170 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029c6:	4bd0      	ldr	r3, [pc, #832]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029d2:	4bcd      	ldr	r3, [pc, #820]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d16d      	bne.n	8002aba <HAL_RCC_OscConfig+0x3ee>
 80029de:	4bca      	ldr	r3, [pc, #808]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d166      	bne.n	8002aba <HAL_RCC_OscConfig+0x3ee>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80029fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x350>
 8002a16:	4bbc      	ldr	r3, [pc, #752]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e013      	b.n	8002a44 <HAL_RCC_OscConfig+0x378>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a40:	4bb1      	ldr	r3, [pc, #708]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002a4a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002a56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3ba>
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f000 bd31 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	21f8      	movs	r1, #248	; 0xf8
 8002a96:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a9e:	fa91 f1a1 	rbit	r1, r1
 8002aa2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002aa6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002aaa:	fab1 f181 	clz	r1, r1
 8002aae:	b2c9      	uxtb	r1, r1
 8002ab0:	408b      	lsls	r3, r1
 8002ab2:	4995      	ldr	r1, [pc, #596]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab8:	e0f5      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8085 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x504>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ad8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	461a      	mov	r2, r3
 8002aee:	2301      	movs	r3, #1
 8002af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fe43 	bl	800177c <HAL_GetTick>
 8002af6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fe fe3e 	bl	800177c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d902      	bls.n	8002b12 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f000 bceb 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002b24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_OscConfig+0x476>
 8002b3c:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	e013      	b.n	8002b6a <HAL_RCC_OscConfig+0x49e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b66:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b74:	fa92 f2a2 	rbit	r2, r2
 8002b78:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002b7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f042 0220 	orr.w	r2, r2, #32
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0af      	beq.n	8002afc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	21f8      	movs	r1, #248	; 0xf8
 8002bac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002bb4:	fa91 f1a1 	rbit	r1, r1
 8002bb8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002bbc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bc0:	fab1 f181 	clz	r1, r1
 8002bc4:	b2c9      	uxtb	r1, r1
 8002bc6:	408b      	lsls	r3, r1
 8002bc8:	494f      	ldr	r1, [pc, #316]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
 8002bce:	e06a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5da>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002be2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fdbe 	bl	800177c <HAL_GetTick>
 8002c00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fe fdb9 	bl	800177c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	f000 bc66 	b.w	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002c2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0x580>
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0x5a8>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_OscConfig+0x63c>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2202      	movs	r2, #2
 8002c76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c7e:	fa92 f2a2 	rbit	r2, r2
 8002c82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002c86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1af      	bne.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80da 	beq.w	8002e6a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d069      	beq.n	8002d94 <HAL_RCC_OscConfig+0x6c8>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x640>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fd47 	bl	800177c <HAL_GetTick>
 8002cee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e00d      	b.n	8002d10 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fd42 	bl	800177c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d905      	bls.n	8002d10 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e3ef      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	10908120 	.word	0x10908120
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d28:	2202      	movs	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d40:	2202      	movs	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d54:	4ba4      	ldr	r3, [pc, #656]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	6019      	str	r1, [r3, #0]
 8002d60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f1a3 	rbit	r1, r3
 8002d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d6e:	6019      	str	r1, [r3, #0]
  return result;
 8002d70:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0b0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x628>
 8002d92:	e06a      	b.n	8002e6a <HAL_RCC_OscConfig+0x79e>
 8002d94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002daa:	601a      	str	r2, [r3, #0]
  return result;
 8002dac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002db0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <HAL_RCC_OscConfig+0x920>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fcd9 	bl	800177c <HAL_GetTick>
 8002dca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dce:	e009      	b.n	8002de4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fcd4 	bl	800177c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e381      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002de4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002de8:	2202      	movs	r2, #2
 8002dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e18:	2202      	movs	r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e34:	2102      	movs	r1, #2
 8002e36:	6019      	str	r1, [r3, #0]
 8002e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f1a3 	rbit	r1, r3
 8002e42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e46:	6019      	str	r1, [r3, #0]
  return result;
 8002e48:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1b2      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8157 	beq.w	8003128 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d112      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a55      	ldr	r2, [pc, #340]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	61d3      	str	r3, [r2, #28]
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <HAL_RCC_OscConfig+0x924>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11a      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x924>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_RCC_OscConfig+0x924>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fc57 	bl	800177c <HAL_GetTick>
 8002ece:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	e009      	b.n	8002ee8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7fe fc52 	bl	800177c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2ff      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x924>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x840>
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	e02f      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a0>
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x864>
 8002f16:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a0>
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x888>
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a0>
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06a      	beq.n	800304c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fc01 	bl	800177c <HAL_GetTick>
 8002f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fe fbfc 	bl	800177c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e2a7      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 8002f98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002fc6:	601a      	str	r2, [r3, #0]
  return result;
 8002fc8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002fcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x928>
 8002fe2:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <HAL_RCC_OscConfig+0x91c>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	e013      	b.n	8003010 <HAL_RCC_OscConfig+0x944>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	10908120 	.word	0x10908120
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4bc0      	ldr	r3, [pc, #768]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003014:	2102      	movs	r1, #2
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	fa92 f1a2 	rbit	r1, r2
 8003022:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003026:	6011      	str	r1, [r2, #0]
  return result;
 8003028:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d09a      	beq.n	8002f80 <HAL_RCC_OscConfig+0x8b4>
 800304a:	e063      	b.n	8003114 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fb96 	bl	800177c <HAL_GetTick>
 8003050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fb91 	bl	800177c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e23c      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 800306e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800308a:	2202      	movs	r2, #2
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0x9f2>
 80030b8:	4b95      	ldr	r3, [pc, #596]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	e00d      	b.n	80030da <HAL_RCC_OscConfig+0xa0e>
 80030be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030c2:	2202      	movs	r2, #2
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f2a3 	rbit	r2, r3
 80030d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80030de:	2102      	movs	r1, #2
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	fa92 f1a2 	rbit	r1, r2
 80030ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030f0:	6011      	str	r1, [r2, #0]
  return result;
 80030f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f002 021f 	and.w	r2, r2, #31
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1a0      	bne.n	8003056 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003114:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a7b      	ldr	r2, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 81d9 	beq.w	80034e6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	f000 81a6 	beq.w	800348e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f040 811e 	bne.w	800338a <HAL_RCC_OscConfig+0xcbe>
 800314e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003152:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003166:	601a      	str	r2, [r3, #0]
  return result;
 8003168:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800316c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fafa 	bl	800177c <HAL_GetTick>
 8003188:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe faf5 	bl	800177c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1a2      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 80031a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031ba:	601a      	str	r2, [r3, #0]
  return result;
 80031bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_OscConfig+0xb10>
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	e01b      	b.n	8003214 <HAL_RCC_OscConfig+0xb48>
 80031dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003218:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	fa92 f1a2 	rbit	r1, r2
 8003228:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800322c:	6011      	str	r1, [r2, #0]
  return result;
 800322e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d19e      	bne.n	800318e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f023 020f 	bic.w	r2, r3, #15
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	492c      	ldr	r1, [pc, #176]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003260:	4313      	orrs	r3, r2
 8003262:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a19      	ldr	r1, [r3, #32]
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	430b      	orrs	r3, r1
 800327a:	4925      	ldr	r1, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
 8003280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003298:	601a      	str	r2, [r3, #0]
  return result;
 800329a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800329e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	461a      	mov	r2, r3
 80032b2:	2301      	movs	r3, #1
 80032b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fa61 	bl	800177c <HAL_GetTick>
 80032ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032be:	e009      	b.n	80032d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fa5c 	bl	800177c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e109      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 80032d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032ec:	601a      	str	r2, [r3, #0]
  return result;
 80032ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCC_OscConfig+0xc48>
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCC_OscConfig+0xc44>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e01e      	b.n	800334c <HAL_RCC_OscConfig+0xc80>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0xe28>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fa92 f1a2 	rbit	r1, r2
 8003360:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003364:	6011      	str	r1, [r2, #0]
  return result;
 8003366:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d09b      	beq.n	80032c0 <HAL_RCC_OscConfig+0xbf4>
 8003388:	e0ad      	b.n	80034e6 <HAL_RCC_OscConfig+0xe1a>
 800338a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800338e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033a2:	601a      	str	r2, [r3, #0]
  return result;
 80033a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe f9dc 	bl	800177c <HAL_GetTick>
 80033c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c8:	e009      	b.n	80033de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe f9d7 	bl	800177c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e084      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
 80033de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f6:	601a      	str	r2, [r3, #0]
  return result;
 80033f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0xd4c>
 8003412:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_RCC_OscConfig+0xe28>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e01b      	b.n	8003450 <HAL_RCC_OscConfig+0xd84>
 8003418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f107 0320 	add.w	r3, r7, #32
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f107 031c 	add.w	r3, r7, #28
 8003436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f107 0318 	add.w	r3, r7, #24
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <HAL_RCC_OscConfig+0xe28>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f107 0214 	add.w	r2, r7, #20
 8003454:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	f107 0214 	add.w	r2, r7, #20
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	fa92 f1a2 	rbit	r1, r2
 8003464:	f107 0210 	add.w	r2, r7, #16
 8003468:	6011      	str	r1, [r2, #0]
  return result;
 800346a:	f107 0210 	add.w	r2, r7, #16
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	fab2 f282 	clz	r2, r2
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	f042 0220 	orr.w	r2, r2, #32
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	f002 021f 	and.w	r2, r2, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d19e      	bne.n	80033ca <HAL_RCC_OscConfig+0xcfe>
 800348c:	e02b      	b.n	80034e6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e025      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0xe28>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_OscConfig+0xe28>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d111      	bne.n	80034e2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d108      	bne.n	80034e2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80034d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b09e      	sub	sp, #120	; 0x78
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e162      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b90      	ldr	r3, [pc, #576]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b8d      	ldr	r3, [pc, #564]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	498b      	ldr	r1, [pc, #556]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e14a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	497f      	ldr	r1, [pc, #508]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80dc 	beq.w	8003724 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13c      	bne.n	80035ee <HAL_RCC_ClockConfig+0xf6>
 8003574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003578:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d102      	bne.n	800359e <HAL_RCC_ClockConfig+0xa6>
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	e00f      	b.n	80035be <HAL_RCC_ClockConfig+0xc6>
 800359e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	667b      	str	r3, [r7, #100]	; 0x64
 80035ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b0:	663b      	str	r3, [r7, #96]	; 0x60
 80035b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ba:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80035c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80035cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d17b      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0f3      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d13c      	bne.n	8003670 <HAL_RCC_ClockConfig+0x178>
 80035f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_ClockConfig+0x128>
 800361a:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e00f      	b.n	8003640 <HAL_RCC_ClockConfig+0x148>
 8003620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	647b      	str	r3, [r7, #68]	; 0x44
 800362e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003632:	643b      	str	r3, [r7, #64]	; 0x40
 8003634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003644:	63ba      	str	r2, [r7, #56]	; 0x38
 8003646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f002 021f 	and.w	r2, r2, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d13a      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b2      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
 8003670:	2302      	movs	r3, #2
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_RCC_ClockConfig+0x1a0>
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e00d      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1bc>
 8003698:	2302      	movs	r3, #2
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	2302      	movs	r3, #2
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2202      	movs	r2, #2
 80036b6:	61ba      	str	r2, [r7, #24]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	617a      	str	r2, [r7, #20]
  return result;
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e079      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	491a      	ldr	r1, [pc, #104]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f842 	bl	800177c <HAL_GetTick>
 80036f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe f83e 	bl	800177c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e061      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d214      	bcs.n	800375c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4906      	ldr	r1, [pc, #24]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_RCC_ClockConfig+0x25c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e040      	b.n	80037d6 <HAL_RCC_ClockConfig+0x2de>
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCC_ClockConfig+0x2e8>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	491a      	ldr	r1, [pc, #104]	; (80037e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4912      	ldr	r1, [pc, #72]	; (80037e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800379a:	f000 f829 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 800379e:	4601      	mov	r1, r0
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCC_ClockConfig+0x2e8>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a8:	22f0      	movs	r2, #240	; 0xf0
 80037aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	60fa      	str	r2, [r7, #12]
  return result;
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	fab2 f282 	clz	r2, r2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	40d3      	lsrs	r3, r2
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x2ec>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	fa21 f303 	lsr.w	r3, r1, r3
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_RCC_ClockConfig+0x2f0>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_RCC_ClockConfig+0x2f4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd ff90 	bl	80016f4 <HAL_InitTick>
  
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3778      	adds	r7, #120	; 0x78
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08006774 	.word	0x08006774
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b08b      	sub	sp, #44	; 0x2c
 80037f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x30>
 800381a:	2b08      	cmp	r3, #8
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x36>
 800381e:	e03f      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003822:	623b      	str	r3, [r7, #32]
      break;
 8003824:	e03f      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800382c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003830:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	fa92 f2a2 	rbit	r2, r2
 8003838:	607a      	str	r2, [r7, #4]
  return result;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	40d3      	lsrs	r3, r2
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	220f      	movs	r2, #15
 8003854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	fa92 f2a2 	rbit	r2, r2
 800385c:	60fa      	str	r2, [r7, #12]
  return result;
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	fab2 f282 	clz	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	40d3      	lsrs	r3, r2
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003878:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e007      	b.n	800389a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800388a:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	623b      	str	r3, [r7, #32]
      break;
 800389e:	e002      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038a2:	623b      	str	r3, [r7, #32]
      break;
 80038a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a6:	6a3b      	ldr	r3, [r7, #32]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	372c      	adds	r7, #44	; 0x2c
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40021000 	.word	0x40021000
 80038b8:	007a1200 	.word	0x007a1200
 80038bc:	0800678c 	.word	0x0800678c
 80038c0:	0800679c 	.word	0x0800679c

080038c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038e2:	f7ff ffef 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	fa92 f2a2 	rbit	r2, r2
 80038fc:	603a      	str	r2, [r7, #0]
  return result;
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	40d3      	lsrs	r3, r2
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCC_GetPCLK1Freq+0x40>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	08006784 	.word	0x08006784

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003926:	f7ff ffcd 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 800392a:	4601      	mov	r1, r0
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003934:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	603a      	str	r2, [r7, #0]
  return result;
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	40d3      	lsrs	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x40>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08006784 	.word	0x08006784

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b092      	sub	sp, #72	; 0x48
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80d7 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10e      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	61d3      	str	r3, [r2, #28]
 80039a0:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d118      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7fd fed7 	bl	800177c <HAL_GetTick>
 80039ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e008      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d2:	f7fd fed3 	bl	800177c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e1d6      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8084 	beq.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d07c      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a10:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04b      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fd fe83 	bl	800177c <HAL_GetTick>
 8003a76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd fe7f 	bl	800177c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e180      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a90:	2302      	movs	r3, #2
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003abe:	4b01      	ldr	r3, [pc, #4]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	e00d      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	10908100 	.word	0x10908100
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	613a      	str	r2, [r7, #16]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fa92 f2a2 	rbit	r2, r2
 8003aea:	60fa      	str	r2, [r7, #12]
  return result;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f002 021f 	and.w	r2, r2, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0b7      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b0a:	4b95      	ldr	r3, [pc, #596]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4992      	ldr	r1, [pc, #584]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b24:	4b8e      	ldr	r3, [pc, #568]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4a8d      	ldr	r2, [pc, #564]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b3c:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f023 0203 	bic.w	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4985      	ldr	r1, [pc, #532]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b5a:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	497e      	ldr	r1, [pc, #504]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b78:	4b79      	ldr	r3, [pc, #484]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4976      	ldr	r1, [pc, #472]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b96:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f023 0210 	bic.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	496f      	ldr	r1, [pc, #444]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	4967      	ldr	r1, [pc, #412]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f023 0220 	bic.w	r2, r3, #32
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4960      	ldr	r1, [pc, #384]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	4958      	ldr	r1, [pc, #352]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c0e:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4951      	ldr	r1, [pc, #324]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c2c:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4949      	ldr	r1, [pc, #292]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c4a:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4942      	ldr	r1, [pc, #264]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c68:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	493a      	ldr	r1, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	4933      	ldr	r1, [pc, #204]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	492b      	ldr	r1, [pc, #172]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4924      	ldr	r1, [pc, #144]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	491c      	ldr	r1, [pc, #112]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	4915      	ldr	r1, [pc, #84]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	490d      	ldr	r1, [pc, #52]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d58:	4b01      	ldr	r3, [pc, #4]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6c:	490b      	ldr	r1, [pc, #44]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	4904      	ldr	r1, [pc, #16]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3748      	adds	r7, #72	; 0x48
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e040      	b.n	8003e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fba4 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8c0 	bl	8003f64 <UART_SetConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e022      	b.n	8003e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 face 	bl	8004398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb55 	bl	80044dc <UART_CheckIdleState>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	f040 8081 	bne.w	8003f58 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Transmit+0x26>
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e079      	b.n	8003f5a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Transmit+0x38>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e072      	b.n	8003f5a <HAL_UART_Transmit+0x11e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2221      	movs	r2, #33	; 0x21
 8003e86:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e88:	f7fd fc78 	bl	800177c <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d108      	bne.n	8003eba <HAL_UART_Transmit+0x7e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e003      	b.n	8003ec2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec2:	e02d      	b.n	8003f20 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fb49 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e03d      	b.n	8003f5a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e008      	b.n	8003f0e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	b292      	uxth	r2, r2
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1cb      	bne.n	8003ec4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fb15 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e009      	b.n	8003f5a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4bac      	ldr	r3, [pc, #688]	; (8004244 <UART_SetConfig+0x2e0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a9a      	ldr	r2, [pc, #616]	; (8004248 <UART_SetConfig+0x2e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d121      	bne.n	8004028 <UART_SetConfig+0xc4>
 8003fe4:	4b99      	ldr	r3, [pc, #612]	; (800424c <UART_SetConfig+0x2e8>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d817      	bhi.n	8004020 <UART_SetConfig+0xbc>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x94>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004015 	.word	0x08004015
 8004000:	0800401b 	.word	0x0800401b
 8004004:	0800400f 	.word	0x0800400f
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e0b2      	b.n	8004174 <UART_SetConfig+0x210>
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e0af      	b.n	8004174 <UART_SetConfig+0x210>
 8004014:	2304      	movs	r3, #4
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e0ac      	b.n	8004174 <UART_SetConfig+0x210>
 800401a:	2308      	movs	r3, #8
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e0a9      	b.n	8004174 <UART_SetConfig+0x210>
 8004020:	2310      	movs	r3, #16
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	bf00      	nop
 8004026:	e0a5      	b.n	8004174 <UART_SetConfig+0x210>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a88      	ldr	r2, [pc, #544]	; (8004250 <UART_SetConfig+0x2ec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d123      	bne.n	800407a <UART_SetConfig+0x116>
 8004032:	4b86      	ldr	r3, [pc, #536]	; (800424c <UART_SetConfig+0x2e8>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403e:	d012      	beq.n	8004066 <UART_SetConfig+0x102>
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d802      	bhi.n	800404c <UART_SetConfig+0xe8>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <UART_SetConfig+0xf6>
 800404a:	e012      	b.n	8004072 <UART_SetConfig+0x10e>
 800404c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004050:	d00c      	beq.n	800406c <UART_SetConfig+0x108>
 8004052:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004056:	d003      	beq.n	8004060 <UART_SetConfig+0xfc>
 8004058:	e00b      	b.n	8004072 <UART_SetConfig+0x10e>
 800405a:	2300      	movs	r3, #0
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e089      	b.n	8004174 <UART_SetConfig+0x210>
 8004060:	2302      	movs	r3, #2
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e086      	b.n	8004174 <UART_SetConfig+0x210>
 8004066:	2304      	movs	r3, #4
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e083      	b.n	8004174 <UART_SetConfig+0x210>
 800406c:	2308      	movs	r3, #8
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e080      	b.n	8004174 <UART_SetConfig+0x210>
 8004072:	2310      	movs	r3, #16
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	bf00      	nop
 8004078:	e07c      	b.n	8004174 <UART_SetConfig+0x210>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	; (8004254 <UART_SetConfig+0x2f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d123      	bne.n	80040cc <UART_SetConfig+0x168>
 8004084:	4b71      	ldr	r3, [pc, #452]	; (800424c <UART_SetConfig+0x2e8>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800408c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004090:	d012      	beq.n	80040b8 <UART_SetConfig+0x154>
 8004092:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004096:	d802      	bhi.n	800409e <UART_SetConfig+0x13a>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <UART_SetConfig+0x148>
 800409c:	e012      	b.n	80040c4 <UART_SetConfig+0x160>
 800409e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040a2:	d00c      	beq.n	80040be <UART_SetConfig+0x15a>
 80040a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040a8:	d003      	beq.n	80040b2 <UART_SetConfig+0x14e>
 80040aa:	e00b      	b.n	80040c4 <UART_SetConfig+0x160>
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e060      	b.n	8004174 <UART_SetConfig+0x210>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e05d      	b.n	8004174 <UART_SetConfig+0x210>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e05a      	b.n	8004174 <UART_SetConfig+0x210>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e057      	b.n	8004174 <UART_SetConfig+0x210>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	bf00      	nop
 80040ca:	e053      	b.n	8004174 <UART_SetConfig+0x210>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <UART_SetConfig+0x2f4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d123      	bne.n	800411e <UART_SetConfig+0x1ba>
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <UART_SetConfig+0x2e8>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d012      	beq.n	800410a <UART_SetConfig+0x1a6>
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e8:	d802      	bhi.n	80040f0 <UART_SetConfig+0x18c>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <UART_SetConfig+0x19a>
 80040ee:	e012      	b.n	8004116 <UART_SetConfig+0x1b2>
 80040f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f4:	d00c      	beq.n	8004110 <UART_SetConfig+0x1ac>
 80040f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040fa:	d003      	beq.n	8004104 <UART_SetConfig+0x1a0>
 80040fc:	e00b      	b.n	8004116 <UART_SetConfig+0x1b2>
 80040fe:	2300      	movs	r3, #0
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e037      	b.n	8004174 <UART_SetConfig+0x210>
 8004104:	2302      	movs	r3, #2
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e034      	b.n	8004174 <UART_SetConfig+0x210>
 800410a:	2304      	movs	r3, #4
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e031      	b.n	8004174 <UART_SetConfig+0x210>
 8004110:	2308      	movs	r3, #8
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e02e      	b.n	8004174 <UART_SetConfig+0x210>
 8004116:	2310      	movs	r3, #16
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	bf00      	nop
 800411c:	e02a      	b.n	8004174 <UART_SetConfig+0x210>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4e      	ldr	r2, [pc, #312]	; (800425c <UART_SetConfig+0x2f8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d123      	bne.n	8004170 <UART_SetConfig+0x20c>
 8004128:	4b48      	ldr	r3, [pc, #288]	; (800424c <UART_SetConfig+0x2e8>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004134:	d012      	beq.n	800415c <UART_SetConfig+0x1f8>
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413a:	d802      	bhi.n	8004142 <UART_SetConfig+0x1de>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <UART_SetConfig+0x1ec>
 8004140:	e012      	b.n	8004168 <UART_SetConfig+0x204>
 8004142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004146:	d00c      	beq.n	8004162 <UART_SetConfig+0x1fe>
 8004148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800414c:	d003      	beq.n	8004156 <UART_SetConfig+0x1f2>
 800414e:	e00b      	b.n	8004168 <UART_SetConfig+0x204>
 8004150:	2300      	movs	r3, #0
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e00e      	b.n	8004174 <UART_SetConfig+0x210>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e00b      	b.n	8004174 <UART_SetConfig+0x210>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x210>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e005      	b.n	8004174 <UART_SetConfig+0x210>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	bf00      	nop
 800416e:	e001      	b.n	8004174 <UART_SetConfig+0x210>
 8004170:	2310      	movs	r3, #16
 8004172:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417c:	f040 8090 	bne.w	80042a0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004180:	7ffb      	ldrb	r3, [r7, #31]
 8004182:	2b08      	cmp	r3, #8
 8004184:	d86c      	bhi.n	8004260 <UART_SetConfig+0x2fc>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x228>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041d1 	.word	0x080041d1
 8004194:	080041f1 	.word	0x080041f1
 8004198:	08004261 	.word	0x08004261
 800419c:	0800420d 	.word	0x0800420d
 80041a0:	08004261 	.word	0x08004261
 80041a4:	08004261 	.word	0x08004261
 80041a8:	08004261 	.word	0x08004261
 80041ac:	0800422d 	.word	0x0800422d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7ff fb94 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 80041b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	61bb      	str	r3, [r7, #24]
        break;
 80041ce:	e04a      	b.n	8004266 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7ff fba6 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80041d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	005a      	lsls	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	61bb      	str	r3, [r7, #24]
        break;
 80041ee:	e03a      	b.n	8004266 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80041fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6852      	ldr	r2, [r2, #4]
 8004202:	fbb3 f3f2 	udiv	r3, r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	61bb      	str	r3, [r7, #24]
        break;
 800420a:	e02c      	b.n	8004266 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420c:	f7ff faf0 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 8004210:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	b29b      	uxth	r3, r3
 8004228:	61bb      	str	r3, [r7, #24]
        break;
 800422a:	e01c      	b.n	8004266 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	61bb      	str	r3, [r7, #24]
        break;
 8004242:	e010      	b.n	8004266 <UART_SetConfig+0x302>
 8004244:	efff69f3 	.word	0xefff69f3
 8004248:	40013800 	.word	0x40013800
 800424c:	40021000 	.word	0x40021000
 8004250:	40004400 	.word	0x40004400
 8004254:	40004800 	.word	0x40004800
 8004258:	40004c00 	.word	0x40004c00
 800425c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
        break;
 8004264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d916      	bls.n	800429a <UART_SetConfig+0x336>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004272:	d212      	bcs.n	800429a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f023 030f 	bic.w	r3, r3, #15
 800427c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	b29a      	uxth	r2, r3
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	4313      	orrs	r3, r2
 800428e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	897a      	ldrh	r2, [r7, #10]
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e072      	b.n	8004380 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
 800429e:	e06f      	b.n	8004380 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d85b      	bhi.n	800435e <UART_SetConfig+0x3fa>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x348>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	0800430d 	.word	0x0800430d
 80042b8:	0800435f 	.word	0x0800435f
 80042bc:	08004329 	.word	0x08004329
 80042c0:	0800435f 	.word	0x0800435f
 80042c4:	0800435f 	.word	0x0800435f
 80042c8:	0800435f 	.word	0x0800435f
 80042cc:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff fb04 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 80042d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085a      	lsrs	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	441a      	add	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e03a      	b.n	8004364 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ee:	f7ff fb17 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80042f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	085a      	lsrs	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	61bb      	str	r3, [r7, #24]
        break;
 800430a:	e02b      	b.n	8004364 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004316:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	61bb      	str	r3, [r7, #24]
        break;
 8004326:	e01d      	b.n	8004364 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004328:	f7ff fa62 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 800432c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	085a      	lsrs	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e00e      	b.n	8004364 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e002      	b.n	8004364 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
        break;
 8004362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	d908      	bls.n	800437c <UART_SetConfig+0x418>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d204      	bcs.n	800437c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e001      	b.n	8004380 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop

08004398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01a      	beq.n	80044ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d10a      	bne.n	80044ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ea:	f7fd f947 	bl	800177c <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d10e      	bne.n	800451c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f82a 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e020      	b.n	800455e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d10e      	bne.n	8004548 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800452a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f814 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e00a      	b.n	800455e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004576:	e05d      	b.n	8004634 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d059      	beq.n	8004634 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fd f8fc 	bl	800177c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <UART_WaitOnFlagUntilTimeout+0x30>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11b      	bne.n	80045ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e042      	b.n	8004654 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02b      	beq.n	8004634 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d123      	bne.n	8004634 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004604:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e00f      	b.n	8004654 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	429a      	cmp	r2, r3
 8004650:	d092      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <__errno>:
 800465c:	4b01      	ldr	r3, [pc, #4]	; (8004664 <__errno+0x8>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000000c 	.word	0x2000000c

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4e0d      	ldr	r6, [pc, #52]	; (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	; (80046a4 <__libc_init_array+0x3c>)
 800466e:	1ba4      	subs	r4, r4, r6
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2500      	movs	r5, #0
 8004674:	42a5      	cmp	r5, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4e0b      	ldr	r6, [pc, #44]	; (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	; (80046ac <__libc_init_array+0x44>)
 800467c:	f002 f85c 	bl	8006738 <_init>
 8004680:	1ba4      	subs	r4, r4, r6
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2500      	movs	r5, #0
 8004686:	42a5      	cmp	r5, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004690:	4798      	blx	r3
 8004692:	3501      	adds	r5, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800469a:	4798      	blx	r3
 800469c:	3501      	adds	r5, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08006a08 	.word	0x08006a08
 80046a4:	08006a08 	.word	0x08006a08
 80046a8:	08006a08 	.word	0x08006a08
 80046ac:	08006a0c 	.word	0x08006a0c

080046b0 <malloc>:
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <malloc+0xc>)
 80046b2:	4601      	mov	r1, r0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f000 b859 	b.w	800476c <_malloc_r>
 80046ba:	bf00      	nop
 80046bc:	2000000c 	.word	0x2000000c

080046c0 <memset>:
 80046c0:	4402      	add	r2, r0
 80046c2:	4603      	mov	r3, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	f803 1b01 	strb.w	r1, [r3], #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <_free_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4605      	mov	r5, r0
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d045      	beq.n	8004764 <_free_r+0x94>
 80046d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046dc:	1f0c      	subs	r4, r1, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfb8      	it	lt
 80046e2:	18e4      	addlt	r4, r4, r3
 80046e4:	f001 fb85 	bl	8005df2 <__malloc_lock>
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <_free_r+0x98>)
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	4610      	mov	r0, r2
 80046ee:	b933      	cbnz	r3, 80046fe <_free_r+0x2e>
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	6014      	str	r4, [r2, #0]
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fa:	f001 bb7b 	b.w	8005df4 <__malloc_unlock>
 80046fe:	42a3      	cmp	r3, r4
 8004700:	d90c      	bls.n	800471c <_free_r+0x4c>
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	1862      	adds	r2, r4, r1
 8004706:	4293      	cmp	r3, r2
 8004708:	bf04      	itt	eq
 800470a:	681a      	ldreq	r2, [r3, #0]
 800470c:	685b      	ldreq	r3, [r3, #4]
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	bf04      	itt	eq
 8004712:	1852      	addeq	r2, r2, r1
 8004714:	6022      	streq	r2, [r4, #0]
 8004716:	6004      	str	r4, [r0, #0]
 8004718:	e7ec      	b.n	80046f4 <_free_r+0x24>
 800471a:	4613      	mov	r3, r2
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	b10a      	cbz	r2, 8004724 <_free_r+0x54>
 8004720:	42a2      	cmp	r2, r4
 8004722:	d9fa      	bls.n	800471a <_free_r+0x4a>
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	1858      	adds	r0, r3, r1
 8004728:	42a0      	cmp	r0, r4
 800472a:	d10b      	bne.n	8004744 <_free_r+0x74>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	4401      	add	r1, r0
 8004730:	1858      	adds	r0, r3, r1
 8004732:	4282      	cmp	r2, r0
 8004734:	6019      	str	r1, [r3, #0]
 8004736:	d1dd      	bne.n	80046f4 <_free_r+0x24>
 8004738:	6810      	ldr	r0, [r2, #0]
 800473a:	6852      	ldr	r2, [r2, #4]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	4401      	add	r1, r0
 8004740:	6019      	str	r1, [r3, #0]
 8004742:	e7d7      	b.n	80046f4 <_free_r+0x24>
 8004744:	d902      	bls.n	800474c <_free_r+0x7c>
 8004746:	230c      	movs	r3, #12
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	e7d3      	b.n	80046f4 <_free_r+0x24>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428a      	cmp	r2, r1
 8004752:	bf04      	itt	eq
 8004754:	6811      	ldreq	r1, [r2, #0]
 8004756:	6852      	ldreq	r2, [r2, #4]
 8004758:	6062      	str	r2, [r4, #4]
 800475a:	bf04      	itt	eq
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	605c      	str	r4, [r3, #4]
 8004762:	e7c7      	b.n	80046f4 <_free_r+0x24>
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	20000200 	.word	0x20000200

0800476c <_malloc_r>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	1ccd      	adds	r5, r1, #3
 8004770:	f025 0503 	bic.w	r5, r5, #3
 8004774:	3508      	adds	r5, #8
 8004776:	2d0c      	cmp	r5, #12
 8004778:	bf38      	it	cc
 800477a:	250c      	movcc	r5, #12
 800477c:	2d00      	cmp	r5, #0
 800477e:	4606      	mov	r6, r0
 8004780:	db01      	blt.n	8004786 <_malloc_r+0x1a>
 8004782:	42a9      	cmp	r1, r5
 8004784:	d903      	bls.n	800478e <_malloc_r+0x22>
 8004786:	230c      	movs	r3, #12
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	2000      	movs	r0, #0
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	f001 fb30 	bl	8005df2 <__malloc_lock>
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <_malloc_r+0xac>)
 8004794:	6814      	ldr	r4, [r2, #0]
 8004796:	4621      	mov	r1, r4
 8004798:	b991      	cbnz	r1, 80047c0 <_malloc_r+0x54>
 800479a:	4c20      	ldr	r4, [pc, #128]	; (800481c <_malloc_r+0xb0>)
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	b91b      	cbnz	r3, 80047a8 <_malloc_r+0x3c>
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 fc99 	bl	80050d8 <_sbrk_r>
 80047a6:	6020      	str	r0, [r4, #0]
 80047a8:	4629      	mov	r1, r5
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 fc94 	bl	80050d8 <_sbrk_r>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d124      	bne.n	80047fe <_malloc_r+0x92>
 80047b4:	230c      	movs	r3, #12
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	4630      	mov	r0, r6
 80047ba:	f001 fb1b 	bl	8005df4 <__malloc_unlock>
 80047be:	e7e4      	b.n	800478a <_malloc_r+0x1e>
 80047c0:	680b      	ldr	r3, [r1, #0]
 80047c2:	1b5b      	subs	r3, r3, r5
 80047c4:	d418      	bmi.n	80047f8 <_malloc_r+0x8c>
 80047c6:	2b0b      	cmp	r3, #11
 80047c8:	d90f      	bls.n	80047ea <_malloc_r+0x7e>
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	50cd      	str	r5, [r1, r3]
 80047ce:	18cc      	adds	r4, r1, r3
 80047d0:	4630      	mov	r0, r6
 80047d2:	f001 fb0f 	bl	8005df4 <__malloc_unlock>
 80047d6:	f104 000b 	add.w	r0, r4, #11
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	f020 0007 	bic.w	r0, r0, #7
 80047e0:	1ac3      	subs	r3, r0, r3
 80047e2:	d0d3      	beq.n	800478c <_malloc_r+0x20>
 80047e4:	425a      	negs	r2, r3
 80047e6:	50e2      	str	r2, [r4, r3]
 80047e8:	e7d0      	b.n	800478c <_malloc_r+0x20>
 80047ea:	428c      	cmp	r4, r1
 80047ec:	684b      	ldr	r3, [r1, #4]
 80047ee:	bf16      	itet	ne
 80047f0:	6063      	strne	r3, [r4, #4]
 80047f2:	6013      	streq	r3, [r2, #0]
 80047f4:	460c      	movne	r4, r1
 80047f6:	e7eb      	b.n	80047d0 <_malloc_r+0x64>
 80047f8:	460c      	mov	r4, r1
 80047fa:	6849      	ldr	r1, [r1, #4]
 80047fc:	e7cc      	b.n	8004798 <_malloc_r+0x2c>
 80047fe:	1cc4      	adds	r4, r0, #3
 8004800:	f024 0403 	bic.w	r4, r4, #3
 8004804:	42a0      	cmp	r0, r4
 8004806:	d005      	beq.n	8004814 <_malloc_r+0xa8>
 8004808:	1a21      	subs	r1, r4, r0
 800480a:	4630      	mov	r0, r6
 800480c:	f000 fc64 	bl	80050d8 <_sbrk_r>
 8004810:	3001      	adds	r0, #1
 8004812:	d0cf      	beq.n	80047b4 <_malloc_r+0x48>
 8004814:	6025      	str	r5, [r4, #0]
 8004816:	e7db      	b.n	80047d0 <_malloc_r+0x64>
 8004818:	20000200 	.word	0x20000200
 800481c:	20000204 	.word	0x20000204

08004820 <__cvt>:
 8004820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004824:	ec55 4b10 	vmov	r4, r5, d0
 8004828:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800482a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800482e:	2d00      	cmp	r5, #0
 8004830:	460e      	mov	r6, r1
 8004832:	4691      	mov	r9, r2
 8004834:	4619      	mov	r1, r3
 8004836:	bfb8      	it	lt
 8004838:	4622      	movlt	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	f027 0720 	bic.w	r7, r7, #32
 8004840:	bfbb      	ittet	lt
 8004842:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004846:	461d      	movlt	r5, r3
 8004848:	2300      	movge	r3, #0
 800484a:	232d      	movlt	r3, #45	; 0x2d
 800484c:	bfb8      	it	lt
 800484e:	4614      	movlt	r4, r2
 8004850:	2f46      	cmp	r7, #70	; 0x46
 8004852:	700b      	strb	r3, [r1, #0]
 8004854:	d004      	beq.n	8004860 <__cvt+0x40>
 8004856:	2f45      	cmp	r7, #69	; 0x45
 8004858:	d100      	bne.n	800485c <__cvt+0x3c>
 800485a:	3601      	adds	r6, #1
 800485c:	2102      	movs	r1, #2
 800485e:	e000      	b.n	8004862 <__cvt+0x42>
 8004860:	2103      	movs	r1, #3
 8004862:	ab03      	add	r3, sp, #12
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	ab02      	add	r3, sp, #8
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	4632      	mov	r2, r6
 800486c:	4653      	mov	r3, sl
 800486e:	ec45 4b10 	vmov	d0, r4, r5
 8004872:	f000 fced 	bl	8005250 <_dtoa_r>
 8004876:	2f47      	cmp	r7, #71	; 0x47
 8004878:	4680      	mov	r8, r0
 800487a:	d102      	bne.n	8004882 <__cvt+0x62>
 800487c:	f019 0f01 	tst.w	r9, #1
 8004880:	d026      	beq.n	80048d0 <__cvt+0xb0>
 8004882:	2f46      	cmp	r7, #70	; 0x46
 8004884:	eb08 0906 	add.w	r9, r8, r6
 8004888:	d111      	bne.n	80048ae <__cvt+0x8e>
 800488a:	f898 3000 	ldrb.w	r3, [r8]
 800488e:	2b30      	cmp	r3, #48	; 0x30
 8004890:	d10a      	bne.n	80048a8 <__cvt+0x88>
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	4620      	mov	r0, r4
 8004898:	4629      	mov	r1, r5
 800489a:	f7fc f91d 	bl	8000ad8 <__aeabi_dcmpeq>
 800489e:	b918      	cbnz	r0, 80048a8 <__cvt+0x88>
 80048a0:	f1c6 0601 	rsb	r6, r6, #1
 80048a4:	f8ca 6000 	str.w	r6, [sl]
 80048a8:	f8da 3000 	ldr.w	r3, [sl]
 80048ac:	4499      	add	r9, r3
 80048ae:	2200      	movs	r2, #0
 80048b0:	2300      	movs	r3, #0
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fc f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ba:	b938      	cbnz	r0, 80048cc <__cvt+0xac>
 80048bc:	2230      	movs	r2, #48	; 0x30
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	454b      	cmp	r3, r9
 80048c2:	d205      	bcs.n	80048d0 <__cvt+0xb0>
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	9103      	str	r1, [sp, #12]
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e7f8      	b.n	80048be <__cvt+0x9e>
 80048cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d4:	eba3 0308 	sub.w	r3, r3, r8
 80048d8:	4640      	mov	r0, r8
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	b004      	add	sp, #16
 80048de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080048e2 <__exponent>:
 80048e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e4:	2900      	cmp	r1, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	bfba      	itte	lt
 80048ea:	4249      	neglt	r1, r1
 80048ec:	232d      	movlt	r3, #45	; 0x2d
 80048ee:	232b      	movge	r3, #43	; 0x2b
 80048f0:	2909      	cmp	r1, #9
 80048f2:	f804 2b02 	strb.w	r2, [r4], #2
 80048f6:	7043      	strb	r3, [r0, #1]
 80048f8:	dd20      	ble.n	800493c <__exponent+0x5a>
 80048fa:	f10d 0307 	add.w	r3, sp, #7
 80048fe:	461f      	mov	r7, r3
 8004900:	260a      	movs	r6, #10
 8004902:	fb91 f5f6 	sdiv	r5, r1, r6
 8004906:	fb06 1115 	mls	r1, r6, r5, r1
 800490a:	3130      	adds	r1, #48	; 0x30
 800490c:	2d09      	cmp	r5, #9
 800490e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004912:	f103 32ff 	add.w	r2, r3, #4294967295
 8004916:	4629      	mov	r1, r5
 8004918:	dc09      	bgt.n	800492e <__exponent+0x4c>
 800491a:	3130      	adds	r1, #48	; 0x30
 800491c:	3b02      	subs	r3, #2
 800491e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004922:	42bb      	cmp	r3, r7
 8004924:	4622      	mov	r2, r4
 8004926:	d304      	bcc.n	8004932 <__exponent+0x50>
 8004928:	1a10      	subs	r0, r2, r0
 800492a:	b003      	add	sp, #12
 800492c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492e:	4613      	mov	r3, r2
 8004930:	e7e7      	b.n	8004902 <__exponent+0x20>
 8004932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004936:	f804 2b01 	strb.w	r2, [r4], #1
 800493a:	e7f2      	b.n	8004922 <__exponent+0x40>
 800493c:	2330      	movs	r3, #48	; 0x30
 800493e:	4419      	add	r1, r3
 8004940:	7083      	strb	r3, [r0, #2]
 8004942:	1d02      	adds	r2, r0, #4
 8004944:	70c1      	strb	r1, [r0, #3]
 8004946:	e7ef      	b.n	8004928 <__exponent+0x46>

08004948 <_printf_float>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	b08d      	sub	sp, #52	; 0x34
 800494e:	460c      	mov	r4, r1
 8004950:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004954:	4616      	mov	r6, r2
 8004956:	461f      	mov	r7, r3
 8004958:	4605      	mov	r5, r0
 800495a:	f001 fa31 	bl	8005dc0 <_localeconv_r>
 800495e:	6803      	ldr	r3, [r0, #0]
 8004960:	9304      	str	r3, [sp, #16]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fc3c 	bl	80001e0 <strlen>
 8004968:	2300      	movs	r3, #0
 800496a:	930a      	str	r3, [sp, #40]	; 0x28
 800496c:	f8d8 3000 	ldr.w	r3, [r8]
 8004970:	9005      	str	r0, [sp, #20]
 8004972:	3307      	adds	r3, #7
 8004974:	f023 0307 	bic.w	r3, r3, #7
 8004978:	f103 0208 	add.w	r2, r3, #8
 800497c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004980:	f8d4 b000 	ldr.w	fp, [r4]
 8004984:	f8c8 2000 	str.w	r2, [r8]
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004990:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004994:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f8cd 8018 	str.w	r8, [sp, #24]
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	4ba7      	ldr	r3, [pc, #668]	; (8004c40 <_printf_float+0x2f8>)
 80049a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049a8:	f7fc f8c8 	bl	8000b3c <__aeabi_dcmpun>
 80049ac:	bb70      	cbnz	r0, 8004a0c <_printf_float+0xc4>
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	4ba3      	ldr	r3, [pc, #652]	; (8004c40 <_printf_float+0x2f8>)
 80049b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049b8:	f7fc f8a2 	bl	8000b00 <__aeabi_dcmple>
 80049bc:	bb30      	cbnz	r0, 8004a0c <_printf_float+0xc4>
 80049be:	2200      	movs	r2, #0
 80049c0:	2300      	movs	r3, #0
 80049c2:	4640      	mov	r0, r8
 80049c4:	4649      	mov	r1, r9
 80049c6:	f7fc f891 	bl	8000aec <__aeabi_dcmplt>
 80049ca:	b110      	cbz	r0, 80049d2 <_printf_float+0x8a>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	4a9c      	ldr	r2, [pc, #624]	; (8004c44 <_printf_float+0x2fc>)
 80049d4:	4b9c      	ldr	r3, [pc, #624]	; (8004c48 <_printf_float+0x300>)
 80049d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80049da:	bf8c      	ite	hi
 80049dc:	4690      	movhi	r8, r2
 80049de:	4698      	movls	r8, r3
 80049e0:	2303      	movs	r3, #3
 80049e2:	f02b 0204 	bic.w	r2, fp, #4
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	f04f 0900 	mov.w	r9, #0
 80049ee:	9700      	str	r7, [sp, #0]
 80049f0:	4633      	mov	r3, r6
 80049f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f9e6 	bl	8004dc8 <_printf_common>
 80049fc:	3001      	adds	r0, #1
 80049fe:	f040 808d 	bne.w	8004b1c <_printf_float+0x1d4>
 8004a02:	f04f 30ff 	mov.w	r0, #4294967295
 8004a06:	b00d      	add	sp, #52	; 0x34
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	f7fc f892 	bl	8000b3c <__aeabi_dcmpun>
 8004a18:	b110      	cbz	r0, 8004a20 <_printf_float+0xd8>
 8004a1a:	4a8c      	ldr	r2, [pc, #560]	; (8004c4c <_printf_float+0x304>)
 8004a1c:	4b8c      	ldr	r3, [pc, #560]	; (8004c50 <_printf_float+0x308>)
 8004a1e:	e7da      	b.n	80049d6 <_printf_float+0x8e>
 8004a20:	6861      	ldr	r1, [r4, #4]
 8004a22:	1c4b      	adds	r3, r1, #1
 8004a24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004a28:	a80a      	add	r0, sp, #40	; 0x28
 8004a2a:	d13e      	bne.n	8004aaa <_printf_float+0x162>
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	2300      	movs	r3, #0
 8004a32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004a36:	ab09      	add	r3, sp, #36	; 0x24
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	ec49 8b10 	vmov	d0, r8, r9
 8004a3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	f8cd a004 	str.w	sl, [sp, #4]
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f7ff fee8 	bl	8004820 <__cvt>
 8004a50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004a54:	2b47      	cmp	r3, #71	; 0x47
 8004a56:	4680      	mov	r8, r0
 8004a58:	d109      	bne.n	8004a6e <_printf_float+0x126>
 8004a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5c:	1cd8      	adds	r0, r3, #3
 8004a5e:	db02      	blt.n	8004a66 <_printf_float+0x11e>
 8004a60:	6862      	ldr	r2, [r4, #4]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	dd47      	ble.n	8004af6 <_printf_float+0x1ae>
 8004a66:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a6a:	fa5f fa8a 	uxtb.w	sl, sl
 8004a6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a74:	d824      	bhi.n	8004ac0 <_printf_float+0x178>
 8004a76:	3901      	subs	r1, #1
 8004a78:	4652      	mov	r2, sl
 8004a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a7e:	9109      	str	r1, [sp, #36]	; 0x24
 8004a80:	f7ff ff2f 	bl	80048e2 <__exponent>
 8004a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a86:	1813      	adds	r3, r2, r0
 8004a88:	2a01      	cmp	r2, #1
 8004a8a:	4681      	mov	r9, r0
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	dc02      	bgt.n	8004a96 <_printf_float+0x14e>
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	07d1      	lsls	r1, r2, #31
 8004a94:	d501      	bpl.n	8004a9a <_printf_float+0x152>
 8004a96:	3301      	adds	r3, #1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0a5      	beq.n	80049ee <_printf_float+0xa6>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	e7a1      	b.n	80049ee <_printf_float+0xa6>
 8004aaa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004aae:	f000 8177 	beq.w	8004da0 <_printf_float+0x458>
 8004ab2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ab6:	d1bb      	bne.n	8004a30 <_printf_float+0xe8>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d1b9      	bne.n	8004a30 <_printf_float+0xe8>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e7b6      	b.n	8004a2e <_printf_float+0xe6>
 8004ac0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004ac4:	d119      	bne.n	8004afa <_printf_float+0x1b2>
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	dd0c      	ble.n	8004ae6 <_printf_float+0x19e>
 8004acc:	6121      	str	r1, [r4, #16]
 8004ace:	b913      	cbnz	r3, 8004ad6 <_printf_float+0x18e>
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	07d2      	lsls	r2, r2, #31
 8004ad4:	d502      	bpl.n	8004adc <_printf_float+0x194>
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	440b      	add	r3, r1
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ade:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ae0:	f04f 0900 	mov.w	r9, #0
 8004ae4:	e7d9      	b.n	8004a9a <_printf_float+0x152>
 8004ae6:	b913      	cbnz	r3, 8004aee <_printf_float+0x1a6>
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	07d0      	lsls	r0, r2, #31
 8004aec:	d501      	bpl.n	8004af2 <_printf_float+0x1aa>
 8004aee:	3302      	adds	r3, #2
 8004af0:	e7f3      	b.n	8004ada <_printf_float+0x192>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7f1      	b.n	8004ada <_printf_float+0x192>
 8004af6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004afa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004afe:	4293      	cmp	r3, r2
 8004b00:	db05      	blt.n	8004b0e <_printf_float+0x1c6>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	6123      	str	r3, [r4, #16]
 8004b06:	07d1      	lsls	r1, r2, #31
 8004b08:	d5e8      	bpl.n	8004adc <_printf_float+0x194>
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	e7e5      	b.n	8004ada <_printf_float+0x192>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfd4      	ite	le
 8004b12:	f1c3 0302 	rsble	r3, r3, #2
 8004b16:	2301      	movgt	r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	e7de      	b.n	8004ada <_printf_float+0x192>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	055a      	lsls	r2, r3, #21
 8004b20:	d407      	bmi.n	8004b32 <_printf_float+0x1ea>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	4642      	mov	r2, r8
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d12b      	bne.n	8004b88 <_printf_float+0x240>
 8004b30:	e767      	b.n	8004a02 <_printf_float+0xba>
 8004b32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b36:	f240 80dc 	bls.w	8004cf2 <_printf_float+0x3aa>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b42:	f7fb ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d033      	beq.n	8004bb2 <_printf_float+0x26a>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <_printf_float+0x30c>)
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	f43f af54 	beq.w	8004a02 <_printf_float+0xba>
 8004b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	db02      	blt.n	8004b68 <_printf_float+0x220>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	07d8      	lsls	r0, r3, #31
 8004b66:	d50f      	bpl.n	8004b88 <_printf_float+0x240>
 8004b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af45 	beq.w	8004a02 <_printf_float+0xba>
 8004b78:	f04f 0800 	mov.w	r8, #0
 8004b7c:	f104 091a 	add.w	r9, r4, #26
 8004b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4543      	cmp	r3, r8
 8004b86:	dc09      	bgt.n	8004b9c <_printf_float+0x254>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	079b      	lsls	r3, r3, #30
 8004b8c:	f100 8103 	bmi.w	8004d96 <_printf_float+0x44e>
 8004b90:	68e0      	ldr	r0, [r4, #12]
 8004b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b94:	4298      	cmp	r0, r3
 8004b96:	bfb8      	it	lt
 8004b98:	4618      	movlt	r0, r3
 8004b9a:	e734      	b.n	8004a06 <_printf_float+0xbe>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	464a      	mov	r2, r9
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f43f af2b 	beq.w	8004a02 <_printf_float+0xba>
 8004bac:	f108 0801 	add.w	r8, r8, #1
 8004bb0:	e7e6      	b.n	8004b80 <_printf_float+0x238>
 8004bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dc2b      	bgt.n	8004c10 <_printf_float+0x2c8>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4a26      	ldr	r2, [pc, #152]	; (8004c54 <_printf_float+0x30c>)
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f af1d 	beq.w	8004a02 <_printf_float+0xba>
 8004bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bca:	b923      	cbnz	r3, 8004bd6 <_printf_float+0x28e>
 8004bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bce:	b913      	cbnz	r3, 8004bd6 <_printf_float+0x28e>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d5d8      	bpl.n	8004b88 <_printf_float+0x240>
 8004bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f af0e 	beq.w	8004a02 <_printf_float+0xba>
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	f104 0a1a 	add.w	sl, r4, #26
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	454b      	cmp	r3, r9
 8004bf4:	dc01      	bgt.n	8004bfa <_printf_float+0x2b2>
 8004bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf8:	e794      	b.n	8004b24 <_printf_float+0x1dc>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4652      	mov	r2, sl
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f aefc 	beq.w	8004a02 <_printf_float+0xba>
 8004c0a:	f109 0901 	add.w	r9, r9, #1
 8004c0e:	e7ee      	b.n	8004bee <_printf_float+0x2a6>
 8004c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c14:	429a      	cmp	r2, r3
 8004c16:	bfa8      	it	ge
 8004c18:	461a      	movge	r2, r3
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	4691      	mov	r9, r2
 8004c1e:	dd07      	ble.n	8004c30 <_printf_float+0x2e8>
 8004c20:	4613      	mov	r3, r2
 8004c22:	4631      	mov	r1, r6
 8004c24:	4642      	mov	r2, r8
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f aee9 	beq.w	8004a02 <_printf_float+0xba>
 8004c30:	f104 031a 	add.w	r3, r4, #26
 8004c34:	f04f 0b00 	mov.w	fp, #0
 8004c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c3c:	9306      	str	r3, [sp, #24]
 8004c3e:	e015      	b.n	8004c6c <_printf_float+0x324>
 8004c40:	7fefffff 	.word	0x7fefffff
 8004c44:	080067b0 	.word	0x080067b0
 8004c48:	080067ac 	.word	0x080067ac
 8004c4c:	080067b8 	.word	0x080067b8
 8004c50:	080067b4 	.word	0x080067b4
 8004c54:	080067bc 	.word	0x080067bc
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9a06      	ldr	r2, [sp, #24]
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	f43f aecd 	beq.w	8004a02 <_printf_float+0xba>
 8004c68:	f10b 0b01 	add.w	fp, fp, #1
 8004c6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c70:	ebaa 0309 	sub.w	r3, sl, r9
 8004c74:	455b      	cmp	r3, fp
 8004c76:	dcef      	bgt.n	8004c58 <_printf_float+0x310>
 8004c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	44d0      	add	r8, sl
 8004c80:	db15      	blt.n	8004cae <_printf_float+0x366>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	07da      	lsls	r2, r3, #31
 8004c86:	d412      	bmi.n	8004cae <_printf_float+0x366>
 8004c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c8c:	eba3 020a 	sub.w	r2, r3, sl
 8004c90:	eba3 0a01 	sub.w	sl, r3, r1
 8004c94:	4592      	cmp	sl, r2
 8004c96:	bfa8      	it	ge
 8004c98:	4692      	movge	sl, r2
 8004c9a:	f1ba 0f00 	cmp.w	sl, #0
 8004c9e:	dc0e      	bgt.n	8004cbe <_printf_float+0x376>
 8004ca0:	f04f 0800 	mov.w	r8, #0
 8004ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ca8:	f104 091a 	add.w	r9, r4, #26
 8004cac:	e019      	b.n	8004ce2 <_printf_float+0x39a>
 8004cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d1e5      	bne.n	8004c88 <_printf_float+0x340>
 8004cbc:	e6a1      	b.n	8004a02 <_printf_float+0xba>
 8004cbe:	4653      	mov	r3, sl
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1e9      	bne.n	8004ca0 <_printf_float+0x358>
 8004ccc:	e699      	b.n	8004a02 <_printf_float+0xba>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	464a      	mov	r2, r9
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f ae92 	beq.w	8004a02 <_printf_float+0xba>
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	eba3 030a 	sub.w	r3, r3, sl
 8004cec:	4543      	cmp	r3, r8
 8004cee:	dcee      	bgt.n	8004cce <_printf_float+0x386>
 8004cf0:	e74a      	b.n	8004b88 <_printf_float+0x240>
 8004cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf4:	2a01      	cmp	r2, #1
 8004cf6:	dc01      	bgt.n	8004cfc <_printf_float+0x3b4>
 8004cf8:	07db      	lsls	r3, r3, #31
 8004cfa:	d53a      	bpl.n	8004d72 <_printf_float+0x42a>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4642      	mov	r2, r8
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f ae7b 	beq.w	8004a02 <_printf_float+0xba>
 8004d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f108 0801 	add.w	r8, r8, #1
 8004d1c:	f43f ae71 	beq.w	8004a02 <_printf_float+0xba>
 8004d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d22:	2200      	movs	r2, #0
 8004d24:	f103 3aff 	add.w	sl, r3, #4294967295
 8004d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f7fb fed3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d32:	b9c8      	cbnz	r0, 8004d68 <_printf_float+0x420>
 8004d34:	4653      	mov	r3, sl
 8004d36:	4642      	mov	r2, r8
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d10e      	bne.n	8004d60 <_printf_float+0x418>
 8004d42:	e65e      	b.n	8004a02 <_printf_float+0xba>
 8004d44:	2301      	movs	r3, #1
 8004d46:	4652      	mov	r2, sl
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f43f ae57 	beq.w	8004a02 <_printf_float+0xba>
 8004d54:	f108 0801 	add.w	r8, r8, #1
 8004d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4543      	cmp	r3, r8
 8004d5e:	dcf1      	bgt.n	8004d44 <_printf_float+0x3fc>
 8004d60:	464b      	mov	r3, r9
 8004d62:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d66:	e6de      	b.n	8004b26 <_printf_float+0x1de>
 8004d68:	f04f 0800 	mov.w	r8, #0
 8004d6c:	f104 0a1a 	add.w	sl, r4, #26
 8004d70:	e7f2      	b.n	8004d58 <_printf_float+0x410>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e7df      	b.n	8004d36 <_printf_float+0x3ee>
 8004d76:	2301      	movs	r3, #1
 8004d78:	464a      	mov	r2, r9
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae3e 	beq.w	8004a02 <_printf_float+0xba>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	4543      	cmp	r3, r8
 8004d92:	dcf0      	bgt.n	8004d76 <_printf_float+0x42e>
 8004d94:	e6fc      	b.n	8004b90 <_printf_float+0x248>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	f104 0919 	add.w	r9, r4, #25
 8004d9e:	e7f4      	b.n	8004d8a <_printf_float+0x442>
 8004da0:	2900      	cmp	r1, #0
 8004da2:	f43f ae8b 	beq.w	8004abc <_printf_float+0x174>
 8004da6:	2300      	movs	r3, #0
 8004da8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004dac:	ab09      	add	r3, sp, #36	; 0x24
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	ec49 8b10 	vmov	d0, r8, r9
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	f8cd a004 	str.w	sl, [sp, #4]
 8004dba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7ff fd2e 	bl	8004820 <__cvt>
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	e648      	b.n	8004a5a <_printf_float+0x112>

08004dc8 <_printf_common>:
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	4691      	mov	r9, r2
 8004dce:	461f      	mov	r7, r3
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	690b      	ldr	r3, [r1, #16]
 8004dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bfb8      	it	lt
 8004ddc:	4613      	movlt	r3, r2
 8004dde:	f8c9 3000 	str.w	r3, [r9]
 8004de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	b112      	cbz	r2, 8004df2 <_printf_common+0x2a>
 8004dec:	3301      	adds	r3, #1
 8004dee:	f8c9 3000 	str.w	r3, [r9]
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	0699      	lsls	r1, r3, #26
 8004df6:	bf42      	ittt	mi
 8004df8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004dfc:	3302      	addmi	r3, #2
 8004dfe:	f8c9 3000 	strmi.w	r3, [r9]
 8004e02:	6825      	ldr	r5, [r4, #0]
 8004e04:	f015 0506 	ands.w	r5, r5, #6
 8004e08:	d107      	bne.n	8004e1a <_printf_common+0x52>
 8004e0a:	f104 0a19 	add.w	sl, r4, #25
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	f8d9 2000 	ldr.w	r2, [r9]
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	42ab      	cmp	r3, r5
 8004e18:	dc28      	bgt.n	8004e6c <_printf_common+0xa4>
 8004e1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	3300      	adds	r3, #0
 8004e22:	bf18      	it	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	0692      	lsls	r2, r2, #26
 8004e28:	d42d      	bmi.n	8004e86 <_printf_common+0xbe>
 8004e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e2e:	4639      	mov	r1, r7
 8004e30:	4630      	mov	r0, r6
 8004e32:	47c0      	blx	r8
 8004e34:	3001      	adds	r0, #1
 8004e36:	d020      	beq.n	8004e7a <_printf_common+0xb2>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	68e5      	ldr	r5, [r4, #12]
 8004e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e40:	f003 0306 	and.w	r3, r3, #6
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	bf08      	it	eq
 8004e48:	1aad      	subeq	r5, r5, r2
 8004e4a:	68a3      	ldr	r3, [r4, #8]
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	f04f 0900 	mov.w	r9, #0
 8004e62:	341a      	adds	r4, #26
 8004e64:	454d      	cmp	r5, r9
 8004e66:	d11a      	bne.n	8004e9e <_printf_common+0xd6>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e008      	b.n	8004e7e <_printf_common+0xb6>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4652      	mov	r2, sl
 8004e70:	4639      	mov	r1, r7
 8004e72:	4630      	mov	r0, r6
 8004e74:	47c0      	blx	r8
 8004e76:	3001      	adds	r0, #1
 8004e78:	d103      	bne.n	8004e82 <_printf_common+0xba>
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	3501      	adds	r5, #1
 8004e84:	e7c3      	b.n	8004e0e <_printf_common+0x46>
 8004e86:	18e1      	adds	r1, r4, r3
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	2030      	movs	r0, #48	; 0x30
 8004e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e90:	4422      	add	r2, r4
 8004e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	e7c5      	b.n	8004e2a <_printf_common+0x62>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	47c0      	blx	r8
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d0e6      	beq.n	8004e7a <_printf_common+0xb2>
 8004eac:	f109 0901 	add.w	r9, r9, #1
 8004eb0:	e7d8      	b.n	8004e64 <_printf_common+0x9c>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	7e09      	ldrb	r1, [r1, #24]
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	296e      	cmp	r1, #110	; 0x6e
 8004ec4:	4617      	mov	r7, r2
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	4698      	mov	r8, r3
 8004eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ecc:	f000 80b3 	beq.w	8005036 <_printf_i+0x182>
 8004ed0:	d822      	bhi.n	8004f18 <_printf_i+0x64>
 8004ed2:	2963      	cmp	r1, #99	; 0x63
 8004ed4:	d036      	beq.n	8004f44 <_printf_i+0x90>
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x3a>
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	f000 80b9 	beq.w	8005050 <_printf_i+0x19c>
 8004ede:	2958      	cmp	r1, #88	; 0x58
 8004ee0:	f000 8083 	beq.w	8004fea <_printf_i+0x136>
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004eec:	e032      	b.n	8004f54 <_printf_i+0xa0>
 8004eee:	2964      	cmp	r1, #100	; 0x64
 8004ef0:	d001      	beq.n	8004ef6 <_printf_i+0x42>
 8004ef2:	2969      	cmp	r1, #105	; 0x69
 8004ef4:	d1f6      	bne.n	8004ee4 <_printf_i+0x30>
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	0605      	lsls	r5, r0, #24
 8004efc:	f103 0104 	add.w	r1, r3, #4
 8004f00:	d52a      	bpl.n	8004f58 <_printf_i+0xa4>
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da03      	bge.n	8004f12 <_printf_i+0x5e>
 8004f0a:	222d      	movs	r2, #45	; 0x2d
 8004f0c:	425b      	negs	r3, r3
 8004f0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f12:	486f      	ldr	r0, [pc, #444]	; (80050d0 <_printf_i+0x21c>)
 8004f14:	220a      	movs	r2, #10
 8004f16:	e039      	b.n	8004f8c <_printf_i+0xd8>
 8004f18:	2973      	cmp	r1, #115	; 0x73
 8004f1a:	f000 809d 	beq.w	8005058 <_printf_i+0x1a4>
 8004f1e:	d808      	bhi.n	8004f32 <_printf_i+0x7e>
 8004f20:	296f      	cmp	r1, #111	; 0x6f
 8004f22:	d020      	beq.n	8004f66 <_printf_i+0xb2>
 8004f24:	2970      	cmp	r1, #112	; 0x70
 8004f26:	d1dd      	bne.n	8004ee4 <_printf_i+0x30>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	f043 0320 	orr.w	r3, r3, #32
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	e003      	b.n	8004f3a <_printf_i+0x86>
 8004f32:	2975      	cmp	r1, #117	; 0x75
 8004f34:	d017      	beq.n	8004f66 <_printf_i+0xb2>
 8004f36:	2978      	cmp	r1, #120	; 0x78
 8004f38:	d1d4      	bne.n	8004ee4 <_printf_i+0x30>
 8004f3a:	2378      	movs	r3, #120	; 0x78
 8004f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f40:	4864      	ldr	r0, [pc, #400]	; (80050d4 <_printf_i+0x220>)
 8004f42:	e055      	b.n	8004ff0 <_printf_i+0x13c>
 8004f44:	6813      	ldr	r3, [r2, #0]
 8004f46:	1d19      	adds	r1, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6011      	str	r1, [r2, #0]
 8004f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f54:	2301      	movs	r3, #1
 8004f56:	e08c      	b.n	8005072 <_printf_i+0x1be>
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6011      	str	r1, [r2, #0]
 8004f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f60:	bf18      	it	ne
 8004f62:	b21b      	sxthne	r3, r3
 8004f64:	e7cf      	b.n	8004f06 <_printf_i+0x52>
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	1d18      	adds	r0, r3, #4
 8004f6c:	6010      	str	r0, [r2, #0]
 8004f6e:	0628      	lsls	r0, r5, #24
 8004f70:	d501      	bpl.n	8004f76 <_printf_i+0xc2>
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	e002      	b.n	8004f7c <_printf_i+0xc8>
 8004f76:	0668      	lsls	r0, r5, #25
 8004f78:	d5fb      	bpl.n	8004f72 <_printf_i+0xbe>
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	4854      	ldr	r0, [pc, #336]	; (80050d0 <_printf_i+0x21c>)
 8004f7e:	296f      	cmp	r1, #111	; 0x6f
 8004f80:	bf14      	ite	ne
 8004f82:	220a      	movne	r2, #10
 8004f84:	2208      	moveq	r2, #8
 8004f86:	2100      	movs	r1, #0
 8004f88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f8c:	6865      	ldr	r5, [r4, #4]
 8004f8e:	60a5      	str	r5, [r4, #8]
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	f2c0 8095 	blt.w	80050c0 <_printf_i+0x20c>
 8004f96:	6821      	ldr	r1, [r4, #0]
 8004f98:	f021 0104 	bic.w	r1, r1, #4
 8004f9c:	6021      	str	r1, [r4, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d13d      	bne.n	800501e <_printf_i+0x16a>
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	f040 808e 	bne.w	80050c4 <_printf_i+0x210>
 8004fa8:	4665      	mov	r5, ip
 8004faa:	2a08      	cmp	r2, #8
 8004fac:	d10b      	bne.n	8004fc6 <_printf_i+0x112>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07db      	lsls	r3, r3, #31
 8004fb2:	d508      	bpl.n	8004fc6 <_printf_i+0x112>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bfde      	ittt	le
 8004fbc:	2330      	movle	r3, #48	; 0x30
 8004fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fc6:	ebac 0305 	sub.w	r3, ip, r5
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	f8cd 8000 	str.w	r8, [sp]
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	aa03      	add	r2, sp, #12
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f7ff fef6 	bl	8004dc8 <_printf_common>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d14d      	bne.n	800507c <_printf_i+0x1c8>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	b005      	add	sp, #20
 8004fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fea:	4839      	ldr	r0, [pc, #228]	; (80050d0 <_printf_i+0x21c>)
 8004fec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	1d1d      	adds	r5, r3, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6015      	str	r5, [r2, #0]
 8004ffa:	060a      	lsls	r2, r1, #24
 8004ffc:	d50b      	bpl.n	8005016 <_printf_i+0x162>
 8004ffe:	07ca      	lsls	r2, r1, #31
 8005000:	bf44      	itt	mi
 8005002:	f041 0120 	orrmi.w	r1, r1, #32
 8005006:	6021      	strmi	r1, [r4, #0]
 8005008:	b91b      	cbnz	r3, 8005012 <_printf_i+0x15e>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	f022 0220 	bic.w	r2, r2, #32
 8005010:	6022      	str	r2, [r4, #0]
 8005012:	2210      	movs	r2, #16
 8005014:	e7b7      	b.n	8004f86 <_printf_i+0xd2>
 8005016:	064d      	lsls	r5, r1, #25
 8005018:	bf48      	it	mi
 800501a:	b29b      	uxthmi	r3, r3
 800501c:	e7ef      	b.n	8004ffe <_printf_i+0x14a>
 800501e:	4665      	mov	r5, ip
 8005020:	fbb3 f1f2 	udiv	r1, r3, r2
 8005024:	fb02 3311 	mls	r3, r2, r1, r3
 8005028:	5cc3      	ldrb	r3, [r0, r3]
 800502a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800502e:	460b      	mov	r3, r1
 8005030:	2900      	cmp	r1, #0
 8005032:	d1f5      	bne.n	8005020 <_printf_i+0x16c>
 8005034:	e7b9      	b.n	8004faa <_printf_i+0xf6>
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	6961      	ldr	r1, [r4, #20]
 800503c:	1d18      	adds	r0, r3, #4
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	0628      	lsls	r0, r5, #24
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	d501      	bpl.n	800504a <_printf_i+0x196>
 8005046:	6019      	str	r1, [r3, #0]
 8005048:	e002      	b.n	8005050 <_printf_i+0x19c>
 800504a:	066a      	lsls	r2, r5, #25
 800504c:	d5fb      	bpl.n	8005046 <_printf_i+0x192>
 800504e:	8019      	strh	r1, [r3, #0]
 8005050:	2300      	movs	r3, #0
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	4665      	mov	r5, ip
 8005056:	e7b9      	b.n	8004fcc <_printf_i+0x118>
 8005058:	6813      	ldr	r3, [r2, #0]
 800505a:	1d19      	adds	r1, r3, #4
 800505c:	6011      	str	r1, [r2, #0]
 800505e:	681d      	ldr	r5, [r3, #0]
 8005060:	6862      	ldr	r2, [r4, #4]
 8005062:	2100      	movs	r1, #0
 8005064:	4628      	mov	r0, r5
 8005066:	f7fb f8c3 	bl	80001f0 <memchr>
 800506a:	b108      	cbz	r0, 8005070 <_printf_i+0x1bc>
 800506c:	1b40      	subs	r0, r0, r5
 800506e:	6060      	str	r0, [r4, #4]
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	2300      	movs	r3, #0
 8005076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507a:	e7a7      	b.n	8004fcc <_printf_i+0x118>
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	462a      	mov	r2, r5
 8005080:	4639      	mov	r1, r7
 8005082:	4630      	mov	r0, r6
 8005084:	47c0      	blx	r8
 8005086:	3001      	adds	r0, #1
 8005088:	d0aa      	beq.n	8004fe0 <_printf_i+0x12c>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	079b      	lsls	r3, r3, #30
 800508e:	d413      	bmi.n	80050b8 <_printf_i+0x204>
 8005090:	68e0      	ldr	r0, [r4, #12]
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	4298      	cmp	r0, r3
 8005096:	bfb8      	it	lt
 8005098:	4618      	movlt	r0, r3
 800509a:	e7a3      	b.n	8004fe4 <_printf_i+0x130>
 800509c:	2301      	movs	r3, #1
 800509e:	464a      	mov	r2, r9
 80050a0:	4639      	mov	r1, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	47c0      	blx	r8
 80050a6:	3001      	adds	r0, #1
 80050a8:	d09a      	beq.n	8004fe0 <_printf_i+0x12c>
 80050aa:	3501      	adds	r5, #1
 80050ac:	68e3      	ldr	r3, [r4, #12]
 80050ae:	9a03      	ldr	r2, [sp, #12]
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	42ab      	cmp	r3, r5
 80050b4:	dcf2      	bgt.n	800509c <_printf_i+0x1e8>
 80050b6:	e7eb      	b.n	8005090 <_printf_i+0x1dc>
 80050b8:	2500      	movs	r5, #0
 80050ba:	f104 0919 	add.w	r9, r4, #25
 80050be:	e7f5      	b.n	80050ac <_printf_i+0x1f8>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ac      	bne.n	800501e <_printf_i+0x16a>
 80050c4:	7803      	ldrb	r3, [r0, #0]
 80050c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ce:	e76c      	b.n	8004faa <_printf_i+0xf6>
 80050d0:	080067be 	.word	0x080067be
 80050d4:	080067cf 	.word	0x080067cf

080050d8 <_sbrk_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4c06      	ldr	r4, [pc, #24]	; (80050f4 <_sbrk_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4605      	mov	r5, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	f7fc fa84 	bl	80015f0 <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_sbrk_r+0x1a>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_sbrk_r+0x1a>
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	200002fc 	.word	0x200002fc

080050f8 <siprintf>:
 80050f8:	b40e      	push	{r1, r2, r3}
 80050fa:	b500      	push	{lr}
 80050fc:	b09c      	sub	sp, #112	; 0x70
 80050fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	9006      	str	r0, [sp, #24]
 8005104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005108:	4809      	ldr	r0, [pc, #36]	; (8005130 <siprintf+0x38>)
 800510a:	9107      	str	r1, [sp, #28]
 800510c:	9104      	str	r1, [sp, #16]
 800510e:	4909      	ldr	r1, [pc, #36]	; (8005134 <siprintf+0x3c>)
 8005110:	f853 2b04 	ldr.w	r2, [r3], #4
 8005114:	9105      	str	r1, [sp, #20]
 8005116:	6800      	ldr	r0, [r0, #0]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	a902      	add	r1, sp, #8
 800511c:	f001 f9ae 	bl	800647c <_svfiprintf_r>
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	b01c      	add	sp, #112	; 0x70
 8005128:	f85d eb04 	ldr.w	lr, [sp], #4
 800512c:	b003      	add	sp, #12
 800512e:	4770      	bx	lr
 8005130:	2000000c 	.word	0x2000000c
 8005134:	ffff0208 	.word	0xffff0208

08005138 <quorem>:
 8005138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	6903      	ldr	r3, [r0, #16]
 800513e:	690c      	ldr	r4, [r1, #16]
 8005140:	42a3      	cmp	r3, r4
 8005142:	4680      	mov	r8, r0
 8005144:	f2c0 8082 	blt.w	800524c <quorem+0x114>
 8005148:	3c01      	subs	r4, #1
 800514a:	f101 0714 	add.w	r7, r1, #20
 800514e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005152:	f100 0614 	add.w	r6, r0, #20
 8005156:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800515a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800515e:	eb06 030c 	add.w	r3, r6, ip
 8005162:	3501      	adds	r5, #1
 8005164:	eb07 090c 	add.w	r9, r7, ip
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	fbb0 f5f5 	udiv	r5, r0, r5
 800516e:	b395      	cbz	r5, 80051d6 <quorem+0x9e>
 8005170:	f04f 0a00 	mov.w	sl, #0
 8005174:	4638      	mov	r0, r7
 8005176:	46b6      	mov	lr, r6
 8005178:	46d3      	mov	fp, sl
 800517a:	f850 2b04 	ldr.w	r2, [r0], #4
 800517e:	b293      	uxth	r3, r2
 8005180:	fb05 a303 	mla	r3, r5, r3, sl
 8005184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005188:	b29b      	uxth	r3, r3
 800518a:	ebab 0303 	sub.w	r3, fp, r3
 800518e:	0c12      	lsrs	r2, r2, #16
 8005190:	f8de b000 	ldr.w	fp, [lr]
 8005194:	fb05 a202 	mla	r2, r5, r2, sl
 8005198:	fa13 f38b 	uxtah	r3, r3, fp
 800519c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80051a0:	fa1f fb82 	uxth.w	fp, r2
 80051a4:	f8de 2000 	ldr.w	r2, [lr]
 80051a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80051ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051b6:	4581      	cmp	r9, r0
 80051b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051bc:	f84e 3b04 	str.w	r3, [lr], #4
 80051c0:	d2db      	bcs.n	800517a <quorem+0x42>
 80051c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80051c6:	b933      	cbnz	r3, 80051d6 <quorem+0x9e>
 80051c8:	9b01      	ldr	r3, [sp, #4]
 80051ca:	3b04      	subs	r3, #4
 80051cc:	429e      	cmp	r6, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	d330      	bcc.n	8005234 <quorem+0xfc>
 80051d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80051d6:	4640      	mov	r0, r8
 80051d8:	f001 f822 	bl	8006220 <__mcmp>
 80051dc:	2800      	cmp	r0, #0
 80051de:	db25      	blt.n	800522c <quorem+0xf4>
 80051e0:	3501      	adds	r5, #1
 80051e2:	4630      	mov	r0, r6
 80051e4:	f04f 0c00 	mov.w	ip, #0
 80051e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80051ec:	f8d0 e000 	ldr.w	lr, [r0]
 80051f0:	b293      	uxth	r3, r2
 80051f2:	ebac 0303 	sub.w	r3, ip, r3
 80051f6:	0c12      	lsrs	r2, r2, #16
 80051f8:	fa13 f38e 	uxtah	r3, r3, lr
 80051fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005204:	b29b      	uxth	r3, r3
 8005206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800520a:	45b9      	cmp	r9, r7
 800520c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005210:	f840 3b04 	str.w	r3, [r0], #4
 8005214:	d2e8      	bcs.n	80051e8 <quorem+0xb0>
 8005216:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800521a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800521e:	b92a      	cbnz	r2, 800522c <quorem+0xf4>
 8005220:	3b04      	subs	r3, #4
 8005222:	429e      	cmp	r6, r3
 8005224:	461a      	mov	r2, r3
 8005226:	d30b      	bcc.n	8005240 <quorem+0x108>
 8005228:	f8c8 4010 	str.w	r4, [r8, #16]
 800522c:	4628      	mov	r0, r5
 800522e:	b003      	add	sp, #12
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	3b04      	subs	r3, #4
 8005238:	2a00      	cmp	r2, #0
 800523a:	d1ca      	bne.n	80051d2 <quorem+0x9a>
 800523c:	3c01      	subs	r4, #1
 800523e:	e7c5      	b.n	80051cc <quorem+0x94>
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	3b04      	subs	r3, #4
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1ef      	bne.n	8005228 <quorem+0xf0>
 8005248:	3c01      	subs	r4, #1
 800524a:	e7ea      	b.n	8005222 <quorem+0xea>
 800524c:	2000      	movs	r0, #0
 800524e:	e7ee      	b.n	800522e <quorem+0xf6>

08005250 <_dtoa_r>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	ec57 6b10 	vmov	r6, r7, d0
 8005258:	b097      	sub	sp, #92	; 0x5c
 800525a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800525c:	9106      	str	r1, [sp, #24]
 800525e:	4604      	mov	r4, r0
 8005260:	920b      	str	r2, [sp, #44]	; 0x2c
 8005262:	9312      	str	r3, [sp, #72]	; 0x48
 8005264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005268:	e9cd 6700 	strd	r6, r7, [sp]
 800526c:	b93d      	cbnz	r5, 800527e <_dtoa_r+0x2e>
 800526e:	2010      	movs	r0, #16
 8005270:	f7ff fa1e 	bl	80046b0 <malloc>
 8005274:	6260      	str	r0, [r4, #36]	; 0x24
 8005276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800527a:	6005      	str	r5, [r0, #0]
 800527c:	60c5      	str	r5, [r0, #12]
 800527e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	b151      	cbz	r1, 800529a <_dtoa_r+0x4a>
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	604a      	str	r2, [r1, #4]
 8005288:	2301      	movs	r3, #1
 800528a:	4093      	lsls	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 fde5 	bl	8005e5e <_Bfree>
 8005294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	1e3b      	subs	r3, r7, #0
 800529c:	bfbb      	ittet	lt
 800529e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	9301      	strlt	r3, [sp, #4]
 80052a4:	2300      	movge	r3, #0
 80052a6:	2201      	movlt	r2, #1
 80052a8:	bfac      	ite	ge
 80052aa:	f8c8 3000 	strge.w	r3, [r8]
 80052ae:	f8c8 2000 	strlt.w	r2, [r8]
 80052b2:	4baf      	ldr	r3, [pc, #700]	; (8005570 <_dtoa_r+0x320>)
 80052b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052b8:	ea33 0308 	bics.w	r3, r3, r8
 80052bc:	d114      	bne.n	80052e8 <_dtoa_r+0x98>
 80052be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	b923      	cbnz	r3, 80052d4 <_dtoa_r+0x84>
 80052ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f000 8542 	beq.w	8005d58 <_dtoa_r+0xb08>
 80052d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005584 <_dtoa_r+0x334>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8544 	beq.w	8005d68 <_dtoa_r+0xb18>
 80052e0:	f10b 0303 	add.w	r3, fp, #3
 80052e4:	f000 bd3e 	b.w	8005d64 <_dtoa_r+0xb14>
 80052e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2300      	movs	r3, #0
 80052f0:	4630      	mov	r0, r6
 80052f2:	4639      	mov	r1, r7
 80052f4:	f7fb fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f8:	4681      	mov	r9, r0
 80052fa:	b168      	cbz	r0, 8005318 <_dtoa_r+0xc8>
 80052fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052fe:	2301      	movs	r3, #1
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8524 	beq.w	8005d52 <_dtoa_r+0xb02>
 800530a:	4b9a      	ldr	r3, [pc, #616]	; (8005574 <_dtoa_r+0x324>)
 800530c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800530e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	f000 bd28 	b.w	8005d68 <_dtoa_r+0xb18>
 8005318:	aa14      	add	r2, sp, #80	; 0x50
 800531a:	a915      	add	r1, sp, #84	; 0x54
 800531c:	ec47 6b10 	vmov	d0, r6, r7
 8005320:	4620      	mov	r0, r4
 8005322:	f000 fff4 	bl	800630e <__d2b>
 8005326:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800532a:	9004      	str	r0, [sp, #16]
 800532c:	2d00      	cmp	r5, #0
 800532e:	d07c      	beq.n	800542a <_dtoa_r+0x1da>
 8005330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005334:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005338:	46b2      	mov	sl, r6
 800533a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800533e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005342:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005346:	2200      	movs	r2, #0
 8005348:	4b8b      	ldr	r3, [pc, #556]	; (8005578 <_dtoa_r+0x328>)
 800534a:	4650      	mov	r0, sl
 800534c:	4659      	mov	r1, fp
 800534e:	f7fa ffa3 	bl	8000298 <__aeabi_dsub>
 8005352:	a381      	add	r3, pc, #516	; (adr r3, 8005558 <_dtoa_r+0x308>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f956 	bl	8000608 <__aeabi_dmul>
 800535c:	a380      	add	r3, pc, #512	; (adr r3, 8005560 <_dtoa_r+0x310>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff9b 	bl	800029c <__adddf3>
 8005366:	4606      	mov	r6, r0
 8005368:	4628      	mov	r0, r5
 800536a:	460f      	mov	r7, r1
 800536c:	f7fb f8e2 	bl	8000534 <__aeabi_i2d>
 8005370:	a37d      	add	r3, pc, #500	; (adr r3, 8005568 <_dtoa_r+0x318>)
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f7fb f947 	bl	8000608 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fa ff8b 	bl	800029c <__adddf3>
 8005386:	4606      	mov	r6, r0
 8005388:	460f      	mov	r7, r1
 800538a:	f7fb fbed 	bl	8000b68 <__aeabi_d2iz>
 800538e:	2200      	movs	r2, #0
 8005390:	4682      	mov	sl, r0
 8005392:	2300      	movs	r3, #0
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb fba8 	bl	8000aec <__aeabi_dcmplt>
 800539c:	b148      	cbz	r0, 80053b2 <_dtoa_r+0x162>
 800539e:	4650      	mov	r0, sl
 80053a0:	f7fb f8c8 	bl	8000534 <__aeabi_i2d>
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	f7fb fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 80053ac:	b908      	cbnz	r0, 80053b2 <_dtoa_r+0x162>
 80053ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b2:	f1ba 0f16 	cmp.w	sl, #22
 80053b6:	d859      	bhi.n	800546c <_dtoa_r+0x21c>
 80053b8:	4970      	ldr	r1, [pc, #448]	; (800557c <_dtoa_r+0x32c>)
 80053ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c6:	f7fb fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d050      	beq.n	8005470 <_dtoa_r+0x220>
 80053ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d2:	2300      	movs	r3, #0
 80053d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80053d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053d8:	1b5d      	subs	r5, r3, r5
 80053da:	f1b5 0801 	subs.w	r8, r5, #1
 80053de:	bf49      	itett	mi
 80053e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80053e4:	2300      	movpl	r3, #0
 80053e6:	9305      	strmi	r3, [sp, #20]
 80053e8:	f04f 0800 	movmi.w	r8, #0
 80053ec:	bf58      	it	pl
 80053ee:	9305      	strpl	r3, [sp, #20]
 80053f0:	f1ba 0f00 	cmp.w	sl, #0
 80053f4:	db3e      	blt.n	8005474 <_dtoa_r+0x224>
 80053f6:	2300      	movs	r3, #0
 80053f8:	44d0      	add	r8, sl
 80053fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	9b06      	ldr	r3, [sp, #24]
 8005402:	2b09      	cmp	r3, #9
 8005404:	f200 8090 	bhi.w	8005528 <_dtoa_r+0x2d8>
 8005408:	2b05      	cmp	r3, #5
 800540a:	bfc4      	itt	gt
 800540c:	3b04      	subgt	r3, #4
 800540e:	9306      	strgt	r3, [sp, #24]
 8005410:	9b06      	ldr	r3, [sp, #24]
 8005412:	f1a3 0302 	sub.w	r3, r3, #2
 8005416:	bfcc      	ite	gt
 8005418:	2500      	movgt	r5, #0
 800541a:	2501      	movle	r5, #1
 800541c:	2b03      	cmp	r3, #3
 800541e:	f200 808f 	bhi.w	8005540 <_dtoa_r+0x2f0>
 8005422:	e8df f003 	tbb	[pc, r3]
 8005426:	7f7d      	.short	0x7f7d
 8005428:	7131      	.short	0x7131
 800542a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800542e:	441d      	add	r5, r3
 8005430:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005434:	2820      	cmp	r0, #32
 8005436:	dd13      	ble.n	8005460 <_dtoa_r+0x210>
 8005438:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800543c:	9b00      	ldr	r3, [sp, #0]
 800543e:	fa08 f800 	lsl.w	r8, r8, r0
 8005442:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005446:	fa23 f000 	lsr.w	r0, r3, r0
 800544a:	ea48 0000 	orr.w	r0, r8, r0
 800544e:	f7fb f861 	bl	8000514 <__aeabi_ui2d>
 8005452:	2301      	movs	r3, #1
 8005454:	4682      	mov	sl, r0
 8005456:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800545a:	3d01      	subs	r5, #1
 800545c:	9313      	str	r3, [sp, #76]	; 0x4c
 800545e:	e772      	b.n	8005346 <_dtoa_r+0xf6>
 8005460:	9b00      	ldr	r3, [sp, #0]
 8005462:	f1c0 0020 	rsb	r0, r0, #32
 8005466:	fa03 f000 	lsl.w	r0, r3, r0
 800546a:	e7f0      	b.n	800544e <_dtoa_r+0x1fe>
 800546c:	2301      	movs	r3, #1
 800546e:	e7b1      	b.n	80053d4 <_dtoa_r+0x184>
 8005470:	900f      	str	r0, [sp, #60]	; 0x3c
 8005472:	e7b0      	b.n	80053d6 <_dtoa_r+0x186>
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	eba3 030a 	sub.w	r3, r3, sl
 800547a:	9305      	str	r3, [sp, #20]
 800547c:	f1ca 0300 	rsb	r3, sl, #0
 8005480:	9307      	str	r3, [sp, #28]
 8005482:	2300      	movs	r3, #0
 8005484:	930e      	str	r3, [sp, #56]	; 0x38
 8005486:	e7bb      	b.n	8005400 <_dtoa_r+0x1b0>
 8005488:	2301      	movs	r3, #1
 800548a:	930a      	str	r3, [sp, #40]	; 0x28
 800548c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd59      	ble.n	8005546 <_dtoa_r+0x2f6>
 8005492:	9302      	str	r3, [sp, #8]
 8005494:	4699      	mov	r9, r3
 8005496:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005498:	2200      	movs	r2, #0
 800549a:	6072      	str	r2, [r6, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	f102 0014 	add.w	r0, r2, #20
 80054a2:	4298      	cmp	r0, r3
 80054a4:	6871      	ldr	r1, [r6, #4]
 80054a6:	d953      	bls.n	8005550 <_dtoa_r+0x300>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fca4 	bl	8005df6 <_Balloc>
 80054ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b0:	6030      	str	r0, [r6, #0]
 80054b2:	f1b9 0f0e 	cmp.w	r9, #14
 80054b6:	f8d3 b000 	ldr.w	fp, [r3]
 80054ba:	f200 80e6 	bhi.w	800568a <_dtoa_r+0x43a>
 80054be:	2d00      	cmp	r5, #0
 80054c0:	f000 80e3 	beq.w	800568a <_dtoa_r+0x43a>
 80054c4:	ed9d 7b00 	vldr	d7, [sp]
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80054d0:	dd74      	ble.n	80055bc <_dtoa_r+0x36c>
 80054d2:	4a2a      	ldr	r2, [pc, #168]	; (800557c <_dtoa_r+0x32c>)
 80054d4:	f00a 030f 	and.w	r3, sl, #15
 80054d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054dc:	ed93 7b00 	vldr	d7, [r3]
 80054e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80054e4:	06f0      	lsls	r0, r6, #27
 80054e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80054ea:	d565      	bpl.n	80055b8 <_dtoa_r+0x368>
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <_dtoa_r+0x330>)
 80054ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054f6:	f7fb f9b1 	bl	800085c <__aeabi_ddiv>
 80054fa:	e9cd 0100 	strd	r0, r1, [sp]
 80054fe:	f006 060f 	and.w	r6, r6, #15
 8005502:	2503      	movs	r5, #3
 8005504:	4f1e      	ldr	r7, [pc, #120]	; (8005580 <_dtoa_r+0x330>)
 8005506:	e04c      	b.n	80055a2 <_dtoa_r+0x352>
 8005508:	2301      	movs	r3, #1
 800550a:	930a      	str	r3, [sp, #40]	; 0x28
 800550c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550e:	4453      	add	r3, sl
 8005510:	f103 0901 	add.w	r9, r3, #1
 8005514:	9302      	str	r3, [sp, #8]
 8005516:	464b      	mov	r3, r9
 8005518:	2b01      	cmp	r3, #1
 800551a:	bfb8      	it	lt
 800551c:	2301      	movlt	r3, #1
 800551e:	e7ba      	b.n	8005496 <_dtoa_r+0x246>
 8005520:	2300      	movs	r3, #0
 8005522:	e7b2      	b.n	800548a <_dtoa_r+0x23a>
 8005524:	2300      	movs	r3, #0
 8005526:	e7f0      	b.n	800550a <_dtoa_r+0x2ba>
 8005528:	2501      	movs	r5, #1
 800552a:	2300      	movs	r3, #0
 800552c:	9306      	str	r3, [sp, #24]
 800552e:	950a      	str	r5, [sp, #40]	; 0x28
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	9302      	str	r3, [sp, #8]
 8005536:	4699      	mov	r9, r3
 8005538:	2200      	movs	r2, #0
 800553a:	2312      	movs	r3, #18
 800553c:	920b      	str	r2, [sp, #44]	; 0x2c
 800553e:	e7aa      	b.n	8005496 <_dtoa_r+0x246>
 8005540:	2301      	movs	r3, #1
 8005542:	930a      	str	r3, [sp, #40]	; 0x28
 8005544:	e7f4      	b.n	8005530 <_dtoa_r+0x2e0>
 8005546:	2301      	movs	r3, #1
 8005548:	9302      	str	r3, [sp, #8]
 800554a:	4699      	mov	r9, r3
 800554c:	461a      	mov	r2, r3
 800554e:	e7f5      	b.n	800553c <_dtoa_r+0x2ec>
 8005550:	3101      	adds	r1, #1
 8005552:	6071      	str	r1, [r6, #4]
 8005554:	0052      	lsls	r2, r2, #1
 8005556:	e7a2      	b.n	800549e <_dtoa_r+0x24e>
 8005558:	636f4361 	.word	0x636f4361
 800555c:	3fd287a7 	.word	0x3fd287a7
 8005560:	8b60c8b3 	.word	0x8b60c8b3
 8005564:	3fc68a28 	.word	0x3fc68a28
 8005568:	509f79fb 	.word	0x509f79fb
 800556c:	3fd34413 	.word	0x3fd34413
 8005570:	7ff00000 	.word	0x7ff00000
 8005574:	080067bd 	.word	0x080067bd
 8005578:	3ff80000 	.word	0x3ff80000
 800557c:	08006818 	.word	0x08006818
 8005580:	080067f0 	.word	0x080067f0
 8005584:	080067e9 	.word	0x080067e9
 8005588:	07f1      	lsls	r1, r6, #31
 800558a:	d508      	bpl.n	800559e <_dtoa_r+0x34e>
 800558c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	f7fb f838 	bl	8000608 <__aeabi_dmul>
 8005598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800559c:	3501      	adds	r5, #1
 800559e:	1076      	asrs	r6, r6, #1
 80055a0:	3708      	adds	r7, #8
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	d1f0      	bne.n	8005588 <_dtoa_r+0x338>
 80055a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055ae:	f7fb f955 	bl	800085c <__aeabi_ddiv>
 80055b2:	e9cd 0100 	strd	r0, r1, [sp]
 80055b6:	e01a      	b.n	80055ee <_dtoa_r+0x39e>
 80055b8:	2502      	movs	r5, #2
 80055ba:	e7a3      	b.n	8005504 <_dtoa_r+0x2b4>
 80055bc:	f000 80a0 	beq.w	8005700 <_dtoa_r+0x4b0>
 80055c0:	f1ca 0600 	rsb	r6, sl, #0
 80055c4:	4b9f      	ldr	r3, [pc, #636]	; (8005844 <_dtoa_r+0x5f4>)
 80055c6:	4fa0      	ldr	r7, [pc, #640]	; (8005848 <_dtoa_r+0x5f8>)
 80055c8:	f006 020f 	and.w	r2, r6, #15
 80055cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055d8:	f7fb f816 	bl	8000608 <__aeabi_dmul>
 80055dc:	e9cd 0100 	strd	r0, r1, [sp]
 80055e0:	1136      	asrs	r6, r6, #4
 80055e2:	2300      	movs	r3, #0
 80055e4:	2502      	movs	r5, #2
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	d17f      	bne.n	80056ea <_dtoa_r+0x49a>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e1      	bne.n	80055b2 <_dtoa_r+0x362>
 80055ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8087 	beq.w	8005704 <_dtoa_r+0x4b4>
 80055f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80055fa:	2200      	movs	r2, #0
 80055fc:	4b93      	ldr	r3, [pc, #588]	; (800584c <_dtoa_r+0x5fc>)
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fb fa73 	bl	8000aec <__aeabi_dcmplt>
 8005606:	2800      	cmp	r0, #0
 8005608:	d07c      	beq.n	8005704 <_dtoa_r+0x4b4>
 800560a:	f1b9 0f00 	cmp.w	r9, #0
 800560e:	d079      	beq.n	8005704 <_dtoa_r+0x4b4>
 8005610:	9b02      	ldr	r3, [sp, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd35      	ble.n	8005682 <_dtoa_r+0x432>
 8005616:	f10a 33ff 	add.w	r3, sl, #4294967295
 800561a:	9308      	str	r3, [sp, #32]
 800561c:	4639      	mov	r1, r7
 800561e:	2200      	movs	r2, #0
 8005620:	4b8b      	ldr	r3, [pc, #556]	; (8005850 <_dtoa_r+0x600>)
 8005622:	4630      	mov	r0, r6
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	e9cd 0100 	strd	r0, r1, [sp]
 800562c:	9f02      	ldr	r7, [sp, #8]
 800562e:	3501      	adds	r5, #1
 8005630:	4628      	mov	r0, r5
 8005632:	f7fa ff7f 	bl	8000534 <__aeabi_i2d>
 8005636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800563a:	f7fa ffe5 	bl	8000608 <__aeabi_dmul>
 800563e:	2200      	movs	r2, #0
 8005640:	4b84      	ldr	r3, [pc, #528]	; (8005854 <_dtoa_r+0x604>)
 8005642:	f7fa fe2b 	bl	800029c <__adddf3>
 8005646:	4605      	mov	r5, r0
 8005648:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800564c:	2f00      	cmp	r7, #0
 800564e:	d15d      	bne.n	800570c <_dtoa_r+0x4bc>
 8005650:	2200      	movs	r2, #0
 8005652:	4b81      	ldr	r3, [pc, #516]	; (8005858 <_dtoa_r+0x608>)
 8005654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005658:	f7fa fe1e 	bl	8000298 <__aeabi_dsub>
 800565c:	462a      	mov	r2, r5
 800565e:	4633      	mov	r3, r6
 8005660:	e9cd 0100 	strd	r0, r1, [sp]
 8005664:	f7fb fa60 	bl	8000b28 <__aeabi_dcmpgt>
 8005668:	2800      	cmp	r0, #0
 800566a:	f040 8288 	bne.w	8005b7e <_dtoa_r+0x92e>
 800566e:	462a      	mov	r2, r5
 8005670:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005678:	f7fb fa38 	bl	8000aec <__aeabi_dcmplt>
 800567c:	2800      	cmp	r0, #0
 800567e:	f040 827c 	bne.w	8005b7a <_dtoa_r+0x92a>
 8005682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005686:	e9cd 2300 	strd	r2, r3, [sp]
 800568a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800568c:	2b00      	cmp	r3, #0
 800568e:	f2c0 8150 	blt.w	8005932 <_dtoa_r+0x6e2>
 8005692:	f1ba 0f0e 	cmp.w	sl, #14
 8005696:	f300 814c 	bgt.w	8005932 <_dtoa_r+0x6e2>
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <_dtoa_r+0x5f4>)
 800569c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056a0:	ed93 7b00 	vldr	d7, [r3]
 80056a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056ac:	f280 80d8 	bge.w	8005860 <_dtoa_r+0x610>
 80056b0:	f1b9 0f00 	cmp.w	r9, #0
 80056b4:	f300 80d4 	bgt.w	8005860 <_dtoa_r+0x610>
 80056b8:	f040 825e 	bne.w	8005b78 <_dtoa_r+0x928>
 80056bc:	2200      	movs	r2, #0
 80056be:	4b66      	ldr	r3, [pc, #408]	; (8005858 <_dtoa_r+0x608>)
 80056c0:	ec51 0b17 	vmov	r0, r1, d7
 80056c4:	f7fa ffa0 	bl	8000608 <__aeabi_dmul>
 80056c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056cc:	f7fb fa22 	bl	8000b14 <__aeabi_dcmpge>
 80056d0:	464f      	mov	r7, r9
 80056d2:	464e      	mov	r6, r9
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 8234 	bne.w	8005b42 <_dtoa_r+0x8f2>
 80056da:	2331      	movs	r3, #49	; 0x31
 80056dc:	f10b 0501 	add.w	r5, fp, #1
 80056e0:	f88b 3000 	strb.w	r3, [fp]
 80056e4:	f10a 0a01 	add.w	sl, sl, #1
 80056e8:	e22f      	b.n	8005b4a <_dtoa_r+0x8fa>
 80056ea:	07f2      	lsls	r2, r6, #31
 80056ec:	d505      	bpl.n	80056fa <_dtoa_r+0x4aa>
 80056ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	3501      	adds	r5, #1
 80056f8:	2301      	movs	r3, #1
 80056fa:	1076      	asrs	r6, r6, #1
 80056fc:	3708      	adds	r7, #8
 80056fe:	e772      	b.n	80055e6 <_dtoa_r+0x396>
 8005700:	2502      	movs	r5, #2
 8005702:	e774      	b.n	80055ee <_dtoa_r+0x39e>
 8005704:	f8cd a020 	str.w	sl, [sp, #32]
 8005708:	464f      	mov	r7, r9
 800570a:	e791      	b.n	8005630 <_dtoa_r+0x3e0>
 800570c:	4b4d      	ldr	r3, [pc, #308]	; (8005844 <_dtoa_r+0x5f4>)
 800570e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005712:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d047      	beq.n	80057ac <_dtoa_r+0x55c>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	2000      	movs	r0, #0
 8005722:	494e      	ldr	r1, [pc, #312]	; (800585c <_dtoa_r+0x60c>)
 8005724:	f7fb f89a 	bl	800085c <__aeabi_ddiv>
 8005728:	462a      	mov	r2, r5
 800572a:	4633      	mov	r3, r6
 800572c:	f7fa fdb4 	bl	8000298 <__aeabi_dsub>
 8005730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005734:	465d      	mov	r5, fp
 8005736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800573a:	f7fb fa15 	bl	8000b68 <__aeabi_d2iz>
 800573e:	4606      	mov	r6, r0
 8005740:	f7fa fef8 	bl	8000534 <__aeabi_i2d>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800574c:	f7fa fda4 	bl	8000298 <__aeabi_dsub>
 8005750:	3630      	adds	r6, #48	; 0x30
 8005752:	f805 6b01 	strb.w	r6, [r5], #1
 8005756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800575a:	e9cd 0100 	strd	r0, r1, [sp]
 800575e:	f7fb f9c5 	bl	8000aec <__aeabi_dcmplt>
 8005762:	2800      	cmp	r0, #0
 8005764:	d163      	bne.n	800582e <_dtoa_r+0x5de>
 8005766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800576a:	2000      	movs	r0, #0
 800576c:	4937      	ldr	r1, [pc, #220]	; (800584c <_dtoa_r+0x5fc>)
 800576e:	f7fa fd93 	bl	8000298 <__aeabi_dsub>
 8005772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005776:	f7fb f9b9 	bl	8000aec <__aeabi_dcmplt>
 800577a:	2800      	cmp	r0, #0
 800577c:	f040 80b7 	bne.w	80058ee <_dtoa_r+0x69e>
 8005780:	eba5 030b 	sub.w	r3, r5, fp
 8005784:	429f      	cmp	r7, r3
 8005786:	f77f af7c 	ble.w	8005682 <_dtoa_r+0x432>
 800578a:	2200      	movs	r2, #0
 800578c:	4b30      	ldr	r3, [pc, #192]	; (8005850 <_dtoa_r+0x600>)
 800578e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005792:	f7fa ff39 	bl	8000608 <__aeabi_dmul>
 8005796:	2200      	movs	r2, #0
 8005798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800579c:	4b2c      	ldr	r3, [pc, #176]	; (8005850 <_dtoa_r+0x600>)
 800579e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057a2:	f7fa ff31 	bl	8000608 <__aeabi_dmul>
 80057a6:	e9cd 0100 	strd	r0, r1, [sp]
 80057aa:	e7c4      	b.n	8005736 <_dtoa_r+0x4e6>
 80057ac:	462a      	mov	r2, r5
 80057ae:	4633      	mov	r3, r6
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057b8:	eb0b 0507 	add.w	r5, fp, r7
 80057bc:	465e      	mov	r6, fp
 80057be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057c2:	f7fb f9d1 	bl	8000b68 <__aeabi_d2iz>
 80057c6:	4607      	mov	r7, r0
 80057c8:	f7fa feb4 	bl	8000534 <__aeabi_i2d>
 80057cc:	3730      	adds	r7, #48	; 0x30
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d6:	f7fa fd5f 	bl	8000298 <__aeabi_dsub>
 80057da:	f806 7b01 	strb.w	r7, [r6], #1
 80057de:	42ae      	cmp	r6, r5
 80057e0:	e9cd 0100 	strd	r0, r1, [sp]
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	d126      	bne.n	8005838 <_dtoa_r+0x5e8>
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <_dtoa_r+0x60c>)
 80057ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f0:	f7fa fd54 	bl	800029c <__adddf3>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057fc:	f7fb f994 	bl	8000b28 <__aeabi_dcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d174      	bne.n	80058ee <_dtoa_r+0x69e>
 8005804:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005808:	2000      	movs	r0, #0
 800580a:	4914      	ldr	r1, [pc, #80]	; (800585c <_dtoa_r+0x60c>)
 800580c:	f7fa fd44 	bl	8000298 <__aeabi_dsub>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005818:	f7fb f968 	bl	8000aec <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f43f af30 	beq.w	8005682 <_dtoa_r+0x432>
 8005822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005826:	2b30      	cmp	r3, #48	; 0x30
 8005828:	f105 32ff 	add.w	r2, r5, #4294967295
 800582c:	d002      	beq.n	8005834 <_dtoa_r+0x5e4>
 800582e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005832:	e04a      	b.n	80058ca <_dtoa_r+0x67a>
 8005834:	4615      	mov	r5, r2
 8005836:	e7f4      	b.n	8005822 <_dtoa_r+0x5d2>
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <_dtoa_r+0x600>)
 800583a:	f7fa fee5 	bl	8000608 <__aeabi_dmul>
 800583e:	e9cd 0100 	strd	r0, r1, [sp]
 8005842:	e7bc      	b.n	80057be <_dtoa_r+0x56e>
 8005844:	08006818 	.word	0x08006818
 8005848:	080067f0 	.word	0x080067f0
 800584c:	3ff00000 	.word	0x3ff00000
 8005850:	40240000 	.word	0x40240000
 8005854:	401c0000 	.word	0x401c0000
 8005858:	40140000 	.word	0x40140000
 800585c:	3fe00000 	.word	0x3fe00000
 8005860:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005864:	465d      	mov	r5, fp
 8005866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800586a:	4630      	mov	r0, r6
 800586c:	4639      	mov	r1, r7
 800586e:	f7fa fff5 	bl	800085c <__aeabi_ddiv>
 8005872:	f7fb f979 	bl	8000b68 <__aeabi_d2iz>
 8005876:	4680      	mov	r8, r0
 8005878:	f7fa fe5c 	bl	8000534 <__aeabi_i2d>
 800587c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005880:	f7fa fec2 	bl	8000608 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005890:	f7fa fd02 	bl	8000298 <__aeabi_dsub>
 8005894:	f805 6b01 	strb.w	r6, [r5], #1
 8005898:	eba5 060b 	sub.w	r6, r5, fp
 800589c:	45b1      	cmp	r9, r6
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	d139      	bne.n	8005918 <_dtoa_r+0x6c8>
 80058a4:	f7fa fcfa 	bl	800029c <__adddf3>
 80058a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ac:	4606      	mov	r6, r0
 80058ae:	460f      	mov	r7, r1
 80058b0:	f7fb f93a 	bl	8000b28 <__aeabi_dcmpgt>
 80058b4:	b9c8      	cbnz	r0, 80058ea <_dtoa_r+0x69a>
 80058b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fb f90b 	bl	8000ad8 <__aeabi_dcmpeq>
 80058c2:	b110      	cbz	r0, 80058ca <_dtoa_r+0x67a>
 80058c4:	f018 0f01 	tst.w	r8, #1
 80058c8:	d10f      	bne.n	80058ea <_dtoa_r+0x69a>
 80058ca:	9904      	ldr	r1, [sp, #16]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 fac6 	bl	8005e5e <_Bfree>
 80058d2:	2300      	movs	r3, #0
 80058d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058d6:	702b      	strb	r3, [r5, #0]
 80058d8:	f10a 0301 	add.w	r3, sl, #1
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8241 	beq.w	8005d68 <_dtoa_r+0xb18>
 80058e6:	601d      	str	r5, [r3, #0]
 80058e8:	e23e      	b.n	8005d68 <_dtoa_r+0xb18>
 80058ea:	f8cd a020 	str.w	sl, [sp, #32]
 80058ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058f2:	2a39      	cmp	r2, #57	; 0x39
 80058f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80058f8:	d108      	bne.n	800590c <_dtoa_r+0x6bc>
 80058fa:	459b      	cmp	fp, r3
 80058fc:	d10a      	bne.n	8005914 <_dtoa_r+0x6c4>
 80058fe:	9b08      	ldr	r3, [sp, #32]
 8005900:	3301      	adds	r3, #1
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	2330      	movs	r3, #48	; 0x30
 8005906:	f88b 3000 	strb.w	r3, [fp]
 800590a:	465b      	mov	r3, fp
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	3201      	adds	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e78c      	b.n	800582e <_dtoa_r+0x5de>
 8005914:	461d      	mov	r5, r3
 8005916:	e7ea      	b.n	80058ee <_dtoa_r+0x69e>
 8005918:	2200      	movs	r2, #0
 800591a:	4b9b      	ldr	r3, [pc, #620]	; (8005b88 <_dtoa_r+0x938>)
 800591c:	f7fa fe74 	bl	8000608 <__aeabi_dmul>
 8005920:	2200      	movs	r2, #0
 8005922:	2300      	movs	r3, #0
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	f7fb f8d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800592c:	2800      	cmp	r0, #0
 800592e:	d09a      	beq.n	8005866 <_dtoa_r+0x616>
 8005930:	e7cb      	b.n	80058ca <_dtoa_r+0x67a>
 8005932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005934:	2a00      	cmp	r2, #0
 8005936:	f000 808b 	beq.w	8005a50 <_dtoa_r+0x800>
 800593a:	9a06      	ldr	r2, [sp, #24]
 800593c:	2a01      	cmp	r2, #1
 800593e:	dc6e      	bgt.n	8005a1e <_dtoa_r+0x7ce>
 8005940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005942:	2a00      	cmp	r2, #0
 8005944:	d067      	beq.n	8005a16 <_dtoa_r+0x7c6>
 8005946:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800594a:	9f07      	ldr	r7, [sp, #28]
 800594c:	9d05      	ldr	r5, [sp, #20]
 800594e:	9a05      	ldr	r2, [sp, #20]
 8005950:	2101      	movs	r1, #1
 8005952:	441a      	add	r2, r3
 8005954:	4620      	mov	r0, r4
 8005956:	9205      	str	r2, [sp, #20]
 8005958:	4498      	add	r8, r3
 800595a:	f000 fb20 	bl	8005f9e <__i2b>
 800595e:	4606      	mov	r6, r0
 8005960:	2d00      	cmp	r5, #0
 8005962:	dd0c      	ble.n	800597e <_dtoa_r+0x72e>
 8005964:	f1b8 0f00 	cmp.w	r8, #0
 8005968:	dd09      	ble.n	800597e <_dtoa_r+0x72e>
 800596a:	4545      	cmp	r5, r8
 800596c:	9a05      	ldr	r2, [sp, #20]
 800596e:	462b      	mov	r3, r5
 8005970:	bfa8      	it	ge
 8005972:	4643      	movge	r3, r8
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	9205      	str	r2, [sp, #20]
 8005978:	1aed      	subs	r5, r5, r3
 800597a:	eba8 0803 	sub.w	r8, r8, r3
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	b1eb      	cbz	r3, 80059be <_dtoa_r+0x76e>
 8005982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d067      	beq.n	8005a58 <_dtoa_r+0x808>
 8005988:	b18f      	cbz	r7, 80059ae <_dtoa_r+0x75e>
 800598a:	4631      	mov	r1, r6
 800598c:	463a      	mov	r2, r7
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fba4 	bl	80060dc <__pow5mult>
 8005994:	9a04      	ldr	r2, [sp, #16]
 8005996:	4601      	mov	r1, r0
 8005998:	4606      	mov	r6, r0
 800599a:	4620      	mov	r0, r4
 800599c:	f000 fb08 	bl	8005fb0 <__multiply>
 80059a0:	9904      	ldr	r1, [sp, #16]
 80059a2:	9008      	str	r0, [sp, #32]
 80059a4:	4620      	mov	r0, r4
 80059a6:	f000 fa5a 	bl	8005e5e <_Bfree>
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	1bda      	subs	r2, r3, r7
 80059b2:	d004      	beq.n	80059be <_dtoa_r+0x76e>
 80059b4:	9904      	ldr	r1, [sp, #16]
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 fb90 	bl	80060dc <__pow5mult>
 80059bc:	9004      	str	r0, [sp, #16]
 80059be:	2101      	movs	r1, #1
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 faec 	bl	8005f9e <__i2b>
 80059c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c8:	4607      	mov	r7, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 81d0 	beq.w	8005d70 <_dtoa_r+0xb20>
 80059d0:	461a      	mov	r2, r3
 80059d2:	4601      	mov	r1, r0
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fb81 	bl	80060dc <__pow5mult>
 80059da:	9b06      	ldr	r3, [sp, #24]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	4607      	mov	r7, r0
 80059e0:	dc40      	bgt.n	8005a64 <_dtoa_r+0x814>
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d139      	bne.n	8005a5c <_dtoa_r+0x80c>
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d136      	bne.n	8005a60 <_dtoa_r+0x810>
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	0d1b      	lsrs	r3, r3, #20
 80059fa:	051b      	lsls	r3, r3, #20
 80059fc:	b12b      	cbz	r3, 8005a0a <_dtoa_r+0x7ba>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	f108 0801 	add.w	r8, r8, #1
 8005a08:	2301      	movs	r3, #1
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d12a      	bne.n	8005a68 <_dtoa_r+0x818>
 8005a12:	2001      	movs	r0, #1
 8005a14:	e030      	b.n	8005a78 <_dtoa_r+0x828>
 8005a16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a1c:	e795      	b.n	800594a <_dtoa_r+0x6fa>
 8005a1e:	9b07      	ldr	r3, [sp, #28]
 8005a20:	f109 37ff 	add.w	r7, r9, #4294967295
 8005a24:	42bb      	cmp	r3, r7
 8005a26:	bfbf      	itttt	lt
 8005a28:	9b07      	ldrlt	r3, [sp, #28]
 8005a2a:	9707      	strlt	r7, [sp, #28]
 8005a2c:	1afa      	sublt	r2, r7, r3
 8005a2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a30:	bfbb      	ittet	lt
 8005a32:	189b      	addlt	r3, r3, r2
 8005a34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a36:	1bdf      	subge	r7, r3, r7
 8005a38:	2700      	movlt	r7, #0
 8005a3a:	f1b9 0f00 	cmp.w	r9, #0
 8005a3e:	bfb5      	itete	lt
 8005a40:	9b05      	ldrlt	r3, [sp, #20]
 8005a42:	9d05      	ldrge	r5, [sp, #20]
 8005a44:	eba3 0509 	sublt.w	r5, r3, r9
 8005a48:	464b      	movge	r3, r9
 8005a4a:	bfb8      	it	lt
 8005a4c:	2300      	movlt	r3, #0
 8005a4e:	e77e      	b.n	800594e <_dtoa_r+0x6fe>
 8005a50:	9f07      	ldr	r7, [sp, #28]
 8005a52:	9d05      	ldr	r5, [sp, #20]
 8005a54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a56:	e783      	b.n	8005960 <_dtoa_r+0x710>
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	e7ab      	b.n	80059b4 <_dtoa_r+0x764>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e7d4      	b.n	8005a0a <_dtoa_r+0x7ba>
 8005a60:	9b00      	ldr	r3, [sp, #0]
 8005a62:	e7d2      	b.n	8005a0a <_dtoa_r+0x7ba>
 8005a64:	2300      	movs	r3, #0
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005a6e:	6918      	ldr	r0, [r3, #16]
 8005a70:	f000 fa47 	bl	8005f02 <__hi0bits>
 8005a74:	f1c0 0020 	rsb	r0, r0, #32
 8005a78:	4440      	add	r0, r8
 8005a7a:	f010 001f 	ands.w	r0, r0, #31
 8005a7e:	d047      	beq.n	8005b10 <_dtoa_r+0x8c0>
 8005a80:	f1c0 0320 	rsb	r3, r0, #32
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	dd3b      	ble.n	8005b00 <_dtoa_r+0x8b0>
 8005a88:	9b05      	ldr	r3, [sp, #20]
 8005a8a:	f1c0 001c 	rsb	r0, r0, #28
 8005a8e:	4403      	add	r3, r0
 8005a90:	9305      	str	r3, [sp, #20]
 8005a92:	4405      	add	r5, r0
 8005a94:	4480      	add	r8, r0
 8005a96:	9b05      	ldr	r3, [sp, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dd05      	ble.n	8005aa8 <_dtoa_r+0x858>
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	9904      	ldr	r1, [sp, #16]
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fb69 	bl	8006178 <__lshift>
 8005aa6:	9004      	str	r0, [sp, #16]
 8005aa8:	f1b8 0f00 	cmp.w	r8, #0
 8005aac:	dd05      	ble.n	8005aba <_dtoa_r+0x86a>
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fb60 	bl	8006178 <__lshift>
 8005ab8:	4607      	mov	r7, r0
 8005aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005abc:	b353      	cbz	r3, 8005b14 <_dtoa_r+0x8c4>
 8005abe:	4639      	mov	r1, r7
 8005ac0:	9804      	ldr	r0, [sp, #16]
 8005ac2:	f000 fbad 	bl	8006220 <__mcmp>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	da24      	bge.n	8005b14 <_dtoa_r+0x8c4>
 8005aca:	2300      	movs	r3, #0
 8005acc:	220a      	movs	r2, #10
 8005ace:	9904      	ldr	r1, [sp, #16]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 f9db 	bl	8005e8c <__multadd>
 8005ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad8:	9004      	str	r0, [sp, #16]
 8005ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 814d 	beq.w	8005d7e <_dtoa_r+0xb2e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	220a      	movs	r2, #10
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 f9ce 	bl	8005e8c <__multadd>
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	4606      	mov	r6, r0
 8005af6:	dc4f      	bgt.n	8005b98 <_dtoa_r+0x948>
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	dd4c      	ble.n	8005b98 <_dtoa_r+0x948>
 8005afe:	e011      	b.n	8005b24 <_dtoa_r+0x8d4>
 8005b00:	d0c9      	beq.n	8005a96 <_dtoa_r+0x846>
 8005b02:	9a05      	ldr	r2, [sp, #20]
 8005b04:	331c      	adds	r3, #28
 8005b06:	441a      	add	r2, r3
 8005b08:	9205      	str	r2, [sp, #20]
 8005b0a:	441d      	add	r5, r3
 8005b0c:	4498      	add	r8, r3
 8005b0e:	e7c2      	b.n	8005a96 <_dtoa_r+0x846>
 8005b10:	4603      	mov	r3, r0
 8005b12:	e7f6      	b.n	8005b02 <_dtoa_r+0x8b2>
 8005b14:	f1b9 0f00 	cmp.w	r9, #0
 8005b18:	dc38      	bgt.n	8005b8c <_dtoa_r+0x93c>
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	dd35      	ble.n	8005b8c <_dtoa_r+0x93c>
 8005b20:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b24:	9b02      	ldr	r3, [sp, #8]
 8005b26:	b963      	cbnz	r3, 8005b42 <_dtoa_r+0x8f2>
 8005b28:	4639      	mov	r1, r7
 8005b2a:	2205      	movs	r2, #5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 f9ad 	bl	8005e8c <__multadd>
 8005b32:	4601      	mov	r1, r0
 8005b34:	4607      	mov	r7, r0
 8005b36:	9804      	ldr	r0, [sp, #16]
 8005b38:	f000 fb72 	bl	8006220 <__mcmp>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f73f adcc 	bgt.w	80056da <_dtoa_r+0x48a>
 8005b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b44:	465d      	mov	r5, fp
 8005b46:	ea6f 0a03 	mvn.w	sl, r3
 8005b4a:	f04f 0900 	mov.w	r9, #0
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 f984 	bl	8005e5e <_Bfree>
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	f43f aeb7 	beq.w	80058ca <_dtoa_r+0x67a>
 8005b5c:	f1b9 0f00 	cmp.w	r9, #0
 8005b60:	d005      	beq.n	8005b6e <_dtoa_r+0x91e>
 8005b62:	45b1      	cmp	r9, r6
 8005b64:	d003      	beq.n	8005b6e <_dtoa_r+0x91e>
 8005b66:	4649      	mov	r1, r9
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 f978 	bl	8005e5e <_Bfree>
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 f974 	bl	8005e5e <_Bfree>
 8005b76:	e6a8      	b.n	80058ca <_dtoa_r+0x67a>
 8005b78:	2700      	movs	r7, #0
 8005b7a:	463e      	mov	r6, r7
 8005b7c:	e7e1      	b.n	8005b42 <_dtoa_r+0x8f2>
 8005b7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b82:	463e      	mov	r6, r7
 8005b84:	e5a9      	b.n	80056da <_dtoa_r+0x48a>
 8005b86:	bf00      	nop
 8005b88:	40240000 	.word	0x40240000
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80fa 	beq.w	8005d8c <_dtoa_r+0xb3c>
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	dd05      	ble.n	8005ba8 <_dtoa_r+0x958>
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	462a      	mov	r2, r5
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 fae9 	bl	8006178 <__lshift>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04c      	beq.n	8005c48 <_dtoa_r+0x9f8>
 8005bae:	6871      	ldr	r1, [r6, #4]
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f920 	bl	8005df6 <_Balloc>
 8005bb6:	6932      	ldr	r2, [r6, #16]
 8005bb8:	3202      	adds	r2, #2
 8005bba:	4605      	mov	r5, r0
 8005bbc:	0092      	lsls	r2, r2, #2
 8005bbe:	f106 010c 	add.w	r1, r6, #12
 8005bc2:	300c      	adds	r0, #12
 8005bc4:	f000 f90a 	bl	8005ddc <memcpy>
 8005bc8:	2201      	movs	r2, #1
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fad3 	bl	8006178 <__lshift>
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	f8cd b014 	str.w	fp, [sp, #20]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	46b1      	mov	r9, r6
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	4606      	mov	r6, r0
 8005be2:	4639      	mov	r1, r7
 8005be4:	9804      	ldr	r0, [sp, #16]
 8005be6:	f7ff faa7 	bl	8005138 <quorem>
 8005bea:	4649      	mov	r1, r9
 8005bec:	4605      	mov	r5, r0
 8005bee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bf2:	9804      	ldr	r0, [sp, #16]
 8005bf4:	f000 fb14 	bl	8006220 <__mcmp>
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	9000      	str	r0, [sp, #0]
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fb28 	bl	8006254 <__mdiff>
 8005c04:	68c3      	ldr	r3, [r0, #12]
 8005c06:	4602      	mov	r2, r0
 8005c08:	bb03      	cbnz	r3, 8005c4c <_dtoa_r+0x9fc>
 8005c0a:	4601      	mov	r1, r0
 8005c0c:	9008      	str	r0, [sp, #32]
 8005c0e:	9804      	ldr	r0, [sp, #16]
 8005c10:	f000 fb06 	bl	8006220 <__mcmp>
 8005c14:	9a08      	ldr	r2, [sp, #32]
 8005c16:	4603      	mov	r3, r0
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	9308      	str	r3, [sp, #32]
 8005c1e:	f000 f91e 	bl	8005e5e <_Bfree>
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	b9a3      	cbnz	r3, 8005c50 <_dtoa_r+0xa00>
 8005c26:	9a06      	ldr	r2, [sp, #24]
 8005c28:	b992      	cbnz	r2, 8005c50 <_dtoa_r+0xa00>
 8005c2a:	9a07      	ldr	r2, [sp, #28]
 8005c2c:	b982      	cbnz	r2, 8005c50 <_dtoa_r+0xa00>
 8005c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c32:	d029      	beq.n	8005c88 <_dtoa_r+0xa38>
 8005c34:	9b00      	ldr	r3, [sp, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dd01      	ble.n	8005c3e <_dtoa_r+0x9ee>
 8005c3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	1c5d      	adds	r5, r3, #1
 8005c42:	f883 8000 	strb.w	r8, [r3]
 8005c46:	e782      	b.n	8005b4e <_dtoa_r+0x8fe>
 8005c48:	4630      	mov	r0, r6
 8005c4a:	e7c2      	b.n	8005bd2 <_dtoa_r+0x982>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e7e3      	b.n	8005c18 <_dtoa_r+0x9c8>
 8005c50:	9a00      	ldr	r2, [sp, #0]
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	db04      	blt.n	8005c60 <_dtoa_r+0xa10>
 8005c56:	d125      	bne.n	8005ca4 <_dtoa_r+0xa54>
 8005c58:	9a06      	ldr	r2, [sp, #24]
 8005c5a:	bb1a      	cbnz	r2, 8005ca4 <_dtoa_r+0xa54>
 8005c5c:	9a07      	ldr	r2, [sp, #28]
 8005c5e:	bb0a      	cbnz	r2, 8005ca4 <_dtoa_r+0xa54>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	ddec      	ble.n	8005c3e <_dtoa_r+0x9ee>
 8005c64:	2201      	movs	r2, #1
 8005c66:	9904      	ldr	r1, [sp, #16]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fa85 	bl	8006178 <__lshift>
 8005c6e:	4639      	mov	r1, r7
 8005c70:	9004      	str	r0, [sp, #16]
 8005c72:	f000 fad5 	bl	8006220 <__mcmp>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	dc03      	bgt.n	8005c82 <_dtoa_r+0xa32>
 8005c7a:	d1e0      	bne.n	8005c3e <_dtoa_r+0x9ee>
 8005c7c:	f018 0f01 	tst.w	r8, #1
 8005c80:	d0dd      	beq.n	8005c3e <_dtoa_r+0x9ee>
 8005c82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c86:	d1d8      	bne.n	8005c3a <_dtoa_r+0x9ea>
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	9a05      	ldr	r2, [sp, #20]
 8005c8c:	1c5d      	adds	r5, r3, #1
 8005c8e:	2339      	movs	r3, #57	; 0x39
 8005c90:	7013      	strb	r3, [r2, #0]
 8005c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c96:	2b39      	cmp	r3, #57	; 0x39
 8005c98:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c9c:	d04f      	beq.n	8005d3e <_dtoa_r+0xaee>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	7013      	strb	r3, [r2, #0]
 8005ca2:	e754      	b.n	8005b4e <_dtoa_r+0x8fe>
 8005ca4:	9a05      	ldr	r2, [sp, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f102 0501 	add.w	r5, r2, #1
 8005cac:	dd06      	ble.n	8005cbc <_dtoa_r+0xa6c>
 8005cae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cb2:	d0e9      	beq.n	8005c88 <_dtoa_r+0xa38>
 8005cb4:	f108 0801 	add.w	r8, r8, #1
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	e7c2      	b.n	8005c42 <_dtoa_r+0x9f2>
 8005cbc:	9a02      	ldr	r2, [sp, #8]
 8005cbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cc2:	eba5 030b 	sub.w	r3, r5, fp
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d021      	beq.n	8005d0e <_dtoa_r+0xabe>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	220a      	movs	r2, #10
 8005cce:	9904      	ldr	r1, [sp, #16]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 f8db 	bl	8005e8c <__multadd>
 8005cd6:	45b1      	cmp	r9, r6
 8005cd8:	9004      	str	r0, [sp, #16]
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	f04f 020a 	mov.w	r2, #10
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	d105      	bne.n	8005cf4 <_dtoa_r+0xaa4>
 8005ce8:	f000 f8d0 	bl	8005e8c <__multadd>
 8005cec:	4681      	mov	r9, r0
 8005cee:	4606      	mov	r6, r0
 8005cf0:	9505      	str	r5, [sp, #20]
 8005cf2:	e776      	b.n	8005be2 <_dtoa_r+0x992>
 8005cf4:	f000 f8ca 	bl	8005e8c <__multadd>
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4681      	mov	r9, r0
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	220a      	movs	r2, #10
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f8c3 	bl	8005e8c <__multadd>
 8005d06:	4606      	mov	r6, r0
 8005d08:	e7f2      	b.n	8005cf0 <_dtoa_r+0xaa0>
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	2201      	movs	r2, #1
 8005d10:	9904      	ldr	r1, [sp, #16]
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fa30 	bl	8006178 <__lshift>
 8005d18:	4639      	mov	r1, r7
 8005d1a:	9004      	str	r0, [sp, #16]
 8005d1c:	f000 fa80 	bl	8006220 <__mcmp>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	dcb6      	bgt.n	8005c92 <_dtoa_r+0xa42>
 8005d24:	d102      	bne.n	8005d2c <_dtoa_r+0xadc>
 8005d26:	f018 0f01 	tst.w	r8, #1
 8005d2a:	d1b2      	bne.n	8005c92 <_dtoa_r+0xa42>
 8005d2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d36:	f47f af0a 	bne.w	8005b4e <_dtoa_r+0x8fe>
 8005d3a:	4615      	mov	r5, r2
 8005d3c:	e7f6      	b.n	8005d2c <_dtoa_r+0xadc>
 8005d3e:	4593      	cmp	fp, r2
 8005d40:	d105      	bne.n	8005d4e <_dtoa_r+0xafe>
 8005d42:	2331      	movs	r3, #49	; 0x31
 8005d44:	f10a 0a01 	add.w	sl, sl, #1
 8005d48:	f88b 3000 	strb.w	r3, [fp]
 8005d4c:	e6ff      	b.n	8005b4e <_dtoa_r+0x8fe>
 8005d4e:	4615      	mov	r5, r2
 8005d50:	e79f      	b.n	8005c92 <_dtoa_r+0xa42>
 8005d52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005db8 <_dtoa_r+0xb68>
 8005d56:	e007      	b.n	8005d68 <_dtoa_r+0xb18>
 8005d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005dbc <_dtoa_r+0xb6c>
 8005d5e:	b11b      	cbz	r3, 8005d68 <_dtoa_r+0xb18>
 8005d60:	f10b 0308 	add.w	r3, fp, #8
 8005d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4658      	mov	r0, fp
 8005d6a:	b017      	add	sp, #92	; 0x5c
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	9b06      	ldr	r3, [sp, #24]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	f77f ae35 	ble.w	80059e2 <_dtoa_r+0x792>
 8005d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d7a:	9307      	str	r3, [sp, #28]
 8005d7c:	e649      	b.n	8005a12 <_dtoa_r+0x7c2>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dc03      	bgt.n	8005d8c <_dtoa_r+0xb3c>
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	f73f aecc 	bgt.w	8005b24 <_dtoa_r+0x8d4>
 8005d8c:	465d      	mov	r5, fp
 8005d8e:	4639      	mov	r1, r7
 8005d90:	9804      	ldr	r0, [sp, #16]
 8005d92:	f7ff f9d1 	bl	8005138 <quorem>
 8005d96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d9a:	f805 8b01 	strb.w	r8, [r5], #1
 8005d9e:	9a02      	ldr	r2, [sp, #8]
 8005da0:	eba5 030b 	sub.w	r3, r5, fp
 8005da4:	429a      	cmp	r2, r3
 8005da6:	ddb0      	ble.n	8005d0a <_dtoa_r+0xaba>
 8005da8:	2300      	movs	r3, #0
 8005daa:	220a      	movs	r2, #10
 8005dac:	9904      	ldr	r1, [sp, #16]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f86c 	bl	8005e8c <__multadd>
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	e7ea      	b.n	8005d8e <_dtoa_r+0xb3e>
 8005db8:	080067bc 	.word	0x080067bc
 8005dbc:	080067e0 	.word	0x080067e0

08005dc0 <_localeconv_r>:
 8005dc0:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <_localeconv_r+0x14>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a18      	ldr	r0, [r3, #32]
 8005dc6:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <_localeconv_r+0x18>)
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	bf08      	it	eq
 8005dcc:	4618      	moveq	r0, r3
 8005dce:	30f0      	adds	r0, #240	; 0xf0
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c
 8005dd8:	20000070 	.word	0x20000070

08005ddc <memcpy>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	1e43      	subs	r3, r0, #1
 8005de0:	440a      	add	r2, r1
 8005de2:	4291      	cmp	r1, r2
 8005de4:	d100      	bne.n	8005de8 <memcpy+0xc>
 8005de6:	bd10      	pop	{r4, pc}
 8005de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df0:	e7f7      	b.n	8005de2 <memcpy+0x6>

08005df2 <__malloc_lock>:
 8005df2:	4770      	bx	lr

08005df4 <__malloc_unlock>:
 8005df4:	4770      	bx	lr

08005df6 <_Balloc>:
 8005df6:	b570      	push	{r4, r5, r6, lr}
 8005df8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	b93d      	cbnz	r5, 8005e10 <_Balloc+0x1a>
 8005e00:	2010      	movs	r0, #16
 8005e02:	f7fe fc55 	bl	80046b0 <malloc>
 8005e06:	6260      	str	r0, [r4, #36]	; 0x24
 8005e08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e0c:	6005      	str	r5, [r0, #0]
 8005e0e:	60c5      	str	r5, [r0, #12]
 8005e10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e12:	68eb      	ldr	r3, [r5, #12]
 8005e14:	b183      	cbz	r3, 8005e38 <_Balloc+0x42>
 8005e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e1e:	b9b8      	cbnz	r0, 8005e50 <_Balloc+0x5a>
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f506 	lsl.w	r5, r1, r6
 8005e26:	1d6a      	adds	r2, r5, #5
 8005e28:	0092      	lsls	r2, r2, #2
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fabe 	bl	80063ac <_calloc_r>
 8005e30:	b160      	cbz	r0, 8005e4c <_Balloc+0x56>
 8005e32:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e36:	e00e      	b.n	8005e56 <_Balloc+0x60>
 8005e38:	2221      	movs	r2, #33	; 0x21
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fab5 	bl	80063ac <_calloc_r>
 8005e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e44:	60e8      	str	r0, [r5, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e4      	bne.n	8005e16 <_Balloc+0x20>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	6802      	ldr	r2, [r0, #0]
 8005e52:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e56:	2300      	movs	r3, #0
 8005e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e5c:	e7f7      	b.n	8005e4e <_Balloc+0x58>

08005e5e <_Bfree>:
 8005e5e:	b570      	push	{r4, r5, r6, lr}
 8005e60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e62:	4606      	mov	r6, r0
 8005e64:	460d      	mov	r5, r1
 8005e66:	b93c      	cbnz	r4, 8005e78 <_Bfree+0x1a>
 8005e68:	2010      	movs	r0, #16
 8005e6a:	f7fe fc21 	bl	80046b0 <malloc>
 8005e6e:	6270      	str	r0, [r6, #36]	; 0x24
 8005e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e74:	6004      	str	r4, [r0, #0]
 8005e76:	60c4      	str	r4, [r0, #12]
 8005e78:	b13d      	cbz	r5, 8005e8a <_Bfree+0x2c>
 8005e7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e7c:	686a      	ldr	r2, [r5, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e84:	6029      	str	r1, [r5, #0]
 8005e86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}

08005e8c <__multadd>:
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	690d      	ldr	r5, [r1, #16]
 8005e92:	461f      	mov	r7, r3
 8005e94:	4606      	mov	r6, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	f101 0c14 	add.w	ip, r1, #20
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8dc 0000 	ldr.w	r0, [ip]
 8005ea2:	b281      	uxth	r1, r0
 8005ea4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ea8:	0c0f      	lsrs	r7, r1, #16
 8005eaa:	0c00      	lsrs	r0, r0, #16
 8005eac:	fb02 7000 	mla	r0, r2, r0, r7
 8005eb0:	b289      	uxth	r1, r1
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005eb8:	429d      	cmp	r5, r3
 8005eba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8005ec2:	dcec      	bgt.n	8005e9e <__multadd+0x12>
 8005ec4:	b1d7      	cbz	r7, 8005efc <__multadd+0x70>
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	dc12      	bgt.n	8005ef2 <__multadd+0x66>
 8005ecc:	6861      	ldr	r1, [r4, #4]
 8005ece:	4630      	mov	r0, r6
 8005ed0:	3101      	adds	r1, #1
 8005ed2:	f7ff ff90 	bl	8005df6 <_Balloc>
 8005ed6:	6922      	ldr	r2, [r4, #16]
 8005ed8:	3202      	adds	r2, #2
 8005eda:	f104 010c 	add.w	r1, r4, #12
 8005ede:	4680      	mov	r8, r0
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	300c      	adds	r0, #12
 8005ee4:	f7ff ff7a 	bl	8005ddc <memcpy>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ffb7 	bl	8005e5e <_Bfree>
 8005ef0:	4644      	mov	r4, r8
 8005ef2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ef6:	3501      	adds	r5, #1
 8005ef8:	615f      	str	r7, [r3, #20]
 8005efa:	6125      	str	r5, [r4, #16]
 8005efc:	4620      	mov	r0, r4
 8005efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f02 <__hi0bits>:
 8005f02:	0c02      	lsrs	r2, r0, #16
 8005f04:	0412      	lsls	r2, r2, #16
 8005f06:	4603      	mov	r3, r0
 8005f08:	b9b2      	cbnz	r2, 8005f38 <__hi0bits+0x36>
 8005f0a:	0403      	lsls	r3, r0, #16
 8005f0c:	2010      	movs	r0, #16
 8005f0e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f12:	bf04      	itt	eq
 8005f14:	021b      	lsleq	r3, r3, #8
 8005f16:	3008      	addeq	r0, #8
 8005f18:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f1c:	bf04      	itt	eq
 8005f1e:	011b      	lsleq	r3, r3, #4
 8005f20:	3004      	addeq	r0, #4
 8005f22:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f26:	bf04      	itt	eq
 8005f28:	009b      	lsleq	r3, r3, #2
 8005f2a:	3002      	addeq	r0, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db06      	blt.n	8005f3e <__hi0bits+0x3c>
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	d503      	bpl.n	8005f3c <__hi0bits+0x3a>
 8005f34:	3001      	adds	r0, #1
 8005f36:	4770      	bx	lr
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e7e8      	b.n	8005f0e <__hi0bits+0xc>
 8005f3c:	2020      	movs	r0, #32
 8005f3e:	4770      	bx	lr

08005f40 <__lo0bits>:
 8005f40:	6803      	ldr	r3, [r0, #0]
 8005f42:	f013 0207 	ands.w	r2, r3, #7
 8005f46:	4601      	mov	r1, r0
 8005f48:	d00b      	beq.n	8005f62 <__lo0bits+0x22>
 8005f4a:	07da      	lsls	r2, r3, #31
 8005f4c:	d423      	bmi.n	8005f96 <__lo0bits+0x56>
 8005f4e:	0798      	lsls	r0, r3, #30
 8005f50:	bf49      	itett	mi
 8005f52:	085b      	lsrmi	r3, r3, #1
 8005f54:	089b      	lsrpl	r3, r3, #2
 8005f56:	2001      	movmi	r0, #1
 8005f58:	600b      	strmi	r3, [r1, #0]
 8005f5a:	bf5c      	itt	pl
 8005f5c:	600b      	strpl	r3, [r1, #0]
 8005f5e:	2002      	movpl	r0, #2
 8005f60:	4770      	bx	lr
 8005f62:	b298      	uxth	r0, r3
 8005f64:	b9a8      	cbnz	r0, 8005f92 <__lo0bits+0x52>
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	2010      	movs	r0, #16
 8005f6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f6e:	bf04      	itt	eq
 8005f70:	0a1b      	lsreq	r3, r3, #8
 8005f72:	3008      	addeq	r0, #8
 8005f74:	071a      	lsls	r2, r3, #28
 8005f76:	bf04      	itt	eq
 8005f78:	091b      	lsreq	r3, r3, #4
 8005f7a:	3004      	addeq	r0, #4
 8005f7c:	079a      	lsls	r2, r3, #30
 8005f7e:	bf04      	itt	eq
 8005f80:	089b      	lsreq	r3, r3, #2
 8005f82:	3002      	addeq	r0, #2
 8005f84:	07da      	lsls	r2, r3, #31
 8005f86:	d402      	bmi.n	8005f8e <__lo0bits+0x4e>
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	d006      	beq.n	8005f9a <__lo0bits+0x5a>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	4770      	bx	lr
 8005f92:	4610      	mov	r0, r2
 8005f94:	e7e9      	b.n	8005f6a <__lo0bits+0x2a>
 8005f96:	2000      	movs	r0, #0
 8005f98:	4770      	bx	lr
 8005f9a:	2020      	movs	r0, #32
 8005f9c:	4770      	bx	lr

08005f9e <__i2b>:
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	f7ff ff27 	bl	8005df6 <_Balloc>
 8005fa8:	2201      	movs	r2, #1
 8005faa:	6144      	str	r4, [r0, #20]
 8005fac:	6102      	str	r2, [r0, #16]
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <__multiply>:
 8005fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	690a      	ldr	r2, [r1, #16]
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	bfb8      	it	lt
 8005fbe:	460b      	movlt	r3, r1
 8005fc0:	4688      	mov	r8, r1
 8005fc2:	bfbc      	itt	lt
 8005fc4:	46a0      	movlt	r8, r4
 8005fc6:	461c      	movlt	r4, r3
 8005fc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fd8:	eb07 0609 	add.w	r6, r7, r9
 8005fdc:	42b3      	cmp	r3, r6
 8005fde:	bfb8      	it	lt
 8005fe0:	3101      	addlt	r1, #1
 8005fe2:	f7ff ff08 	bl	8005df6 <_Balloc>
 8005fe6:	f100 0514 	add.w	r5, r0, #20
 8005fea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fee:	462b      	mov	r3, r5
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4573      	cmp	r3, lr
 8005ff4:	d316      	bcc.n	8006024 <__multiply+0x74>
 8005ff6:	f104 0214 	add.w	r2, r4, #20
 8005ffa:	f108 0114 	add.w	r1, r8, #20
 8005ffe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006002:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	9b00      	ldr	r3, [sp, #0]
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	4293      	cmp	r3, r2
 800600e:	d80c      	bhi.n	800602a <__multiply+0x7a>
 8006010:	2e00      	cmp	r6, #0
 8006012:	dd03      	ble.n	800601c <__multiply+0x6c>
 8006014:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05d      	beq.n	80060d8 <__multiply+0x128>
 800601c:	6106      	str	r6, [r0, #16]
 800601e:	b003      	add	sp, #12
 8006020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006024:	f843 2b04 	str.w	r2, [r3], #4
 8006028:	e7e3      	b.n	8005ff2 <__multiply+0x42>
 800602a:	f8b2 b000 	ldrh.w	fp, [r2]
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	d023      	beq.n	800607c <__multiply+0xcc>
 8006034:	4689      	mov	r9, r1
 8006036:	46ac      	mov	ip, r5
 8006038:	f04f 0800 	mov.w	r8, #0
 800603c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006040:	f8dc a000 	ldr.w	sl, [ip]
 8006044:	b2a3      	uxth	r3, r4
 8006046:	fa1f fa8a 	uxth.w	sl, sl
 800604a:	fb0b a303 	mla	r3, fp, r3, sl
 800604e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006052:	f8dc 4000 	ldr.w	r4, [ip]
 8006056:	4443      	add	r3, r8
 8006058:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800605c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006060:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006064:	46e2      	mov	sl, ip
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800606c:	454f      	cmp	r7, r9
 800606e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006072:	f84a 3b04 	str.w	r3, [sl], #4
 8006076:	d82b      	bhi.n	80060d0 <__multiply+0x120>
 8006078:	f8cc 8004 	str.w	r8, [ip, #4]
 800607c:	9b01      	ldr	r3, [sp, #4]
 800607e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006082:	3204      	adds	r2, #4
 8006084:	f1ba 0f00 	cmp.w	sl, #0
 8006088:	d020      	beq.n	80060cc <__multiply+0x11c>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	4689      	mov	r9, r1
 800608e:	46a8      	mov	r8, r5
 8006090:	f04f 0b00 	mov.w	fp, #0
 8006094:	f8b9 c000 	ldrh.w	ip, [r9]
 8006098:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800609c:	fb0a 440c 	mla	r4, sl, ip, r4
 80060a0:	445c      	add	r4, fp
 80060a2:	46c4      	mov	ip, r8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060aa:	f84c 3b04 	str.w	r3, [ip], #4
 80060ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80060b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	fb0a b303 	mla	r3, sl, r3, fp
 80060bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80060c0:	454f      	cmp	r7, r9
 80060c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80060c6:	d805      	bhi.n	80060d4 <__multiply+0x124>
 80060c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80060cc:	3504      	adds	r5, #4
 80060ce:	e79b      	b.n	8006008 <__multiply+0x58>
 80060d0:	46d4      	mov	ip, sl
 80060d2:	e7b3      	b.n	800603c <__multiply+0x8c>
 80060d4:	46e0      	mov	r8, ip
 80060d6:	e7dd      	b.n	8006094 <__multiply+0xe4>
 80060d8:	3e01      	subs	r6, #1
 80060da:	e799      	b.n	8006010 <__multiply+0x60>

080060dc <__pow5mult>:
 80060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e0:	4615      	mov	r5, r2
 80060e2:	f012 0203 	ands.w	r2, r2, #3
 80060e6:	4606      	mov	r6, r0
 80060e8:	460f      	mov	r7, r1
 80060ea:	d007      	beq.n	80060fc <__pow5mult+0x20>
 80060ec:	3a01      	subs	r2, #1
 80060ee:	4c21      	ldr	r4, [pc, #132]	; (8006174 <__pow5mult+0x98>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060f6:	f7ff fec9 	bl	8005e8c <__multadd>
 80060fa:	4607      	mov	r7, r0
 80060fc:	10ad      	asrs	r5, r5, #2
 80060fe:	d035      	beq.n	800616c <__pow5mult+0x90>
 8006100:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006102:	b93c      	cbnz	r4, 8006114 <__pow5mult+0x38>
 8006104:	2010      	movs	r0, #16
 8006106:	f7fe fad3 	bl	80046b0 <malloc>
 800610a:	6270      	str	r0, [r6, #36]	; 0x24
 800610c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006110:	6004      	str	r4, [r0, #0]
 8006112:	60c4      	str	r4, [r0, #12]
 8006114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800611c:	b94c      	cbnz	r4, 8006132 <__pow5mult+0x56>
 800611e:	f240 2171 	movw	r1, #625	; 0x271
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff ff3b 	bl	8005f9e <__i2b>
 8006128:	2300      	movs	r3, #0
 800612a:	f8c8 0008 	str.w	r0, [r8, #8]
 800612e:	4604      	mov	r4, r0
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	07eb      	lsls	r3, r5, #31
 8006138:	d50a      	bpl.n	8006150 <__pow5mult+0x74>
 800613a:	4639      	mov	r1, r7
 800613c:	4622      	mov	r2, r4
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ff36 	bl	8005fb0 <__multiply>
 8006144:	4639      	mov	r1, r7
 8006146:	4681      	mov	r9, r0
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff fe88 	bl	8005e5e <_Bfree>
 800614e:	464f      	mov	r7, r9
 8006150:	106d      	asrs	r5, r5, #1
 8006152:	d00b      	beq.n	800616c <__pow5mult+0x90>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	b938      	cbnz	r0, 8006168 <__pow5mult+0x8c>
 8006158:	4622      	mov	r2, r4
 800615a:	4621      	mov	r1, r4
 800615c:	4630      	mov	r0, r6
 800615e:	f7ff ff27 	bl	8005fb0 <__multiply>
 8006162:	6020      	str	r0, [r4, #0]
 8006164:	f8c0 8000 	str.w	r8, [r0]
 8006168:	4604      	mov	r4, r0
 800616a:	e7e4      	b.n	8006136 <__pow5mult+0x5a>
 800616c:	4638      	mov	r0, r7
 800616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006172:	bf00      	nop
 8006174:	080068e0 	.word	0x080068e0

08006178 <__lshift>:
 8006178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6849      	ldr	r1, [r1, #4]
 8006186:	eb0a 0903 	add.w	r9, sl, r3
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	4607      	mov	r7, r0
 800618e:	4616      	mov	r6, r2
 8006190:	f109 0501 	add.w	r5, r9, #1
 8006194:	42ab      	cmp	r3, r5
 8006196:	db32      	blt.n	80061fe <__lshift+0x86>
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff fe2c 	bl	8005df6 <_Balloc>
 800619e:	2300      	movs	r3, #0
 80061a0:	4680      	mov	r8, r0
 80061a2:	f100 0114 	add.w	r1, r0, #20
 80061a6:	461a      	mov	r2, r3
 80061a8:	4553      	cmp	r3, sl
 80061aa:	db2b      	blt.n	8006204 <__lshift+0x8c>
 80061ac:	6920      	ldr	r0, [r4, #16]
 80061ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b2:	f104 0314 	add.w	r3, r4, #20
 80061b6:	f016 021f 	ands.w	r2, r6, #31
 80061ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061c2:	d025      	beq.n	8006210 <__lshift+0x98>
 80061c4:	f1c2 0e20 	rsb	lr, r2, #32
 80061c8:	2000      	movs	r0, #0
 80061ca:	681e      	ldr	r6, [r3, #0]
 80061cc:	468a      	mov	sl, r1
 80061ce:	4096      	lsls	r6, r2
 80061d0:	4330      	orrs	r0, r6
 80061d2:	f84a 0b04 	str.w	r0, [sl], #4
 80061d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80061da:	459c      	cmp	ip, r3
 80061dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80061e0:	d814      	bhi.n	800620c <__lshift+0x94>
 80061e2:	6048      	str	r0, [r1, #4]
 80061e4:	b108      	cbz	r0, 80061ea <__lshift+0x72>
 80061e6:	f109 0502 	add.w	r5, r9, #2
 80061ea:	3d01      	subs	r5, #1
 80061ec:	4638      	mov	r0, r7
 80061ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80061f2:	4621      	mov	r1, r4
 80061f4:	f7ff fe33 	bl	8005e5e <_Bfree>
 80061f8:	4640      	mov	r0, r8
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	3101      	adds	r1, #1
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	e7c7      	b.n	8006194 <__lshift+0x1c>
 8006204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006208:	3301      	adds	r3, #1
 800620a:	e7cd      	b.n	80061a8 <__lshift+0x30>
 800620c:	4651      	mov	r1, sl
 800620e:	e7dc      	b.n	80061ca <__lshift+0x52>
 8006210:	3904      	subs	r1, #4
 8006212:	f853 2b04 	ldr.w	r2, [r3], #4
 8006216:	f841 2f04 	str.w	r2, [r1, #4]!
 800621a:	459c      	cmp	ip, r3
 800621c:	d8f9      	bhi.n	8006212 <__lshift+0x9a>
 800621e:	e7e4      	b.n	80061ea <__lshift+0x72>

08006220 <__mcmp>:
 8006220:	6903      	ldr	r3, [r0, #16]
 8006222:	690a      	ldr	r2, [r1, #16]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	b530      	push	{r4, r5, lr}
 8006228:	d10c      	bne.n	8006244 <__mcmp+0x24>
 800622a:	0092      	lsls	r2, r2, #2
 800622c:	3014      	adds	r0, #20
 800622e:	3114      	adds	r1, #20
 8006230:	1884      	adds	r4, r0, r2
 8006232:	4411      	add	r1, r2
 8006234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800623c:	4295      	cmp	r5, r2
 800623e:	d003      	beq.n	8006248 <__mcmp+0x28>
 8006240:	d305      	bcc.n	800624e <__mcmp+0x2e>
 8006242:	2301      	movs	r3, #1
 8006244:	4618      	mov	r0, r3
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	42a0      	cmp	r0, r4
 800624a:	d3f3      	bcc.n	8006234 <__mcmp+0x14>
 800624c:	e7fa      	b.n	8006244 <__mcmp+0x24>
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	e7f7      	b.n	8006244 <__mcmp+0x24>

08006254 <__mdiff>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	460d      	mov	r5, r1
 800625a:	4607      	mov	r7, r0
 800625c:	4611      	mov	r1, r2
 800625e:	4628      	mov	r0, r5
 8006260:	4614      	mov	r4, r2
 8006262:	f7ff ffdd 	bl	8006220 <__mcmp>
 8006266:	1e06      	subs	r6, r0, #0
 8006268:	d108      	bne.n	800627c <__mdiff+0x28>
 800626a:	4631      	mov	r1, r6
 800626c:	4638      	mov	r0, r7
 800626e:	f7ff fdc2 	bl	8005df6 <_Balloc>
 8006272:	2301      	movs	r3, #1
 8006274:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627c:	bfa4      	itt	ge
 800627e:	4623      	movge	r3, r4
 8006280:	462c      	movge	r4, r5
 8006282:	4638      	mov	r0, r7
 8006284:	6861      	ldr	r1, [r4, #4]
 8006286:	bfa6      	itte	ge
 8006288:	461d      	movge	r5, r3
 800628a:	2600      	movge	r6, #0
 800628c:	2601      	movlt	r6, #1
 800628e:	f7ff fdb2 	bl	8005df6 <_Balloc>
 8006292:	692b      	ldr	r3, [r5, #16]
 8006294:	60c6      	str	r6, [r0, #12]
 8006296:	6926      	ldr	r6, [r4, #16]
 8006298:	f105 0914 	add.w	r9, r5, #20
 800629c:	f104 0214 	add.w	r2, r4, #20
 80062a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062a8:	f100 0514 	add.w	r5, r0, #20
 80062ac:	f04f 0e00 	mov.w	lr, #0
 80062b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80062b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80062b8:	fa1e f18a 	uxtah	r1, lr, sl
 80062bc:	b2a3      	uxth	r3, r4
 80062be:	1ac9      	subs	r1, r1, r3
 80062c0:	0c23      	lsrs	r3, r4, #16
 80062c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80062c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062ca:	b289      	uxth	r1, r1
 80062cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80062d0:	45c8      	cmp	r8, r9
 80062d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80062d6:	4694      	mov	ip, r2
 80062d8:	f845 3b04 	str.w	r3, [r5], #4
 80062dc:	d8e8      	bhi.n	80062b0 <__mdiff+0x5c>
 80062de:	45bc      	cmp	ip, r7
 80062e0:	d304      	bcc.n	80062ec <__mdiff+0x98>
 80062e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80062e6:	b183      	cbz	r3, 800630a <__mdiff+0xb6>
 80062e8:	6106      	str	r6, [r0, #16]
 80062ea:	e7c5      	b.n	8006278 <__mdiff+0x24>
 80062ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062f0:	fa1e f381 	uxtah	r3, lr, r1
 80062f4:	141a      	asrs	r2, r3, #16
 80062f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006300:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006304:	f845 3b04 	str.w	r3, [r5], #4
 8006308:	e7e9      	b.n	80062de <__mdiff+0x8a>
 800630a:	3e01      	subs	r6, #1
 800630c:	e7e9      	b.n	80062e2 <__mdiff+0x8e>

0800630e <__d2b>:
 800630e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006312:	460e      	mov	r6, r1
 8006314:	2101      	movs	r1, #1
 8006316:	ec59 8b10 	vmov	r8, r9, d0
 800631a:	4615      	mov	r5, r2
 800631c:	f7ff fd6b 	bl	8005df6 <_Balloc>
 8006320:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006324:	4607      	mov	r7, r0
 8006326:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800632a:	bb34      	cbnz	r4, 800637a <__d2b+0x6c>
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	f1b8 0300 	subs.w	r3, r8, #0
 8006332:	d027      	beq.n	8006384 <__d2b+0x76>
 8006334:	a802      	add	r0, sp, #8
 8006336:	f840 3d08 	str.w	r3, [r0, #-8]!
 800633a:	f7ff fe01 	bl	8005f40 <__lo0bits>
 800633e:	9900      	ldr	r1, [sp, #0]
 8006340:	b1f0      	cbz	r0, 8006380 <__d2b+0x72>
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	f1c0 0320 	rsb	r3, r0, #32
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	430b      	orrs	r3, r1
 800634e:	40c2      	lsrs	r2, r0
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	9201      	str	r2, [sp, #4]
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf14      	ite	ne
 800635c:	2102      	movne	r1, #2
 800635e:	2101      	moveq	r1, #1
 8006360:	6139      	str	r1, [r7, #16]
 8006362:	b1c4      	cbz	r4, 8006396 <__d2b+0x88>
 8006364:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006368:	4404      	add	r4, r0
 800636a:	6034      	str	r4, [r6, #0]
 800636c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006370:	6028      	str	r0, [r5, #0]
 8006372:	4638      	mov	r0, r7
 8006374:	b003      	add	sp, #12
 8006376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800637a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800637e:	e7d5      	b.n	800632c <__d2b+0x1e>
 8006380:	6179      	str	r1, [r7, #20]
 8006382:	e7e7      	b.n	8006354 <__d2b+0x46>
 8006384:	a801      	add	r0, sp, #4
 8006386:	f7ff fddb 	bl	8005f40 <__lo0bits>
 800638a:	9b01      	ldr	r3, [sp, #4]
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	2101      	movs	r1, #1
 8006390:	6139      	str	r1, [r7, #16]
 8006392:	3020      	adds	r0, #32
 8006394:	e7e5      	b.n	8006362 <__d2b+0x54>
 8006396:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800639a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800639e:	6030      	str	r0, [r6, #0]
 80063a0:	6918      	ldr	r0, [r3, #16]
 80063a2:	f7ff fdae 	bl	8005f02 <__hi0bits>
 80063a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063aa:	e7e1      	b.n	8006370 <__d2b+0x62>

080063ac <_calloc_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	fb02 f401 	mul.w	r4, r2, r1
 80063b2:	4621      	mov	r1, r4
 80063b4:	f7fe f9da 	bl	800476c <_malloc_r>
 80063b8:	4605      	mov	r5, r0
 80063ba:	b118      	cbz	r0, 80063c4 <_calloc_r+0x18>
 80063bc:	4622      	mov	r2, r4
 80063be:	2100      	movs	r1, #0
 80063c0:	f7fe f97e 	bl	80046c0 <memset>
 80063c4:	4628      	mov	r0, r5
 80063c6:	bd38      	pop	{r3, r4, r5, pc}

080063c8 <__ssputs_r>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	688e      	ldr	r6, [r1, #8]
 80063ce:	429e      	cmp	r6, r3
 80063d0:	4682      	mov	sl, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4690      	mov	r8, r2
 80063d6:	4699      	mov	r9, r3
 80063d8:	d837      	bhi.n	800644a <__ssputs_r+0x82>
 80063da:	898a      	ldrh	r2, [r1, #12]
 80063dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063e0:	d031      	beq.n	8006446 <__ssputs_r+0x7e>
 80063e2:	6825      	ldr	r5, [r4, #0]
 80063e4:	6909      	ldr	r1, [r1, #16]
 80063e6:	1a6f      	subs	r7, r5, r1
 80063e8:	6965      	ldr	r5, [r4, #20]
 80063ea:	2302      	movs	r3, #2
 80063ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80063f4:	f109 0301 	add.w	r3, r9, #1
 80063f8:	443b      	add	r3, r7
 80063fa:	429d      	cmp	r5, r3
 80063fc:	bf38      	it	cc
 80063fe:	461d      	movcc	r5, r3
 8006400:	0553      	lsls	r3, r2, #21
 8006402:	d530      	bpl.n	8006466 <__ssputs_r+0x9e>
 8006404:	4629      	mov	r1, r5
 8006406:	f7fe f9b1 	bl	800476c <_malloc_r>
 800640a:	4606      	mov	r6, r0
 800640c:	b950      	cbnz	r0, 8006424 <__ssputs_r+0x5c>
 800640e:	230c      	movs	r3, #12
 8006410:	f8ca 3000 	str.w	r3, [sl]
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	463a      	mov	r2, r7
 8006426:	6921      	ldr	r1, [r4, #16]
 8006428:	f7ff fcd8 	bl	8005ddc <memcpy>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	6126      	str	r6, [r4, #16]
 800643a:	6165      	str	r5, [r4, #20]
 800643c:	443e      	add	r6, r7
 800643e:	1bed      	subs	r5, r5, r7
 8006440:	6026      	str	r6, [r4, #0]
 8006442:	60a5      	str	r5, [r4, #8]
 8006444:	464e      	mov	r6, r9
 8006446:	454e      	cmp	r6, r9
 8006448:	d900      	bls.n	800644c <__ssputs_r+0x84>
 800644a:	464e      	mov	r6, r9
 800644c:	4632      	mov	r2, r6
 800644e:	4641      	mov	r1, r8
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	f000 f91d 	bl	8006690 <memmove>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	1b9b      	subs	r3, r3, r6
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	441e      	add	r6, r3
 8006460:	6026      	str	r6, [r4, #0]
 8006462:	2000      	movs	r0, #0
 8006464:	e7dc      	b.n	8006420 <__ssputs_r+0x58>
 8006466:	462a      	mov	r2, r5
 8006468:	f000 f92b 	bl	80066c2 <_realloc_r>
 800646c:	4606      	mov	r6, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d1e2      	bne.n	8006438 <__ssputs_r+0x70>
 8006472:	6921      	ldr	r1, [r4, #16]
 8006474:	4650      	mov	r0, sl
 8006476:	f7fe f92b 	bl	80046d0 <_free_r>
 800647a:	e7c8      	b.n	800640e <__ssputs_r+0x46>

0800647c <_svfiprintf_r>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	461d      	mov	r5, r3
 8006482:	898b      	ldrh	r3, [r1, #12]
 8006484:	061f      	lsls	r7, r3, #24
 8006486:	b09d      	sub	sp, #116	; 0x74
 8006488:	4680      	mov	r8, r0
 800648a:	460c      	mov	r4, r1
 800648c:	4616      	mov	r6, r2
 800648e:	d50f      	bpl.n	80064b0 <_svfiprintf_r+0x34>
 8006490:	690b      	ldr	r3, [r1, #16]
 8006492:	b96b      	cbnz	r3, 80064b0 <_svfiprintf_r+0x34>
 8006494:	2140      	movs	r1, #64	; 0x40
 8006496:	f7fe f969 	bl	800476c <_malloc_r>
 800649a:	6020      	str	r0, [r4, #0]
 800649c:	6120      	str	r0, [r4, #16]
 800649e:	b928      	cbnz	r0, 80064ac <_svfiprintf_r+0x30>
 80064a0:	230c      	movs	r3, #12
 80064a2:	f8c8 3000 	str.w	r3, [r8]
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	e0c8      	b.n	800663e <_svfiprintf_r+0x1c2>
 80064ac:	2340      	movs	r3, #64	; 0x40
 80064ae:	6163      	str	r3, [r4, #20]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	2320      	movs	r3, #32
 80064b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ba:	2330      	movs	r3, #48	; 0x30
 80064bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064c0:	9503      	str	r5, [sp, #12]
 80064c2:	f04f 0b01 	mov.w	fp, #1
 80064c6:	4637      	mov	r7, r6
 80064c8:	463d      	mov	r5, r7
 80064ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ce:	b10b      	cbz	r3, 80064d4 <_svfiprintf_r+0x58>
 80064d0:	2b25      	cmp	r3, #37	; 0x25
 80064d2:	d13e      	bne.n	8006552 <_svfiprintf_r+0xd6>
 80064d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80064d8:	d00b      	beq.n	80064f2 <_svfiprintf_r+0x76>
 80064da:	4653      	mov	r3, sl
 80064dc:	4632      	mov	r2, r6
 80064de:	4621      	mov	r1, r4
 80064e0:	4640      	mov	r0, r8
 80064e2:	f7ff ff71 	bl	80063c8 <__ssputs_r>
 80064e6:	3001      	adds	r0, #1
 80064e8:	f000 80a4 	beq.w	8006634 <_svfiprintf_r+0x1b8>
 80064ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ee:	4453      	add	r3, sl
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	783b      	ldrb	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 809d 	beq.w	8006634 <_svfiprintf_r+0x1b8>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650c:	931a      	str	r3, [sp, #104]	; 0x68
 800650e:	462f      	mov	r7, r5
 8006510:	2205      	movs	r2, #5
 8006512:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006516:	4850      	ldr	r0, [pc, #320]	; (8006658 <_svfiprintf_r+0x1dc>)
 8006518:	f7f9 fe6a 	bl	80001f0 <memchr>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	b9d0      	cbnz	r0, 8006556 <_svfiprintf_r+0xda>
 8006520:	06d9      	lsls	r1, r3, #27
 8006522:	bf44      	itt	mi
 8006524:	2220      	movmi	r2, #32
 8006526:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800652a:	071a      	lsls	r2, r3, #28
 800652c:	bf44      	itt	mi
 800652e:	222b      	movmi	r2, #43	; 0x2b
 8006530:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006534:	782a      	ldrb	r2, [r5, #0]
 8006536:	2a2a      	cmp	r2, #42	; 0x2a
 8006538:	d015      	beq.n	8006566 <_svfiprintf_r+0xea>
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	462f      	mov	r7, r5
 800653e:	2000      	movs	r0, #0
 8006540:	250a      	movs	r5, #10
 8006542:	4639      	mov	r1, r7
 8006544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006548:	3b30      	subs	r3, #48	; 0x30
 800654a:	2b09      	cmp	r3, #9
 800654c:	d94d      	bls.n	80065ea <_svfiprintf_r+0x16e>
 800654e:	b1b8      	cbz	r0, 8006580 <_svfiprintf_r+0x104>
 8006550:	e00f      	b.n	8006572 <_svfiprintf_r+0xf6>
 8006552:	462f      	mov	r7, r5
 8006554:	e7b8      	b.n	80064c8 <_svfiprintf_r+0x4c>
 8006556:	4a40      	ldr	r2, [pc, #256]	; (8006658 <_svfiprintf_r+0x1dc>)
 8006558:	1a80      	subs	r0, r0, r2
 800655a:	fa0b f000 	lsl.w	r0, fp, r0
 800655e:	4318      	orrs	r0, r3
 8006560:	9004      	str	r0, [sp, #16]
 8006562:	463d      	mov	r5, r7
 8006564:	e7d3      	b.n	800650e <_svfiprintf_r+0x92>
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	1d11      	adds	r1, r2, #4
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	9103      	str	r1, [sp, #12]
 800656e:	2a00      	cmp	r2, #0
 8006570:	db01      	blt.n	8006576 <_svfiprintf_r+0xfa>
 8006572:	9207      	str	r2, [sp, #28]
 8006574:	e004      	b.n	8006580 <_svfiprintf_r+0x104>
 8006576:	4252      	negs	r2, r2
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	9207      	str	r2, [sp, #28]
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	783b      	ldrb	r3, [r7, #0]
 8006582:	2b2e      	cmp	r3, #46	; 0x2e
 8006584:	d10c      	bne.n	80065a0 <_svfiprintf_r+0x124>
 8006586:	787b      	ldrb	r3, [r7, #1]
 8006588:	2b2a      	cmp	r3, #42	; 0x2a
 800658a:	d133      	bne.n	80065f4 <_svfiprintf_r+0x178>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	1d1a      	adds	r2, r3, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	9203      	str	r2, [sp, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	bfb8      	it	lt
 8006598:	f04f 33ff 	movlt.w	r3, #4294967295
 800659c:	3702      	adds	r7, #2
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	4d2e      	ldr	r5, [pc, #184]	; (800665c <_svfiprintf_r+0x1e0>)
 80065a2:	7839      	ldrb	r1, [r7, #0]
 80065a4:	2203      	movs	r2, #3
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7f9 fe22 	bl	80001f0 <memchr>
 80065ac:	b138      	cbz	r0, 80065be <_svfiprintf_r+0x142>
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	fa03 f000 	lsl.w	r0, r3, r0
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	4303      	orrs	r3, r0
 80065ba:	3701      	adds	r7, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	7839      	ldrb	r1, [r7, #0]
 80065c0:	4827      	ldr	r0, [pc, #156]	; (8006660 <_svfiprintf_r+0x1e4>)
 80065c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c6:	2206      	movs	r2, #6
 80065c8:	1c7e      	adds	r6, r7, #1
 80065ca:	f7f9 fe11 	bl	80001f0 <memchr>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d038      	beq.n	8006644 <_svfiprintf_r+0x1c8>
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <_svfiprintf_r+0x1e8>)
 80065d4:	bb13      	cbnz	r3, 800661c <_svfiprintf_r+0x1a0>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	3307      	adds	r3, #7
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	3308      	adds	r3, #8
 80065e0:	9303      	str	r3, [sp, #12]
 80065e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e4:	444b      	add	r3, r9
 80065e6:	9309      	str	r3, [sp, #36]	; 0x24
 80065e8:	e76d      	b.n	80064c6 <_svfiprintf_r+0x4a>
 80065ea:	fb05 3202 	mla	r2, r5, r2, r3
 80065ee:	2001      	movs	r0, #1
 80065f0:	460f      	mov	r7, r1
 80065f2:	e7a6      	b.n	8006542 <_svfiprintf_r+0xc6>
 80065f4:	2300      	movs	r3, #0
 80065f6:	3701      	adds	r7, #1
 80065f8:	9305      	str	r3, [sp, #20]
 80065fa:	4619      	mov	r1, r3
 80065fc:	250a      	movs	r5, #10
 80065fe:	4638      	mov	r0, r7
 8006600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006604:	3a30      	subs	r2, #48	; 0x30
 8006606:	2a09      	cmp	r2, #9
 8006608:	d903      	bls.n	8006612 <_svfiprintf_r+0x196>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0c8      	beq.n	80065a0 <_svfiprintf_r+0x124>
 800660e:	9105      	str	r1, [sp, #20]
 8006610:	e7c6      	b.n	80065a0 <_svfiprintf_r+0x124>
 8006612:	fb05 2101 	mla	r1, r5, r1, r2
 8006616:	2301      	movs	r3, #1
 8006618:	4607      	mov	r7, r0
 800661a:	e7f0      	b.n	80065fe <_svfiprintf_r+0x182>
 800661c:	ab03      	add	r3, sp, #12
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4622      	mov	r2, r4
 8006622:	4b11      	ldr	r3, [pc, #68]	; (8006668 <_svfiprintf_r+0x1ec>)
 8006624:	a904      	add	r1, sp, #16
 8006626:	4640      	mov	r0, r8
 8006628:	f7fe f98e 	bl	8004948 <_printf_float>
 800662c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006630:	4681      	mov	r9, r0
 8006632:	d1d6      	bne.n	80065e2 <_svfiprintf_r+0x166>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	065b      	lsls	r3, r3, #25
 8006638:	f53f af35 	bmi.w	80064a6 <_svfiprintf_r+0x2a>
 800663c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663e:	b01d      	add	sp, #116	; 0x74
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	4622      	mov	r2, r4
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <_svfiprintf_r+0x1ec>)
 800664c:	a904      	add	r1, sp, #16
 800664e:	4640      	mov	r0, r8
 8006650:	f7fe fc30 	bl	8004eb4 <_printf_i>
 8006654:	e7ea      	b.n	800662c <_svfiprintf_r+0x1b0>
 8006656:	bf00      	nop
 8006658:	080068ec 	.word	0x080068ec
 800665c:	080068f2 	.word	0x080068f2
 8006660:	080068f6 	.word	0x080068f6
 8006664:	08004949 	.word	0x08004949
 8006668:	080063c9 	.word	0x080063c9

0800666c <__ascii_mbtowc>:
 800666c:	b082      	sub	sp, #8
 800666e:	b901      	cbnz	r1, 8006672 <__ascii_mbtowc+0x6>
 8006670:	a901      	add	r1, sp, #4
 8006672:	b142      	cbz	r2, 8006686 <__ascii_mbtowc+0x1a>
 8006674:	b14b      	cbz	r3, 800668a <__ascii_mbtowc+0x1e>
 8006676:	7813      	ldrb	r3, [r2, #0]
 8006678:	600b      	str	r3, [r1, #0]
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	1c10      	adds	r0, r2, #0
 800667e:	bf18      	it	ne
 8006680:	2001      	movne	r0, #1
 8006682:	b002      	add	sp, #8
 8006684:	4770      	bx	lr
 8006686:	4610      	mov	r0, r2
 8006688:	e7fb      	b.n	8006682 <__ascii_mbtowc+0x16>
 800668a:	f06f 0001 	mvn.w	r0, #1
 800668e:	e7f8      	b.n	8006682 <__ascii_mbtowc+0x16>

08006690 <memmove>:
 8006690:	4288      	cmp	r0, r1
 8006692:	b510      	push	{r4, lr}
 8006694:	eb01 0302 	add.w	r3, r1, r2
 8006698:	d807      	bhi.n	80066aa <memmove+0x1a>
 800669a:	1e42      	subs	r2, r0, #1
 800669c:	4299      	cmp	r1, r3
 800669e:	d00a      	beq.n	80066b6 <memmove+0x26>
 80066a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066a8:	e7f8      	b.n	800669c <memmove+0xc>
 80066aa:	4283      	cmp	r3, r0
 80066ac:	d9f5      	bls.n	800669a <memmove+0xa>
 80066ae:	1881      	adds	r1, r0, r2
 80066b0:	1ad2      	subs	r2, r2, r3
 80066b2:	42d3      	cmn	r3, r2
 80066b4:	d100      	bne.n	80066b8 <memmove+0x28>
 80066b6:	bd10      	pop	{r4, pc}
 80066b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066c0:	e7f7      	b.n	80066b2 <memmove+0x22>

080066c2 <_realloc_r>:
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	4607      	mov	r7, r0
 80066c6:	4614      	mov	r4, r2
 80066c8:	460e      	mov	r6, r1
 80066ca:	b921      	cbnz	r1, 80066d6 <_realloc_r+0x14>
 80066cc:	4611      	mov	r1, r2
 80066ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066d2:	f7fe b84b 	b.w	800476c <_malloc_r>
 80066d6:	b922      	cbnz	r2, 80066e2 <_realloc_r+0x20>
 80066d8:	f7fd fffa 	bl	80046d0 <_free_r>
 80066dc:	4625      	mov	r5, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e2:	f000 f821 	bl	8006728 <_malloc_usable_size_r>
 80066e6:	42a0      	cmp	r0, r4
 80066e8:	d20f      	bcs.n	800670a <_realloc_r+0x48>
 80066ea:	4621      	mov	r1, r4
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7fe f83d 	bl	800476c <_malloc_r>
 80066f2:	4605      	mov	r5, r0
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0f2      	beq.n	80066de <_realloc_r+0x1c>
 80066f8:	4631      	mov	r1, r6
 80066fa:	4622      	mov	r2, r4
 80066fc:	f7ff fb6e 	bl	8005ddc <memcpy>
 8006700:	4631      	mov	r1, r6
 8006702:	4638      	mov	r0, r7
 8006704:	f7fd ffe4 	bl	80046d0 <_free_r>
 8006708:	e7e9      	b.n	80066de <_realloc_r+0x1c>
 800670a:	4635      	mov	r5, r6
 800670c:	e7e7      	b.n	80066de <_realloc_r+0x1c>

0800670e <__ascii_wctomb>:
 800670e:	b149      	cbz	r1, 8006724 <__ascii_wctomb+0x16>
 8006710:	2aff      	cmp	r2, #255	; 0xff
 8006712:	bf85      	ittet	hi
 8006714:	238a      	movhi	r3, #138	; 0x8a
 8006716:	6003      	strhi	r3, [r0, #0]
 8006718:	700a      	strbls	r2, [r1, #0]
 800671a:	f04f 30ff 	movhi.w	r0, #4294967295
 800671e:	bf98      	it	ls
 8006720:	2001      	movls	r0, #1
 8006722:	4770      	bx	lr
 8006724:	4608      	mov	r0, r1
 8006726:	4770      	bx	lr

08006728 <_malloc_usable_size_r>:
 8006728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672c:	1f18      	subs	r0, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfbc      	itt	lt
 8006732:	580b      	ldrlt	r3, [r1, r0]
 8006734:	18c0      	addlt	r0, r0, r3
 8006736:	4770      	bx	lr

08006738 <_init>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr

08006744 <_fini>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr
