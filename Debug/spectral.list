
spectral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080065d8  080065d8  000165d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006888  08006888  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006888  08006888  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001dc  08006a6c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006a6c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2cb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000191c  00000000  00000000  0002b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb1e  00000000  00000000  0002e030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a08  00000000  00000000  0004ab4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a81b0  00000000  00000000  00053556  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000fb784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065c0 	.word	0x080065c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080065c0 	.word	0x080065c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <check_error>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int check_error() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	if (ret != HAL_OK) {
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <check_error+0x44>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d017      	beq.n	8000bf4 <check_error+0x3c>
		strcpy((char*)buf, "Err \r\n");
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <check_error+0x48>)
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <check_error+0x4c>)
 8000bc8:	6810      	ldr	r0, [r2, #0]
 8000bca:	6018      	str	r0, [r3, #0]
 8000bcc:	8891      	ldrh	r1, [r2, #4]
 8000bce:	7992      	ldrb	r2, [r2, #6]
 8000bd0:	8099      	strh	r1, [r3, #4]
 8000bd2:	719a      	strb	r2, [r3, #6]

    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <check_error+0x48>)
 8000bd6:	f7ff fb03 	bl	80001e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	4907      	ldr	r1, [pc, #28]	; (8000c00 <check_error+0x48>)
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <check_error+0x50>)
 8000be6:	f003 f86b 	bl	8003cc0 <HAL_UART_Transmit>
    HAL_Delay(10);
 8000bea:	200a      	movs	r0, #10
 8000bec:	f000 fd14 	bl	8001618 <HAL_Delay>
		return 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <check_error+0x3e>
	}
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001f8 	.word	0x200001f8
 8000c00:	20000254 	.word	0x20000254
 8000c04:	080065d8 	.word	0x080065d8
 8000c08:	20000274 	.word	0x20000274

08000c0c <nucleo_byte_read>:

uint8_t nucleo_byte_read(uint8_t device_reg) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	//transmits the address to read from
	buf[0] = device_reg;
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	7013      	strb	r3, [r2, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS << 1, buf, 1, HAL_MAX_DELAY);
 8000c1c:	2349      	movs	r3, #73	; 0x49
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <nucleo_byte_read+0x70>)
 8000c30:	f001 f82c 	bl	8001c8c <HAL_I2C_Master_Transmit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <nucleo_byte_read+0x74>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c3c:	f7ff ffbc 	bl	8000bb8 <check_error>

	//reads from address sent above
	ret = HAL_I2C_Master_Receive(&hi2c1, (DEVICE_SLAVE_ADDRESS << 1) | 1, buf, 1, HAL_MAX_DELAY);
 8000c40:	2349      	movs	r3, #73	; 0x49
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2301      	movs	r3, #1
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <nucleo_byte_read+0x70>)
 8000c5a:	f001 f90b 	bl	8001e74 <HAL_I2C_Master_Receive>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <nucleo_byte_read+0x74>)
 8000c64:	701a      	strb	r2, [r3, #0]
	check_error();
 8000c66:	f7ff ffa7 	bl	8000bb8 <check_error>
	return buf[0];
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <nucleo_byte_read+0x6c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000254 	.word	0x20000254
 8000c7c:	20000208 	.word	0x20000208
 8000c80:	200001f8 	.word	0x200001f8

08000c84 <nucleo_byte_write>:

void nucleo_byte_write(uint8_t addr, uint8_t data) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]
	buf[0] = addr;
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <nucleo_byte_write+0x48>)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	7013      	strb	r3, [r2, #0]
	buf[1] = data;
 8000c9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <nucleo_byte_write+0x48>)
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	7053      	strb	r3, [r2, #1]

	//SMBUS docs first byte is addr to write to, second is data
	ret = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_SLAVE_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
 8000ca0:	2349      	movs	r3, #73	; 0x49
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <nucleo_byte_write+0x48>)
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <nucleo_byte_write+0x4c>)
 8000cb4:	f000 ffea 	bl	8001c8c <HAL_I2C_Master_Transmit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <nucleo_byte_write+0x50>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	check_error();
 8000cc0:	f7ff ff7a 	bl	8000bb8 <check_error>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000254 	.word	0x20000254
 8000cd0:	20000208 	.word	0x20000208
 8000cd4:	200001f8 	.word	0x200001f8

08000cd8 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t d;

	status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff90 	bl	8000c0c <nucleo_byte_read>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <virtual_read+0x30>
		d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff84 	bl	8000c0c <nucleo_byte_read>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73bb      	strb	r3, [r7, #14]
	}

	while(1) {
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff7d 	bl	8000c0c <nucleo_byte_read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <virtual_read+0x50>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000d20:	2005      	movs	r0, #5
 8000d22:	f000 fc79 	bl	8001618 <HAL_Delay>
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d26:	e7ef      	b.n	8000d08 <virtual_read+0x30>
			break;
 8000d28:	bf00      	nop
	}

	nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffa6 	bl	8000c84 <nucleo_byte_write>

	while(1) {
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff65 	bl	8000c0c <nucleo_byte_read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <virtual_read+0x80>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8000d50:	2005      	movs	r0, #5
 8000d52:	f000 fc61 	bl	8001618 <HAL_Delay>
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d56:	e7ef      	b.n	8000d38 <virtual_read+0x60>
			break;
 8000d58:	bf00      	nop
	}

	d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <nucleo_byte_read>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73bb      	strb	r3, [r7, #14]
	return d;
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	71bb      	strb	r3, [r7, #6]
	uint8_t status;

	while(1) {
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000d82:	2300      	movs	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff40 	bl	8000c0c <nucleo_byte_read>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <virtual_write+0x30>
			break;
		}
		HAL_Delay(5);
 8000d9a:	2005      	movs	r0, #5
 8000d9c:	f000 fc3c 	bl	8001618 <HAL_Delay>
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000da0:	e7ef      	b.n	8000d82 <virtual_write+0x10>
			break;
 8000da2:	bf00      	nop
	}

	nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8000da4:	2301      	movs	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	4610      	mov	r0, r2
 8000db4:	f7ff ff66 	bl	8000c84 <nucleo_byte_write>

	while(1) {
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000db8:	2300      	movs	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff25 	bl	8000c0c <nucleo_byte_read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <virtual_write+0x66>
			break;
		}
		HAL_Delay(5);
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f000 fc21 	bl	8001618 <HAL_Delay>
		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
 8000dd6:	e7ef      	b.n	8000db8 <virtual_write+0x46>
			break;
 8000dd8:	bf00      	nop
	}

	nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
 8000dda:	2301      	movs	r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff4e 	bl	8000c84 <nucleo_byte_write>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <get_decimal>:

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff68 	bl	8000cd8 <virtual_read>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	81fb      	strh	r3, [r7, #14]
	return high | (virtual_read(virtual_reg_l));
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff60 	bl	8000cd8 <virtual_read>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b29b      	uxth	r3, r3
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	460a      	mov	r2, r1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	4613      	mov	r3, r2
 8000e38:	71bb      	strb	r3, [r7, #6]
	Channel* ch = malloc(sizeof(Channel));
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f003 fb7a 	bl	8004534 <malloc>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	79ba      	ldrb	r2, [r7, #6]
 8000e54:	705a      	strb	r2, [r3, #1]
	return ch;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <new_device>:

//not the most readable code..
//dev channels start at 0x08 and increase by 8 up until 0x13

Device* new_device(uint8_t dev_register) {
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	Device* dev = malloc(sizeof(Device));
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f003 fb62 	bl	8004534 <malloc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
 8000e82:	e019      	b.n	8000eb8 <new_device+0x58>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2d8      	uxtb	r0, r3
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	7dfc      	ldrb	r4, [r7, #23]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff ffc1 	bl	8000e2a <new_channel>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	00a3      	lsls	r3, r4, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	6059      	str	r1, [r3, #4]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	75fb      	strb	r3, [r7, #23]
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d9e2      	bls.n	8000e84 <new_device+0x24>
	}
	return dev;
 8000ebe:	693b      	ldr	r3, [r7, #16]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b092      	sub	sp, #72	; 0x48
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fb3d 	bl	800154c <HAL_Init>

  /* USER CODE BEGIN Init */
	uint8_t buf[30];

	Device *triad_dev_1 = new_device(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ffc4 	bl	8000e60 <new_device>
 8000ed8:	63b8      	str	r0, [r7, #56]	; 0x38

	Device *triad_dev_2 = new_device(0x01);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff ffc0 	bl	8000e60 <new_device>
 8000ee0:	6378      	str	r0, [r7, #52]	; 0x34

	Device *triad_dev_3 = new_device(0x02);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff ffbc 	bl	8000e60 <new_device>
 8000ee8:	6338      	str	r0, [r7, #48]	; 0x30

	Device *triad[3] = { triad_dev_1, triad_dev_2, triad_dev_3 };
 8000eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef4:	60bb      	str	r3, [r7, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f893 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 f961 	bl	80011c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 f92f 	bl	8001160 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f02:	f000 f8ed 	bl	80010e0 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //enable the spectral sensor

  virtual_write(0x04, 0x28);
 8000f06:	2128      	movs	r1, #40	; 0x28
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f7ff ff32 	bl	8000d72 <virtual_write>
  virtual_write(0x04, 0x28);
 8000f0e:	2128      	movs	r1, #40	; 0x28
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff ff2e 	bl	8000d72 <virtual_write>
  virtual_write(0x05, 0xFF);
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	2005      	movs	r0, #5
 8000f1a:	f7ff ff2a 	bl	8000d72 <virtual_write>
  {
	  // strcpy((char*)buf, "Hello!\r\n");
	  // HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  // HAL_Delay(500);

	  Channel *channel = new_channel(0, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff82 	bl	8000e2a <new_channel>
 8000f26:	62f8      	str	r0, [r7, #44]	; 0x2c

	  for (uint8_t i = 0; i < 3; ++i) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f2e:	e06a      	b.n	8001006 <main+0x13e>
		  virtual_write(DEV_SEL, triad[i]->dev_register);
 8000f30:	234f      	movs	r3, #79	; 0x4f
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f3e:	440b      	add	r3, r1
 8000f40:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f7ff ff12 	bl	8000d72 <virtual_write>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000f54:	e04e      	b.n	8000ff4 <main+0x12c>
			  channel = triad[i]->channels[j];
 8000f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f60:	4413      	add	r3, r2
 8000f62:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000f66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
			  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8000f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff ff37 	bl	8000df0 <get_decimal>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	805a      	strh	r2, [r3, #2]

			  //complicated way to print "channel {x} : {data}"
			  sprintf((char*)buf , "channel %u : %f \r\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8000f8a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	461a      	mov	r2, r3
 8000f98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f9c:	4413      	add	r3, r2
 8000f9e:	461d      	mov	r5, r3
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	885b      	ldrh	r3, [r3, #2]
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fac:	ee17 0a90 	vmov	r0, s15
 8000fb0:	f7ff fad2 	bl	8000558 <__aeabi_f2d>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	f107 000c 	add.w	r0, r7, #12
 8000fbc:	e9cd 3400 	strd	r3, r4, [sp]
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	4915      	ldr	r1, [pc, #84]	; (8001018 <main+0x150>)
 8000fc4:	f003 ffda 	bl	8004f7c <siprintf>

			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f907 	bl	80001e0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f107 010c 	add.w	r1, r7, #12
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <main+0x154>)
 8000fe0:	f002 fe6e 	bl	8003cc0 <HAL_UART_Transmit>
			  HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 fb17 	bl	8001618 <HAL_Delay>
		  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8000fea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000ff4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d9ac      	bls.n	8000f56 <main+0x8e>
	  for (uint8_t i = 0; i < 3; ++i) {
 8000ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001000:	3301      	adds	r3, #1
 8001002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001006:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800100a:	2b02      	cmp	r3, #2
 800100c:	d990      	bls.n	8000f30 <main+0x68>
		  }
	  }
	  HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001012:	f000 fb01 	bl	8001618 <HAL_Delay>
  {
 8001016:	e782      	b.n	8000f1e <main+0x56>
 8001018:	080065e0 	.word	0x080065e0
 800101c:	20000274 	.word	0x20000274

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0a6      	sub	sp, #152	; 0x98
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fa88 	bl	8004544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2258      	movs	r2, #88	; 0x58
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fa7a 	bl	8004544 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001058:	2310      	movs	r3, #16
 800105a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fa66 	bl	8002550 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800108a:	f000 f913 	bl	80012b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a8:	2102      	movs	r1, #2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f966 	bl	800337c <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b6:	f000 f8fd 	bl	80012b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010ba:	2322      	movs	r3, #34	; 0x22
 80010bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fb8d 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010d4:	f000 f8ee 	bl	80012b4 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3798      	adds	r7, #152	; 0x98
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_I2C1_Init+0x74>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <MX_I2C1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_I2C1_Init+0x74>)
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <MX_I2C1_Init+0x7c>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_I2C1_Init+0x74>)
 800111c:	f000 fd26 	bl	8001b6c <HAL_I2C_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001126:	f000 f8c5 	bl	80012b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <MX_I2C1_Init+0x74>)
 800112e:	f001 f977 	bl	8002420 <HAL_I2CEx_ConfigAnalogFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001138:	f000 f8bc 	bl	80012b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_I2C1_Init+0x74>)
 8001140:	f001 f9b9 	bl	80024b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 f8b3 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000208 	.word	0x20000208
 8001158:	40005400 	.word	0x40005400
 800115c:	2000090e 	.word	0x2000090e

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <MX_USART2_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800116c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 80011a4:	f002 fd3e 	bl	8003c24 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f881 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000274 	.word	0x20000274
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MX_GPIO_Init+0xe8>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_GPIO_Init+0xe8>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xe8>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_GPIO_Init+0xe8>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_GPIO_Init+0xe8>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_GPIO_Init+0xe8>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xe8>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f000 fc7d 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0xec>)
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <MX_GPIO_Init+0xf0>)
 8001258:	f000 fae6 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800125c:	2320      	movs	r3, #32
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f000 fad7 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fac5 	bl	8001828 <HAL_GPIO_Init>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	10210000 	.word	0x10210000
 80012b0:	48000800 	.word	0x48000800

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x44>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x44>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x44>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x44>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x44>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 fa60 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_I2C_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d128      	bne.n	8001380 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_I2C_MspInit+0x80>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_I2C_MspInit+0x80>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_I2C_MspInit+0x80>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	2312      	movs	r3, #18
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001358:	2304      	movs	r3, #4
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <HAL_I2C_MspInit+0x84>)
 8001364:	f000 fa60 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_I2C_MspInit+0x80>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_I2C_MspInit+0x80>)
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001372:	61d3      	str	r3, [r2, #28]
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_I2C_MspInit+0x80>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40005400 	.word	0x40005400
 800138c:	40021000 	.word	0x40021000
 8001390:	48000400 	.word	0x48000400

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_UART_MspInit+0x7c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d128      	bne.n	8001408 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013e6:	230c      	movs	r3, #12
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f6:	2307      	movs	r3, #7
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f000 fa10 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40004400 	.word	0x40004400
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8b4 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x16>
		heap_end = &end;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <_sbrk+0x50>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_sbrk+0x54>)
 8001488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk+0x50>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_sbrk+0x50>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	466a      	mov	r2, sp
 800149a:	4293      	cmp	r3, r2
 800149c:	d907      	bls.n	80014ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800149e:	f003 f81f 	bl	80044e0 <__errno>
 80014a2:	4602      	mov	r2, r0
 80014a4:	230c      	movs	r3, #12
 80014a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e006      	b.n	80014bc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_sbrk+0x50>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <_sbrk+0x50>)
 80014b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000300 	.word	0x20000300

080014cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <SystemInit+0x28>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <SystemInit+0x28>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SystemInit+0x28>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopForever+0xa>)
	ldr	r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopForever+0xe>)
	adds	r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800150e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
	ldr	r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001516:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopForever+0x16>)
	cmp	r2, r3
 800151e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001522:	f7ff ffd3 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 ffe1 	bl	80044ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152a:	f7ff fccd 	bl	8000ec8 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001530:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001534:	08006890 	.word	0x08006890
	ldr	r0, =_sdata
 8001538:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800153c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001540:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001544:	200002fc 	.word	0x200002fc

08001548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>
	...

0800154c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_Init+0x28>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_Init+0x28>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f92f 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff feac 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40022000 	.word	0x40022000

08001578 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f939 	bl	800180e <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f90f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008
 80015fc:	200002f4 	.word	0x200002f4

08001600 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;  
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200002f4 	.word	0x200002f4

08001618 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_Delay+0x40>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000008 	.word	0x20000008

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff47 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff5c 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffb0 	bl	800177c <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e160      	b.n	8001afa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8152 	beq.w	8001af4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x38>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b12      	cmp	r3, #18
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	6939      	ldr	r1, [r7, #16]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d00b      	beq.n	80018fc <HAL_GPIO_Init+0xd4>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	2b11      	cmp	r3, #17
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b12      	cmp	r3, #18
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 0201 	and.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80ac 	beq.w	8001af4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b4:	4a59      	ldr	r2, [pc, #356]	; (8001b1c <HAL_GPIO_Init+0x2f4>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019de:	d025      	beq.n	8001a2c <HAL_GPIO_Init+0x204>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x2f8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d01f      	beq.n	8001a28 <HAL_GPIO_Init+0x200>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x2fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d019      	beq.n	8001a24 <HAL_GPIO_Init+0x1fc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1f8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x304>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1f4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x308>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1f0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1ec>
 8001a10:	2306      	movs	r3, #6
 8001a12:	e00c      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a14:	2307      	movs	r3, #7
 8001a16:	e00a      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a18:	2305      	movs	r3, #5
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a3e:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_GPIO_Init+0x2f4>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f ae97 	bne.w	8001838 <HAL_GPIO_Init+0x10>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	48001000 	.word	0x48001000
 8001b30:	48001400 	.word	0x48001400
 8001b34:	48001800 	.word	0x48001800
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e081      	b.n	8001c82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fbba 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d104      	bne.n	8001c06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	ea42 0103 	orr.w	r1, r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	021a      	lsls	r2, r3, #8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69d9      	ldr	r1, [r3, #28]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	f040 80da 	bne.w	8001e62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x30>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0d3      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff fc9c 	bl	8001600 <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f9e6 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0be      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2221      	movs	r2, #33	; 0x21
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	893a      	ldrh	r2, [r7, #8]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2bff      	cmp	r3, #255	; 0xff
 8001d16:	d90e      	bls.n	8001d36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fb48 	bl	80023c4 <I2C_TransferConfig>
 8001d34:	e06c      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fb37 	bl	80023c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d56:	e05b      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f9e3 	bl	8002128 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e07b      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d034      	beq.n	8001e10 <HAL_I2C_Master_Transmit+0x184>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d130      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f975 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e04d      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d90e      	bls.n	8001df0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	22ff      	movs	r2, #255	; 0xff
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	8979      	ldrh	r1, [r7, #10]
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 faeb 	bl	80023c4 <I2C_TransferConfig>
 8001dee:	e00f      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fada 	bl	80023c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d19e      	bne.n	8001d58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f9c2 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e01a      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	80002000 	.word	0x80002000
 8001e70:	fe00e800 	.word	0xfe00e800

08001e74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	460b      	mov	r3, r1
 8001e82:	817b      	strh	r3, [r7, #10]
 8001e84:	4613      	mov	r3, r2
 8001e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	f040 80db 	bne.w	800204c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2C_Master_Receive+0x30>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e0d4      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eac:	f7ff fba8 	bl	8001600 <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2319      	movs	r3, #25
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8f2 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0bf      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2222      	movs	r2, #34	; 0x22
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2bff      	cmp	r3, #255	; 0xff
 8001efe:	d90e      	bls.n	8001f1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	8979      	ldrh	r1, [r7, #10]
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_I2C_Master_Receive+0x1e4>)
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fa54 	bl	80023c4 <I2C_TransferConfig>
 8001f1c:	e06d      	b.n	8001ffa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	8979      	ldrh	r1, [r7, #10]
 8001f30:	4b49      	ldr	r3, [pc, #292]	; (8002058 <HAL_I2C_Master_Receive+0x1e4>)
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fa43 	bl	80023c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f3e:	e05c      	b.n	8001ffa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	6a39      	ldr	r1, [r7, #32]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f96b 	bl	8002220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e07c      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d034      	beq.n	8001ffa <HAL_I2C_Master_Receive+0x186>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d130      	bne.n	8001ffa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f880 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e04d      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2bff      	cmp	r3, #255	; 0xff
 8001fba:	d90e      	bls.n	8001fda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f9f6 	bl	80023c4 <I2C_TransferConfig>
 8001fd8:	e00f      	b.n	8001ffa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	8979      	ldrh	r1, [r7, #10]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f9e5 	bl	80023c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19d      	bne.n	8001f40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f8cd 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e01a      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_I2C_Master_Receive+0x1e8>)
 800202c:	400b      	ands	r3, r1
 800202e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	80002400 	.word	0x80002400
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d103      	bne.n	800207e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d007      	beq.n	800209c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	619a      	str	r2, [r3, #24]
  }
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b8:	e022      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d01e      	beq.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff fa9d 	bl	8001600 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d113      	bne.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e00f      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4013      	ands	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d0cd      	beq.n	80020ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002134:	e02c      	b.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f8dc 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e02a      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d01e      	beq.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff fa55 	bl	8001600 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d1cb      	bne.n	8002136 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	e028      	b.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f89c 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e026      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff fa19 	bl	8001600 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b20      	cmp	r3, #32
 8002214:	d1cf      	bne.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800222c:	e055      	b.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f860 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e053      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b20      	cmp	r3, #32
 800224e:	d129      	bne.n	80022a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d105      	bne.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e03f      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2220      	movs	r2, #32
 8002270:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800227e:	400b      	ands	r3, r1
 8002280:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e022      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7ff f9ac 	bl	8001600 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d302      	bcc.n	80022ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d1a2      	bne.n	800222e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	fe00e800 	.word	0xfe00e800

080022f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b10      	cmp	r3, #16
 8002310:	d151      	bne.n	80023b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002312:	e022      	b.n	800235a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d01e      	beq.n	800235a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231c:	f7ff f970 	bl	8001600 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d302      	bcc.n	8002332 <I2C_IsAcknowledgeFailed+0x3a>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02e      	b.n	80023b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b20      	cmp	r3, #32
 8002366:	d1d5      	bne.n	8002314 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2210      	movs	r2, #16
 800236e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fe71 	bl	8002060 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800238a:	400b      	ands	r3, r1
 800238c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0204 	orr.w	r2, r3, #4
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	fe00e800 	.word	0xfe00e800

080023c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	817b      	strh	r3, [r7, #10]
 80023d2:	4613      	mov	r3, r2
 80023d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	0d5b      	lsrs	r3, r3, #21
 80023e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <I2C_TransferConfig+0x58>)
 80023e6:	430b      	orrs	r3, r1
 80023e8:	43db      	mvns	r3, r3
 80023ea:	ea02 0103 	and.w	r1, r2, r3
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f4:	7a7b      	ldrb	r3, [r7, #9]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	03ff63ff 	.word	0x03ff63ff

08002420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	d138      	bne.n	80024a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002440:	2302      	movs	r3, #2
 8002442:	e032      	b.n	80024aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d139      	bne.n	8002540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e033      	b.n	8002542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2224      	movs	r2, #36	; 0x24
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002556:	af00      	add	r7, sp, #0
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f000 bf01 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8160 	beq.w	800283a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800257a:	4bae      	ldr	r3, [pc, #696]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002586:	4bab      	ldr	r3, [pc, #684]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d159      	bne.n	8002646 <HAL_RCC_OscConfig+0xf6>
 8002592:	4ba8      	ldr	r3, [pc, #672]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d152      	bne.n	8002646 <HAL_RCC_OscConfig+0xf6>
 80025a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0x82>
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0xae>
 80025d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80025e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002602:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002606:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800260a:	fa92 f2a2 	rbit	r2, r2
 800260e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002612:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002616:	fab2 f282 	clz	r2, r2
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f042 0220 	orr.w	r2, r2, #32
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f002 021f 	and.w	r2, r2, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8102 	beq.w	8002838 <HAL_RCC_OscConfig+0x2e8>
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80fc 	bne.w	8002838 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f000 be93 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x110>
 8002652:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e030      	b.n	80026c2 <HAL_RCC_OscConfig+0x172>
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x134>
 800266a:	4b72      	ldr	r3, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a71      	ldr	r2, [pc, #452]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 800267c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01e      	b.n	80026c2 <HAL_RCC_OscConfig+0x172>
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x15a>
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a67      	ldr	r2, [pc, #412]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a64      	ldr	r2, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x172>
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d059      	beq.n	8002780 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe ff98 	bl	8001600 <HAL_GetTick>
 80026d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d6:	f7fe ff93 	bl	8001600 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d902      	bls.n	80026ec <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f000 be40 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
 80026ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002700:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x1ce>
 8002718:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x1fa>
 800271e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002722:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002736:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800273a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800274e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002752:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002756:	fa92 f2a2 	rbit	r2, r2
 800275a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800275e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ab      	beq.n	80026d6 <HAL_RCC_OscConfig+0x186>
 800277e:	e05c      	b.n	800283a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe ff3e 	bl	8001600 <HAL_GetTick>
 8002784:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278a:	f7fe ff39 	bl	8001600 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d902      	bls.n	80027a0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	f000 bde6 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
 80027a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80027b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x282>
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x2ae>
 80027d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_RCC_OscConfig+0x2e4>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002802:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002806:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800280a:	fa92 f2a2 	rbit	r2, r2
 800280e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002812:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ab      	bne.n	800278a <HAL_RCC_OscConfig+0x23a>
 8002832:	e002      	b.n	800283a <HAL_RCC_OscConfig+0x2ea>
 8002834:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8170 	beq.w	8002b2a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800284a:	4bd0      	ldr	r3, [pc, #832]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002856:	4bcd      	ldr	r3, [pc, #820]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d16d      	bne.n	800293e <HAL_RCC_OscConfig+0x3ee>
 8002862:	4bca      	ldr	r3, [pc, #808]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800286a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286e:	d166      	bne.n	800293e <HAL_RCC_OscConfig+0x3ee>
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002882:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0x350>
 800289a:	4bbc      	ldr	r3, [pc, #752]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x378>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028c4:	4bb1      	ldr	r3, [pc, #708]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2202      	movs	r2, #2
 80028ca:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80028ce:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80028d2:	fa92 f2a2 	rbit	r2, r2
 80028d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80028da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_RCC_OscConfig+0x3ba>
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d002      	beq.n	800290a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f000 bd31 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4ba0      	ldr	r3, [pc, #640]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	21f8      	movs	r1, #248	; 0xf8
 800291a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002922:	fa91 f1a1 	rbit	r1, r1
 8002926:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800292a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800292e:	fab1 f181 	clz	r1, r1
 8002932:	b2c9      	uxtb	r1, r1
 8002934:	408b      	lsls	r3, r1
 8002936:	4995      	ldr	r1, [pc, #596]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293c:	e0f5      	b.n	8002b2a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8085 	beq.w	8002a54 <HAL_RCC_OscConfig+0x504>
 800294a:	2301      	movs	r3, #1
 800294c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800295c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800296a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	2301      	movs	r3, #1
 8002974:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fe43 	bl	8001600 <HAL_GetTick>
 800297a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fe3e 	bl	8001600 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d902      	bls.n	8002996 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	f000 bceb 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80029a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x476>
 80029c0:	4b72      	ldr	r3, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e013      	b.n	80029ee <HAL_RCC_OscConfig+0x49e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029ea:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2202      	movs	r2, #2
 80029f0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002a00:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0af      	beq.n	8002980 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	21f8      	movs	r1, #248	; 0xf8
 8002a30:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002a38:	fa91 f1a1 	rbit	r1, r1
 8002a3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a44:	fab1 f181 	clz	r1, r1
 8002a48:	b2c9      	uxtb	r1, r1
 8002a4a:	408b      	lsls	r3, r1
 8002a4c:	494f      	ldr	r1, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
 8002a52:	e06a      	b.n	8002b2a <HAL_RCC_OscConfig+0x5da>
 8002a54:	2301      	movs	r3, #1
 8002a56:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fdbe 	bl	8001600 <HAL_GetTick>
 8002a84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fdb9 	bl	8001600 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	f000 bc66 	b.w	800336c <HAL_RCC_OscConfig+0xe1c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x580>
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e013      	b.n	8002af8 <HAL_RCC_OscConfig+0x5a8>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ae8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_OscConfig+0x63c>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002afe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002b0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f042 0220 	orr.w	r2, r2, #32
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f002 021f 	and.w	r2, r2, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1af      	bne.n	8002a8a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80da 	beq.w	8002cee <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d069      	beq.n	8002c18 <HAL_RCC_OscConfig+0x6c8>
 8002b44:	2301      	movs	r3, #1
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_OscConfig+0x640>)
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fd47 	bl	8001600 <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e00d      	b.n	8002b94 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe fd42 	bl	8001600 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d905      	bls.n	8002b94 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e3ef      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	10908120 	.word	0x10908120
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bac:	2202      	movs	r2, #2
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd8:	4ba4      	ldr	r3, [pc, #656]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002be0:	2102      	movs	r1, #2
 8002be2:	6019      	str	r1, [r3, #0]
 8002be4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f1a3 	rbit	r1, r3
 8002bee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bf2:	6019      	str	r1, [r3, #0]
  return result;
 8002bf4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0b0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x628>
 8002c16:	e06a      	b.n	8002cee <HAL_RCC_OscConfig+0x79e>
 8002c18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <HAL_RCC_OscConfig+0x920>)
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	2300      	movs	r3, #0
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fcd9 	bl	8001600 <HAL_GetTick>
 8002c4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c52:	e009      	b.n	8002c68 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe fcd4 	bl	8001600 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e381      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8002c68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c84:	2202      	movs	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b6e      	ldr	r3, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cb8:	2102      	movs	r1, #2
 8002cba:	6019      	str	r1, [r3, #0]
 8002cbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f1a3 	rbit	r1, r3
 8002cc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cca:	6019      	str	r1, [r3, #0]
  return result;
 8002ccc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1b2      	bne.n	8002c54 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8157 	beq.w	8002fac <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d112      	bne.n	8002d36 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a55      	ldr	r2, [pc, #340]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	61d3      	str	r3, [r2, #28]
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <HAL_RCC_OscConfig+0x924>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11a      	bne.n	8002d78 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_OscConfig+0x924>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_RCC_OscConfig+0x924>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fc57 	bl	8001600 <HAL_GetTick>
 8002d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	e009      	b.n	8002d6c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe fc52 	bl	8001600 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e2ff      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x924>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ef      	beq.n	8002d58 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x840>
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	e02f      	b.n	8002df0 <HAL_RCC_OscConfig+0x8a0>
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x864>
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0x8a0>
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x888>
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0x8a0>
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6213      	str	r3, [r2, #32]
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002dea:	f023 0304 	bic.w	r3, r3, #4
 8002dee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d06a      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fc01 	bl	8001600 <HAL_GetTick>
 8002dfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fbfc 	bl	8001600 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e2a7      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8002e1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	fa93 f2a3 	rbit	r2, r3
 8002e46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e4a:	601a      	str	r2, [r3, #0]
  return result;
 8002e4c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x928>
 8002e66:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <HAL_RCC_OscConfig+0x91c>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	e013      	b.n	8002e94 <HAL_RCC_OscConfig+0x944>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	10908120 	.word	0x10908120
 8002e74:	40007000 	.word	0x40007000
 8002e78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	4bc0      	ldr	r3, [pc, #768]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e98:	2102      	movs	r1, #2
 8002e9a:	6011      	str	r1, [r2, #0]
 8002e9c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	fa92 f1a2 	rbit	r1, r2
 8002ea6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002eaa:	6011      	str	r1, [r2, #0]
  return result;
 8002eac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d09a      	beq.n	8002e04 <HAL_RCC_OscConfig+0x8b4>
 8002ece:	e063      	b.n	8002f98 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fb96 	bl	8001600 <HAL_GetTick>
 8002ed4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fb91 	bl	8001600 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e23c      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8002ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_OscConfig+0x9f2>
 8002f3c:	4b95      	ldr	r3, [pc, #596]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	e00d      	b.n	8002f5e <HAL_RCC_OscConfig+0xa0e>
 8002f42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f46:	2202      	movs	r2, #2
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b8e      	ldr	r3, [pc, #568]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f62:	2102      	movs	r1, #2
 8002f64:	6011      	str	r1, [r2, #0]
 8002f66:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fa92 f1a2 	rbit	r1, r2
 8002f70:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f74:	6011      	str	r1, [r2, #0]
  return result;
 8002f76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1a0      	bne.n	8002eda <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f98:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a7b      	ldr	r2, [pc, #492]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 81d9 	beq.w	800336a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb8:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	f000 81a6 	beq.w	8003312 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f040 811e 	bne.w	800320e <HAL_RCC_OscConfig+0xcbe>
 8002fd2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fea:	601a      	str	r2, [r3, #0]
  return result;
 8002fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ff0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ffc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	461a      	mov	r2, r3
 8003004:	2300      	movs	r3, #0
 8003006:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fafa 	bl	8001600 <HAL_GetTick>
 800300c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003010:	e009      	b.n	8003026 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe faf5 	bl	8001600 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1a2      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8003026:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800303e:	601a      	str	r2, [r3, #0]
  return result;
 8003040:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003044:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_RCC_OscConfig+0xb10>
 800305a:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e01b      	b.n	8003098 <HAL_RCC_OscConfig+0xb48>
 8003060:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800307e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800309c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a0:	6011      	str	r1, [r2, #0]
 80030a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fa92 f1a2 	rbit	r1, r2
 80030ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030b0:	6011      	str	r1, [r2, #0]
  return result;
 80030b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f002 021f 	and.w	r2, r2, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19e      	bne.n	8003012 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f023 020f 	bic.w	r2, r3, #15
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	492c      	ldr	r1, [pc, #176]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a19      	ldr	r1, [r3, #32]
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800310c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800311c:	601a      	str	r2, [r3, #0]
  return result;
 800311e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003122:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800312e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	461a      	mov	r2, r3
 8003136:	2301      	movs	r3, #1
 8003138:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fa61 	bl	8001600 <HAL_GetTick>
 800313e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003142:	e009      	b.n	8003158 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fa5c 	bl	8001600 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e109      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8003158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800315c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003170:	601a      	str	r2, [r3, #0]
  return result;
 8003172:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0xc48>
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <HAL_RCC_OscConfig+0xc44>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	e01e      	b.n	80031d0 <HAL_RCC_OscConfig+0xc80>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800319c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0xe28>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fa92 f1a2 	rbit	r1, r2
 80031e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031e8:	6011      	str	r1, [r2, #0]
  return result;
 80031ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f002 021f 	and.w	r2, r2, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d09b      	beq.n	8003144 <HAL_RCC_OscConfig+0xbf4>
 800320c:	e0ad      	b.n	800336a <HAL_RCC_OscConfig+0xe1a>
 800320e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003226:	601a      	str	r2, [r3, #0]
  return result;
 8003228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800322c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003238:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe f9dc 	bl	8001600 <HAL_GetTick>
 8003248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	e009      	b.n	8003262 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe f9d7 	bl	8001600 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e084      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
 8003262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327a:	601a      	str	r2, [r3, #0]
  return result;
 800327c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003280:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_RCC_OscConfig+0xd4c>
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_RCC_OscConfig+0xe28>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	e01b      	b.n	80032d4 <HAL_RCC_OscConfig+0xd84>
 800329c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f107 0318 	add.w	r3, r7, #24
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCC_OscConfig+0xe28>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f107 0214 	add.w	r2, r7, #20
 80032d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032dc:	6011      	str	r1, [r2, #0]
 80032de:	f107 0214 	add.w	r2, r7, #20
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	fa92 f1a2 	rbit	r1, r2
 80032e8:	f107 0210 	add.w	r2, r7, #16
 80032ec:	6011      	str	r1, [r2, #0]
  return result;
 80032ee:	f107 0210 	add.w	r2, r7, #16
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d19e      	bne.n	800324e <HAL_RCC_OscConfig+0xcfe>
 8003310:	e02b      	b.n	800336a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e025      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_RCC_OscConfig+0xe28>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_RCC_OscConfig+0xe28>)
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003330:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003334:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d111      	bne.n	8003366 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003342:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003350:	429a      	cmp	r2, r3
 8003352:	d108      	bne.n	8003366 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b09e      	sub	sp, #120	; 0x78
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e162      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b90      	ldr	r3, [pc, #576]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b8d      	ldr	r3, [pc, #564]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	498b      	ldr	r1, [pc, #556]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b89      	ldr	r3, [pc, #548]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e14a      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d0:	4b82      	ldr	r3, [pc, #520]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	497f      	ldr	r1, [pc, #508]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80dc 	beq.w	80035a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d13c      	bne.n	8003472 <HAL_RCC_ClockConfig+0xf6>
 80033f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_RCC_ClockConfig+0xa6>
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	e00f      	b.n	8003442 <HAL_RCC_ClockConfig+0xc6>
 8003422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003426:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	667b      	str	r3, [r7, #100]	; 0x64
 8003430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
 8003436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003446:	65ba      	str	r2, [r7, #88]	; 0x58
 8003448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344a:	fa92 f2a2 	rbit	r2, r2
 800344e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003452:	fab2 f282 	clz	r2, r2
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f042 0220 	orr.w	r2, r2, #32
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f002 021f 	and.w	r2, r2, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d17b      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0f3      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d13c      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x178>
 800347a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x128>
 800349e:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e00f      	b.n	80034c4 <HAL_RCC_ClockConfig+0x148>
 80034a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
 80034b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80034ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13a      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b2      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
 80034f4:	2302      	movs	r3, #2
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	e00d      	b.n	8003538 <HAL_RCC_ClockConfig+0x1bc>
 800351c:	2302      	movs	r3, #2
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	2302      	movs	r3, #2
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2202      	movs	r2, #2
 800353a:	61ba      	str	r2, [r7, #24]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	617a      	str	r2, [r7, #20]
  return result;
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e079      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	491a      	ldr	r1, [pc, #104]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe f842 	bl	8001600 <HAL_GetTick>
 800357c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe f83e 	bl	8001600 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e061      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d214      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_RCC_ClockConfig+0x25c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e040      	b.n	800365a <HAL_RCC_ClockConfig+0x2de>
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_RCC_ClockConfig+0x2e8>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	491a      	ldr	r1, [pc, #104]	; (8003664 <HAL_RCC_ClockConfig+0x2e8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x2e8>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4912      	ldr	r1, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x2e8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800361e:	f000 f829 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003622:	4601      	mov	r1, r0
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCC_ClockConfig+0x2e8>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362c:	22f0      	movs	r2, #240	; 0xf0
 800362e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	fa92 f2a2 	rbit	r2, r2
 8003636:	60fa      	str	r2, [r7, #12]
  return result;
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	40d3      	lsrs	r3, r2
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x2ec>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	fa21 f303 	lsr.w	r3, r1, r3
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <HAL_RCC_ClockConfig+0x2f0>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x2f4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd ff90 	bl	8001578 <HAL_InitTick>
  
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3778      	adds	r7, #120	; 0x78
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	080065f4 	.word	0x080065f4
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b08b      	sub	sp, #44	; 0x2c
 8003678:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x30>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x36>
 80036a2:	e03f      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCC_GetSysClockFreq+0xc8>)
 80036a6:	623b      	str	r3, [r7, #32]
      break;
 80036a8:	e03f      	b.n	800372a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	fa92 f2a2 	rbit	r2, r2
 80036bc:	607a      	str	r2, [r7, #4]
  return result;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	40d3      	lsrs	r3, r2
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	220f      	movs	r2, #15
 80036d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	fa92 f2a2 	rbit	r2, r2
 80036e0:	60fa      	str	r2, [r7, #12]
  return result;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	fab2 f282 	clz	r2, r2
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	40d3      	lsrs	r3, r2
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036fc:	4a0f      	ldr	r2, [pc, #60]	; (800373c <HAL_RCC_GetSysClockFreq+0xc8>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	fbb2 f2f3 	udiv	r2, r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	e007      	b.n	800371e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800370e:	4a0b      	ldr	r2, [pc, #44]	; (800373c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fbb2 f2f3 	udiv	r2, r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	623b      	str	r3, [r7, #32]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003726:	623b      	str	r3, [r7, #32]
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6a3b      	ldr	r3, [r7, #32]
}
 800372c:	4618      	mov	r0, r3
 800372e:	372c      	adds	r7, #44	; 0x2c
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	007a1200 	.word	0x007a1200
 8003740:	0800660c 	.word	0x0800660c
 8003744:	0800661c 	.word	0x0800661c

08003748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003766:	f7ff ffef 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 800376a:	4601      	mov	r1, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003774:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	fa92 f2a2 	rbit	r2, r2
 8003780:	603a      	str	r2, [r7, #0]
  return result;
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	40d3      	lsrs	r3, r2
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	08006604 	.word	0x08006604

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037aa:	f7ff ffcd 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 80037ae:	4601      	mov	r1, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	fa92 f2a2 	rbit	r2, r2
 80037c4:	603a      	str	r2, [r7, #0]
  return result;
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	40d3      	lsrs	r3, r2
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037d2:	5cd3      	ldrb	r3, [r2, r3]
 80037d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08006604 	.word	0x08006604

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b092      	sub	sp, #72	; 0x48
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80d7 	beq.w	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380c:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10e      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4a4a      	ldr	r2, [pc, #296]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	61d3      	str	r3, [r2, #28]
 8003824:	4b48      	ldr	r3, [pc, #288]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b45      	ldr	r3, [pc, #276]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a41      	ldr	r2, [pc, #260]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd fed7 	bl	8001600 <HAL_GetTick>
 8003852:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd fed3 	bl	8001600 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b64      	cmp	r3, #100	; 0x64
 8003862:	d901      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1d6      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8084 	beq.w	800398e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003890:	429a      	cmp	r2, r3
 8003892:	d07c      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	2301      	movs	r3, #1
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	461a      	mov	r2, r3
 80038e2:	2300      	movs	r3, #0
 80038e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04b      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd fe83 	bl	8001600 <HAL_GetTick>
 80038fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd fe7f 	bl	8001600 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e180      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003914:	2302      	movs	r3, #2
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	2302      	movs	r3, #2
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	61fb      	str	r3, [r7, #28]
  return result;
 800392c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d108      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003942:	4b01      	ldr	r3, [pc, #4]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	e00d      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	10908100 	.word	0x10908100
 8003954:	2302      	movs	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	4ba0      	ldr	r3, [pc, #640]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2202      	movs	r2, #2
 8003966:	613a      	str	r2, [r7, #16]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	fa92 f2a2 	rbit	r2, r2
 800396e:	60fa      	str	r2, [r7, #12]
  return result;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0b7      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800398e:	4b95      	ldr	r3, [pc, #596]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4992      	ldr	r1, [pc, #584]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4a8d      	ldr	r2, [pc, #564]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c0:	4b88      	ldr	r3, [pc, #544]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f023 0203 	bic.w	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4985      	ldr	r1, [pc, #532]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	497e      	ldr	r1, [pc, #504]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039fc:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4976      	ldr	r1, [pc, #472]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f023 0210 	bic.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	496f      	ldr	r1, [pc, #444]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	4967      	ldr	r1, [pc, #412]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a56:	4b63      	ldr	r3, [pc, #396]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f023 0220 	bic.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4960      	ldr	r1, [pc, #384]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a74:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	4958      	ldr	r1, [pc, #352]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4951      	ldr	r1, [pc, #324]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	4949      	ldr	r1, [pc, #292]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ace:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4942      	ldr	r1, [pc, #264]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	493a      	ldr	r1, [pc, #232]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4933      	ldr	r1, [pc, #204]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	492b      	ldr	r1, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4924      	ldr	r1, [pc, #144]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	491c      	ldr	r1, [pc, #112]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	4915      	ldr	r1, [pc, #84]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	490d      	ldr	r1, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bca:	4906      	ldr	r1, [pc, #24]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	490b      	ldr	r1, [pc, #44]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3748      	adds	r7, #72	; 0x48
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e040      	b.n	8003cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fba4 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8c0 	bl	8003de8 <UART_SetConfig>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e022      	b.n	8003cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 face 	bl	800421c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb55 	bl	8004360 <UART_CheckIdleState>
 8003cb6:	4603      	mov	r3, r0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	f040 8081 	bne.w	8003ddc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_Transmit+0x26>
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e079      	b.n	8003dde <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Transmit+0x38>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e072      	b.n	8003dde <HAL_UART_Transmit+0x11e>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fc78 	bl	8001600 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d108      	bne.n	8003d3e <HAL_UART_Transmit+0x7e>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e003      	b.n	8003d46 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d46:	e02d      	b.n	8003da4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2180      	movs	r1, #128	; 0x80
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fb49 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e03d      	b.n	8003dde <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d74:	b292      	uxth	r2, r2
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e008      	b.n	8003d92 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1cb      	bne.n	8003d48 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2140      	movs	r1, #64	; 0x40
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb15 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e009      	b.n	8003dde <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4bac      	ldr	r3, [pc, #688]	; (80040c8 <UART_SetConfig+0x2e0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a9a      	ldr	r2, [pc, #616]	; (80040cc <UART_SetConfig+0x2e4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d121      	bne.n	8003eac <UART_SetConfig+0xc4>
 8003e68:	4b99      	ldr	r3, [pc, #612]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d817      	bhi.n	8003ea4 <UART_SetConfig+0xbc>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <UART_SetConfig+0x94>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003e9f 	.word	0x08003e9f
 8003e88:	08003e93 	.word	0x08003e93
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e0b2      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003e92:	2302      	movs	r3, #2
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e0af      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e0ac      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e0a9      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	bf00      	nop
 8003eaa:	e0a5      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a88      	ldr	r2, [pc, #544]	; (80040d4 <UART_SetConfig+0x2ec>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d123      	bne.n	8003efe <UART_SetConfig+0x116>
 8003eb6:	4b86      	ldr	r3, [pc, #536]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d012      	beq.n	8003eea <UART_SetConfig+0x102>
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d802      	bhi.n	8003ed0 <UART_SetConfig+0xe8>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <UART_SetConfig+0xf6>
 8003ece:	e012      	b.n	8003ef6 <UART_SetConfig+0x10e>
 8003ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed4:	d00c      	beq.n	8003ef0 <UART_SetConfig+0x108>
 8003ed6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eda:	d003      	beq.n	8003ee4 <UART_SetConfig+0xfc>
 8003edc:	e00b      	b.n	8003ef6 <UART_SetConfig+0x10e>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e089      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e086      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003eea:	2304      	movs	r3, #4
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e083      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e080      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	bf00      	nop
 8003efc:	e07c      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <UART_SetConfig+0x2f0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d123      	bne.n	8003f50 <UART_SetConfig+0x168>
 8003f08:	4b71      	ldr	r3, [pc, #452]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f14:	d012      	beq.n	8003f3c <UART_SetConfig+0x154>
 8003f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f1a:	d802      	bhi.n	8003f22 <UART_SetConfig+0x13a>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <UART_SetConfig+0x148>
 8003f20:	e012      	b.n	8003f48 <UART_SetConfig+0x160>
 8003f22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f26:	d00c      	beq.n	8003f42 <UART_SetConfig+0x15a>
 8003f28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f2c:	d003      	beq.n	8003f36 <UART_SetConfig+0x14e>
 8003f2e:	e00b      	b.n	8003f48 <UART_SetConfig+0x160>
 8003f30:	2300      	movs	r3, #0
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e060      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f36:	2302      	movs	r3, #2
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e05d      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e05a      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f42:	2308      	movs	r3, #8
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e057      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	bf00      	nop
 8003f4e:	e053      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a61      	ldr	r2, [pc, #388]	; (80040dc <UART_SetConfig+0x2f4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d123      	bne.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d012      	beq.n	8003f8e <UART_SetConfig+0x1a6>
 8003f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6c:	d802      	bhi.n	8003f74 <UART_SetConfig+0x18c>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <UART_SetConfig+0x19a>
 8003f72:	e012      	b.n	8003f9a <UART_SetConfig+0x1b2>
 8003f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f78:	d00c      	beq.n	8003f94 <UART_SetConfig+0x1ac>
 8003f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f7e:	d003      	beq.n	8003f88 <UART_SetConfig+0x1a0>
 8003f80:	e00b      	b.n	8003f9a <UART_SetConfig+0x1b2>
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e037      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e034      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e031      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f94:	2308      	movs	r3, #8
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e02e      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	bf00      	nop
 8003fa0:	e02a      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <UART_SetConfig+0x2f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d123      	bne.n	8003ff4 <UART_SetConfig+0x20c>
 8003fac:	4b48      	ldr	r3, [pc, #288]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb8:	d012      	beq.n	8003fe0 <UART_SetConfig+0x1f8>
 8003fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fbe:	d802      	bhi.n	8003fc6 <UART_SetConfig+0x1de>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <UART_SetConfig+0x1ec>
 8003fc4:	e012      	b.n	8003fec <UART_SetConfig+0x204>
 8003fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fca:	d00c      	beq.n	8003fe6 <UART_SetConfig+0x1fe>
 8003fcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd0:	d003      	beq.n	8003fda <UART_SetConfig+0x1f2>
 8003fd2:	e00b      	b.n	8003fec <UART_SetConfig+0x204>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e00e      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e00b      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e008      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e005      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fec:	2310      	movs	r3, #16
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	bf00      	nop
 8003ff2:	e001      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	f040 8090 	bne.w	8004124 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d86c      	bhi.n	80040e4 <UART_SetConfig+0x2fc>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x228>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	08004055 	.word	0x08004055
 8004018:	08004075 	.word	0x08004075
 800401c:	080040e5 	.word	0x080040e5
 8004020:	08004091 	.word	0x08004091
 8004024:	080040e5 	.word	0x080040e5
 8004028:	080040e5 	.word	0x080040e5
 800402c:	080040e5 	.word	0x080040e5
 8004030:	080040b1 	.word	0x080040b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7ff fb94 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8004038:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	005a      	lsls	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	b29b      	uxth	r3, r3
 8004050:	61bb      	str	r3, [r7, #24]
        break;
 8004052:	e04a      	b.n	80040ea <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7ff fba6 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004058:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	441a      	add	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	61bb      	str	r3, [r7, #24]
        break;
 8004072:	e03a      	b.n	80040ea <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800407e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6852      	ldr	r2, [r2, #4]
 8004086:	fbb3 f3f2 	udiv	r3, r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	61bb      	str	r3, [r7, #24]
        break;
 800408e:	e02c      	b.n	80040ea <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004090:	f7ff faf0 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8004094:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	005a      	lsls	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	61bb      	str	r3, [r7, #24]
        break;
 80040ae:	e01c      	b.n	80040ea <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	61bb      	str	r3, [r7, #24]
        break;
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x302>
 80040c8:	efff69f3 	.word	0xefff69f3
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004800 	.word	0x40004800
 80040dc:	40004c00 	.word	0x40004c00
 80040e0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
        break;
 80040e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b0f      	cmp	r3, #15
 80040ee:	d916      	bls.n	800411e <UART_SetConfig+0x336>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f6:	d212      	bcs.n	800411e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f023 030f 	bic.w	r3, r3, #15
 8004100:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	b29b      	uxth	r3, r3
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	b29a      	uxth	r2, r3
 800410e:	897b      	ldrh	r3, [r7, #10]
 8004110:	4313      	orrs	r3, r2
 8004112:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	897a      	ldrh	r2, [r7, #10]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e072      	b.n	8004204 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
 8004122:	e06f      	b.n	8004204 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004124:	7ffb      	ldrb	r3, [r7, #31]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d85b      	bhi.n	80041e2 <UART_SetConfig+0x3fa>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x348>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004155 	.word	0x08004155
 8004134:	08004173 	.word	0x08004173
 8004138:	08004191 	.word	0x08004191
 800413c:	080041e3 	.word	0x080041e3
 8004140:	080041ad 	.word	0x080041ad
 8004144:	080041e3 	.word	0x080041e3
 8004148:	080041e3 	.word	0x080041e3
 800414c:	080041e3 	.word	0x080041e3
 8004150:	080041cb 	.word	0x080041cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7ff fb04 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8004158:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	085a      	lsrs	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	61bb      	str	r3, [r7, #24]
        break;
 8004170:	e03a      	b.n	80041e8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004172:	f7ff fb17 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004176:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085a      	lsrs	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	b29b      	uxth	r3, r3
 800418c:	61bb      	str	r3, [r7, #24]
        break;
 800418e:	e02b      	b.n	80041e8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800419a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6852      	ldr	r2, [r2, #4]
 80041a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	61bb      	str	r3, [r7, #24]
        break;
 80041aa:	e01d      	b.n	80041e8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ac:	f7ff fa62 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80041b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085a      	lsrs	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	61bb      	str	r3, [r7, #24]
        break;
 80041c8:	e00e      	b.n	80041e8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	61bb      	str	r3, [r7, #24]
        break;
 80041e0:	e002      	b.n	80041e8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
        break;
 80041e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d908      	bls.n	8004200 <UART_SetConfig+0x418>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d204      	bcs.n	8004200 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004210:	7dfb      	ldrb	r3, [r7, #23]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop

0800421c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01a      	beq.n	8004332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431a:	d10a      	bne.n	8004332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800436e:	f7fd f947 	bl	8001600 <HAL_GetTick>
 8004372:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b08      	cmp	r3, #8
 8004380:	d10e      	bne.n	80043a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f82a 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e020      	b.n	80043e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d10e      	bne.n	80043cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f814 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e00a      	b.n	80043e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	e05d      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d059      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004404:	f7fd f8fc 	bl	8001600 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d302      	bcc.n	800441a <UART_WaitOnFlagUntilTimeout+0x30>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11b      	bne.n	8004452 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004428:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e042      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02b      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446e:	d123      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004478:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e00f      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d092      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <__errno>:
 80044e0:	4b01      	ldr	r3, [pc, #4]	; (80044e8 <__errno+0x8>)
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	2000000c 	.word	0x2000000c

080044ec <__libc_init_array>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4e0d      	ldr	r6, [pc, #52]	; (8004524 <__libc_init_array+0x38>)
 80044f0:	4c0d      	ldr	r4, [pc, #52]	; (8004528 <__libc_init_array+0x3c>)
 80044f2:	1ba4      	subs	r4, r4, r6
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	2500      	movs	r5, #0
 80044f8:	42a5      	cmp	r5, r4
 80044fa:	d109      	bne.n	8004510 <__libc_init_array+0x24>
 80044fc:	4e0b      	ldr	r6, [pc, #44]	; (800452c <__libc_init_array+0x40>)
 80044fe:	4c0c      	ldr	r4, [pc, #48]	; (8004530 <__libc_init_array+0x44>)
 8004500:	f002 f85e 	bl	80065c0 <_init>
 8004504:	1ba4      	subs	r4, r4, r6
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	2500      	movs	r5, #0
 800450a:	42a5      	cmp	r5, r4
 800450c:	d105      	bne.n	800451a <__libc_init_array+0x2e>
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004514:	4798      	blx	r3
 8004516:	3501      	adds	r5, #1
 8004518:	e7ee      	b.n	80044f8 <__libc_init_array+0xc>
 800451a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800451e:	4798      	blx	r3
 8004520:	3501      	adds	r5, #1
 8004522:	e7f2      	b.n	800450a <__libc_init_array+0x1e>
 8004524:	08006888 	.word	0x08006888
 8004528:	08006888 	.word	0x08006888
 800452c:	08006888 	.word	0x08006888
 8004530:	0800688c 	.word	0x0800688c

08004534 <malloc>:
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <malloc+0xc>)
 8004536:	4601      	mov	r1, r0
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f000 b859 	b.w	80045f0 <_malloc_r>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <memset>:
 8004544:	4402      	add	r2, r0
 8004546:	4603      	mov	r3, r0
 8004548:	4293      	cmp	r3, r2
 800454a:	d100      	bne.n	800454e <memset+0xa>
 800454c:	4770      	bx	lr
 800454e:	f803 1b01 	strb.w	r1, [r3], #1
 8004552:	e7f9      	b.n	8004548 <memset+0x4>

08004554 <_free_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4605      	mov	r5, r0
 8004558:	2900      	cmp	r1, #0
 800455a:	d045      	beq.n	80045e8 <_free_r+0x94>
 800455c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004560:	1f0c      	subs	r4, r1, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb8      	it	lt
 8004566:	18e4      	addlt	r4, r4, r3
 8004568:	f001 fb87 	bl	8005c7a <__malloc_lock>
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <_free_r+0x98>)
 800456e:	6813      	ldr	r3, [r2, #0]
 8004570:	4610      	mov	r0, r2
 8004572:	b933      	cbnz	r3, 8004582 <_free_r+0x2e>
 8004574:	6063      	str	r3, [r4, #4]
 8004576:	6014      	str	r4, [r2, #0]
 8004578:	4628      	mov	r0, r5
 800457a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457e:	f001 bb7d 	b.w	8005c7c <__malloc_unlock>
 8004582:	42a3      	cmp	r3, r4
 8004584:	d90c      	bls.n	80045a0 <_free_r+0x4c>
 8004586:	6821      	ldr	r1, [r4, #0]
 8004588:	1862      	adds	r2, r4, r1
 800458a:	4293      	cmp	r3, r2
 800458c:	bf04      	itt	eq
 800458e:	681a      	ldreq	r2, [r3, #0]
 8004590:	685b      	ldreq	r3, [r3, #4]
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	bf04      	itt	eq
 8004596:	1852      	addeq	r2, r2, r1
 8004598:	6022      	streq	r2, [r4, #0]
 800459a:	6004      	str	r4, [r0, #0]
 800459c:	e7ec      	b.n	8004578 <_free_r+0x24>
 800459e:	4613      	mov	r3, r2
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	b10a      	cbz	r2, 80045a8 <_free_r+0x54>
 80045a4:	42a2      	cmp	r2, r4
 80045a6:	d9fa      	bls.n	800459e <_free_r+0x4a>
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	1858      	adds	r0, r3, r1
 80045ac:	42a0      	cmp	r0, r4
 80045ae:	d10b      	bne.n	80045c8 <_free_r+0x74>
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	4401      	add	r1, r0
 80045b4:	1858      	adds	r0, r3, r1
 80045b6:	4282      	cmp	r2, r0
 80045b8:	6019      	str	r1, [r3, #0]
 80045ba:	d1dd      	bne.n	8004578 <_free_r+0x24>
 80045bc:	6810      	ldr	r0, [r2, #0]
 80045be:	6852      	ldr	r2, [r2, #4]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	4401      	add	r1, r0
 80045c4:	6019      	str	r1, [r3, #0]
 80045c6:	e7d7      	b.n	8004578 <_free_r+0x24>
 80045c8:	d902      	bls.n	80045d0 <_free_r+0x7c>
 80045ca:	230c      	movs	r3, #12
 80045cc:	602b      	str	r3, [r5, #0]
 80045ce:	e7d3      	b.n	8004578 <_free_r+0x24>
 80045d0:	6820      	ldr	r0, [r4, #0]
 80045d2:	1821      	adds	r1, r4, r0
 80045d4:	428a      	cmp	r2, r1
 80045d6:	bf04      	itt	eq
 80045d8:	6811      	ldreq	r1, [r2, #0]
 80045da:	6852      	ldreq	r2, [r2, #4]
 80045dc:	6062      	str	r2, [r4, #4]
 80045de:	bf04      	itt	eq
 80045e0:	1809      	addeq	r1, r1, r0
 80045e2:	6021      	streq	r1, [r4, #0]
 80045e4:	605c      	str	r4, [r3, #4]
 80045e6:	e7c7      	b.n	8004578 <_free_r+0x24>
 80045e8:	bd38      	pop	{r3, r4, r5, pc}
 80045ea:	bf00      	nop
 80045ec:	20000200 	.word	0x20000200

080045f0 <_malloc_r>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	1ccd      	adds	r5, r1, #3
 80045f4:	f025 0503 	bic.w	r5, r5, #3
 80045f8:	3508      	adds	r5, #8
 80045fa:	2d0c      	cmp	r5, #12
 80045fc:	bf38      	it	cc
 80045fe:	250c      	movcc	r5, #12
 8004600:	2d00      	cmp	r5, #0
 8004602:	4606      	mov	r6, r0
 8004604:	db01      	blt.n	800460a <_malloc_r+0x1a>
 8004606:	42a9      	cmp	r1, r5
 8004608:	d903      	bls.n	8004612 <_malloc_r+0x22>
 800460a:	230c      	movs	r3, #12
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	2000      	movs	r0, #0
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	f001 fb32 	bl	8005c7a <__malloc_lock>
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <_malloc_r+0xac>)
 8004618:	6814      	ldr	r4, [r2, #0]
 800461a:	4621      	mov	r1, r4
 800461c:	b991      	cbnz	r1, 8004644 <_malloc_r+0x54>
 800461e:	4c20      	ldr	r4, [pc, #128]	; (80046a0 <_malloc_r+0xb0>)
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	b91b      	cbnz	r3, 800462c <_malloc_r+0x3c>
 8004624:	4630      	mov	r0, r6
 8004626:	f000 fc99 	bl	8004f5c <_sbrk_r>
 800462a:	6020      	str	r0, [r4, #0]
 800462c:	4629      	mov	r1, r5
 800462e:	4630      	mov	r0, r6
 8004630:	f000 fc94 	bl	8004f5c <_sbrk_r>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d124      	bne.n	8004682 <_malloc_r+0x92>
 8004638:	230c      	movs	r3, #12
 800463a:	6033      	str	r3, [r6, #0]
 800463c:	4630      	mov	r0, r6
 800463e:	f001 fb1d 	bl	8005c7c <__malloc_unlock>
 8004642:	e7e4      	b.n	800460e <_malloc_r+0x1e>
 8004644:	680b      	ldr	r3, [r1, #0]
 8004646:	1b5b      	subs	r3, r3, r5
 8004648:	d418      	bmi.n	800467c <_malloc_r+0x8c>
 800464a:	2b0b      	cmp	r3, #11
 800464c:	d90f      	bls.n	800466e <_malloc_r+0x7e>
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	50cd      	str	r5, [r1, r3]
 8004652:	18cc      	adds	r4, r1, r3
 8004654:	4630      	mov	r0, r6
 8004656:	f001 fb11 	bl	8005c7c <__malloc_unlock>
 800465a:	f104 000b 	add.w	r0, r4, #11
 800465e:	1d23      	adds	r3, r4, #4
 8004660:	f020 0007 	bic.w	r0, r0, #7
 8004664:	1ac3      	subs	r3, r0, r3
 8004666:	d0d3      	beq.n	8004610 <_malloc_r+0x20>
 8004668:	425a      	negs	r2, r3
 800466a:	50e2      	str	r2, [r4, r3]
 800466c:	e7d0      	b.n	8004610 <_malloc_r+0x20>
 800466e:	428c      	cmp	r4, r1
 8004670:	684b      	ldr	r3, [r1, #4]
 8004672:	bf16      	itet	ne
 8004674:	6063      	strne	r3, [r4, #4]
 8004676:	6013      	streq	r3, [r2, #0]
 8004678:	460c      	movne	r4, r1
 800467a:	e7eb      	b.n	8004654 <_malloc_r+0x64>
 800467c:	460c      	mov	r4, r1
 800467e:	6849      	ldr	r1, [r1, #4]
 8004680:	e7cc      	b.n	800461c <_malloc_r+0x2c>
 8004682:	1cc4      	adds	r4, r0, #3
 8004684:	f024 0403 	bic.w	r4, r4, #3
 8004688:	42a0      	cmp	r0, r4
 800468a:	d005      	beq.n	8004698 <_malloc_r+0xa8>
 800468c:	1a21      	subs	r1, r4, r0
 800468e:	4630      	mov	r0, r6
 8004690:	f000 fc64 	bl	8004f5c <_sbrk_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d0cf      	beq.n	8004638 <_malloc_r+0x48>
 8004698:	6025      	str	r5, [r4, #0]
 800469a:	e7db      	b.n	8004654 <_malloc_r+0x64>
 800469c:	20000200 	.word	0x20000200
 80046a0:	20000204 	.word	0x20000204

080046a4 <__cvt>:
 80046a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	ec55 4b10 	vmov	r4, r5, d0
 80046ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80046ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	460e      	mov	r6, r1
 80046b6:	4691      	mov	r9, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	bfb8      	it	lt
 80046bc:	4622      	movlt	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	f027 0720 	bic.w	r7, r7, #32
 80046c4:	bfbb      	ittet	lt
 80046c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046ca:	461d      	movlt	r5, r3
 80046cc:	2300      	movge	r3, #0
 80046ce:	232d      	movlt	r3, #45	; 0x2d
 80046d0:	bfb8      	it	lt
 80046d2:	4614      	movlt	r4, r2
 80046d4:	2f46      	cmp	r7, #70	; 0x46
 80046d6:	700b      	strb	r3, [r1, #0]
 80046d8:	d004      	beq.n	80046e4 <__cvt+0x40>
 80046da:	2f45      	cmp	r7, #69	; 0x45
 80046dc:	d100      	bne.n	80046e0 <__cvt+0x3c>
 80046de:	3601      	adds	r6, #1
 80046e0:	2102      	movs	r1, #2
 80046e2:	e000      	b.n	80046e6 <__cvt+0x42>
 80046e4:	2103      	movs	r1, #3
 80046e6:	ab03      	add	r3, sp, #12
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	ab02      	add	r3, sp, #8
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4632      	mov	r2, r6
 80046f0:	4653      	mov	r3, sl
 80046f2:	ec45 4b10 	vmov	d0, r4, r5
 80046f6:	f000 fcef 	bl	80050d8 <_dtoa_r>
 80046fa:	2f47      	cmp	r7, #71	; 0x47
 80046fc:	4680      	mov	r8, r0
 80046fe:	d102      	bne.n	8004706 <__cvt+0x62>
 8004700:	f019 0f01 	tst.w	r9, #1
 8004704:	d026      	beq.n	8004754 <__cvt+0xb0>
 8004706:	2f46      	cmp	r7, #70	; 0x46
 8004708:	eb08 0906 	add.w	r9, r8, r6
 800470c:	d111      	bne.n	8004732 <__cvt+0x8e>
 800470e:	f898 3000 	ldrb.w	r3, [r8]
 8004712:	2b30      	cmp	r3, #48	; 0x30
 8004714:	d10a      	bne.n	800472c <__cvt+0x88>
 8004716:	2200      	movs	r2, #0
 8004718:	2300      	movs	r3, #0
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8004722:	b918      	cbnz	r0, 800472c <__cvt+0x88>
 8004724:	f1c6 0601 	rsb	r6, r6, #1
 8004728:	f8ca 6000 	str.w	r6, [sl]
 800472c:	f8da 3000 	ldr.w	r3, [sl]
 8004730:	4499      	add	r9, r3
 8004732:	2200      	movs	r2, #0
 8004734:	2300      	movs	r3, #0
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fc f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800473e:	b938      	cbnz	r0, 8004750 <__cvt+0xac>
 8004740:	2230      	movs	r2, #48	; 0x30
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	454b      	cmp	r3, r9
 8004746:	d205      	bcs.n	8004754 <__cvt+0xb0>
 8004748:	1c59      	adds	r1, r3, #1
 800474a:	9103      	str	r1, [sp, #12]
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e7f8      	b.n	8004742 <__cvt+0x9e>
 8004750:	f8cd 900c 	str.w	r9, [sp, #12]
 8004754:	9b03      	ldr	r3, [sp, #12]
 8004756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004758:	eba3 0308 	sub.w	r3, r3, r8
 800475c:	4640      	mov	r0, r8
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	b004      	add	sp, #16
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004766 <__exponent>:
 8004766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004768:	2900      	cmp	r1, #0
 800476a:	4604      	mov	r4, r0
 800476c:	bfba      	itte	lt
 800476e:	4249      	neglt	r1, r1
 8004770:	232d      	movlt	r3, #45	; 0x2d
 8004772:	232b      	movge	r3, #43	; 0x2b
 8004774:	2909      	cmp	r1, #9
 8004776:	f804 2b02 	strb.w	r2, [r4], #2
 800477a:	7043      	strb	r3, [r0, #1]
 800477c:	dd20      	ble.n	80047c0 <__exponent+0x5a>
 800477e:	f10d 0307 	add.w	r3, sp, #7
 8004782:	461f      	mov	r7, r3
 8004784:	260a      	movs	r6, #10
 8004786:	fb91 f5f6 	sdiv	r5, r1, r6
 800478a:	fb06 1115 	mls	r1, r6, r5, r1
 800478e:	3130      	adds	r1, #48	; 0x30
 8004790:	2d09      	cmp	r5, #9
 8004792:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004796:	f103 32ff 	add.w	r2, r3, #4294967295
 800479a:	4629      	mov	r1, r5
 800479c:	dc09      	bgt.n	80047b2 <__exponent+0x4c>
 800479e:	3130      	adds	r1, #48	; 0x30
 80047a0:	3b02      	subs	r3, #2
 80047a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047a6:	42bb      	cmp	r3, r7
 80047a8:	4622      	mov	r2, r4
 80047aa:	d304      	bcc.n	80047b6 <__exponent+0x50>
 80047ac:	1a10      	subs	r0, r2, r0
 80047ae:	b003      	add	sp, #12
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b2:	4613      	mov	r3, r2
 80047b4:	e7e7      	b.n	8004786 <__exponent+0x20>
 80047b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ba:	f804 2b01 	strb.w	r2, [r4], #1
 80047be:	e7f2      	b.n	80047a6 <__exponent+0x40>
 80047c0:	2330      	movs	r3, #48	; 0x30
 80047c2:	4419      	add	r1, r3
 80047c4:	7083      	strb	r3, [r0, #2]
 80047c6:	1d02      	adds	r2, r0, #4
 80047c8:	70c1      	strb	r1, [r0, #3]
 80047ca:	e7ef      	b.n	80047ac <__exponent+0x46>

080047cc <_printf_float>:
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	b08d      	sub	sp, #52	; 0x34
 80047d2:	460c      	mov	r4, r1
 80047d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80047d8:	4616      	mov	r6, r2
 80047da:	461f      	mov	r7, r3
 80047dc:	4605      	mov	r5, r0
 80047de:	f001 fa33 	bl	8005c48 <_localeconv_r>
 80047e2:	6803      	ldr	r3, [r0, #0]
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fb fcfa 	bl	80001e0 <strlen>
 80047ec:	2300      	movs	r3, #0
 80047ee:	930a      	str	r3, [sp, #40]	; 0x28
 80047f0:	f8d8 3000 	ldr.w	r3, [r8]
 80047f4:	9005      	str	r0, [sp, #20]
 80047f6:	3307      	adds	r3, #7
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	f103 0208 	add.w	r2, r3, #8
 8004800:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004804:	f8d4 b000 	ldr.w	fp, [r4]
 8004808:	f8c8 2000 	str.w	r2, [r8]
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004814:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004818:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800481c:	9307      	str	r3, [sp, #28]
 800481e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	4ba7      	ldr	r3, [pc, #668]	; (8004ac4 <_printf_float+0x2f8>)
 8004828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800482c:	f7fc f986 	bl	8000b3c <__aeabi_dcmpun>
 8004830:	bb70      	cbnz	r0, 8004890 <_printf_float+0xc4>
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	4ba3      	ldr	r3, [pc, #652]	; (8004ac4 <_printf_float+0x2f8>)
 8004838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800483c:	f7fc f960 	bl	8000b00 <__aeabi_dcmple>
 8004840:	bb30      	cbnz	r0, 8004890 <_printf_float+0xc4>
 8004842:	2200      	movs	r2, #0
 8004844:	2300      	movs	r3, #0
 8004846:	4640      	mov	r0, r8
 8004848:	4649      	mov	r1, r9
 800484a:	f7fc f94f 	bl	8000aec <__aeabi_dcmplt>
 800484e:	b110      	cbz	r0, 8004856 <_printf_float+0x8a>
 8004850:	232d      	movs	r3, #45	; 0x2d
 8004852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004856:	4a9c      	ldr	r2, [pc, #624]	; (8004ac8 <_printf_float+0x2fc>)
 8004858:	4b9c      	ldr	r3, [pc, #624]	; (8004acc <_printf_float+0x300>)
 800485a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800485e:	bf8c      	ite	hi
 8004860:	4690      	movhi	r8, r2
 8004862:	4698      	movls	r8, r3
 8004864:	2303      	movs	r3, #3
 8004866:	f02b 0204 	bic.w	r2, fp, #4
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	9700      	str	r7, [sp, #0]
 8004874:	4633      	mov	r3, r6
 8004876:	aa0b      	add	r2, sp, #44	; 0x2c
 8004878:	4621      	mov	r1, r4
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f9e6 	bl	8004c4c <_printf_common>
 8004880:	3001      	adds	r0, #1
 8004882:	f040 808d 	bne.w	80049a0 <_printf_float+0x1d4>
 8004886:	f04f 30ff 	mov.w	r0, #4294967295
 800488a:	b00d      	add	sp, #52	; 0x34
 800488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fc f950 	bl	8000b3c <__aeabi_dcmpun>
 800489c:	b110      	cbz	r0, 80048a4 <_printf_float+0xd8>
 800489e:	4a8c      	ldr	r2, [pc, #560]	; (8004ad0 <_printf_float+0x304>)
 80048a0:	4b8c      	ldr	r3, [pc, #560]	; (8004ad4 <_printf_float+0x308>)
 80048a2:	e7da      	b.n	800485a <_printf_float+0x8e>
 80048a4:	6861      	ldr	r1, [r4, #4]
 80048a6:	1c4b      	adds	r3, r1, #1
 80048a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80048ac:	a80a      	add	r0, sp, #40	; 0x28
 80048ae:	d13e      	bne.n	800492e <_printf_float+0x162>
 80048b0:	2306      	movs	r3, #6
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	2300      	movs	r3, #0
 80048b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80048ba:	ab09      	add	r3, sp, #36	; 0x24
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	ec49 8b10 	vmov	d0, r8, r9
 80048c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048c6:	6022      	str	r2, [r4, #0]
 80048c8:	f8cd a004 	str.w	sl, [sp, #4]
 80048cc:	6861      	ldr	r1, [r4, #4]
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7ff fee8 	bl	80046a4 <__cvt>
 80048d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80048d8:	2b47      	cmp	r3, #71	; 0x47
 80048da:	4680      	mov	r8, r0
 80048dc:	d109      	bne.n	80048f2 <_printf_float+0x126>
 80048de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e0:	1cd8      	adds	r0, r3, #3
 80048e2:	db02      	blt.n	80048ea <_printf_float+0x11e>
 80048e4:	6862      	ldr	r2, [r4, #4]
 80048e6:	4293      	cmp	r3, r2
 80048e8:	dd47      	ble.n	800497a <_printf_float+0x1ae>
 80048ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80048ee:	fa5f fa8a 	uxtb.w	sl, sl
 80048f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80048f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048f8:	d824      	bhi.n	8004944 <_printf_float+0x178>
 80048fa:	3901      	subs	r1, #1
 80048fc:	4652      	mov	r2, sl
 80048fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004902:	9109      	str	r1, [sp, #36]	; 0x24
 8004904:	f7ff ff2f 	bl	8004766 <__exponent>
 8004908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490a:	1813      	adds	r3, r2, r0
 800490c:	2a01      	cmp	r2, #1
 800490e:	4681      	mov	r9, r0
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	dc02      	bgt.n	800491a <_printf_float+0x14e>
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	07d1      	lsls	r1, r2, #31
 8004918:	d501      	bpl.n	800491e <_printf_float+0x152>
 800491a:	3301      	adds	r3, #1
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0a5      	beq.n	8004872 <_printf_float+0xa6>
 8004926:	232d      	movs	r3, #45	; 0x2d
 8004928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492c:	e7a1      	b.n	8004872 <_printf_float+0xa6>
 800492e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004932:	f000 8177 	beq.w	8004c24 <_printf_float+0x458>
 8004936:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800493a:	d1bb      	bne.n	80048b4 <_printf_float+0xe8>
 800493c:	2900      	cmp	r1, #0
 800493e:	d1b9      	bne.n	80048b4 <_printf_float+0xe8>
 8004940:	2301      	movs	r3, #1
 8004942:	e7b6      	b.n	80048b2 <_printf_float+0xe6>
 8004944:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004948:	d119      	bne.n	800497e <_printf_float+0x1b2>
 800494a:	2900      	cmp	r1, #0
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	dd0c      	ble.n	800496a <_printf_float+0x19e>
 8004950:	6121      	str	r1, [r4, #16]
 8004952:	b913      	cbnz	r3, 800495a <_printf_float+0x18e>
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	07d2      	lsls	r2, r2, #31
 8004958:	d502      	bpl.n	8004960 <_printf_float+0x194>
 800495a:	3301      	adds	r3, #1
 800495c:	440b      	add	r3, r1
 800495e:	6123      	str	r3, [r4, #16]
 8004960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004962:	65a3      	str	r3, [r4, #88]	; 0x58
 8004964:	f04f 0900 	mov.w	r9, #0
 8004968:	e7d9      	b.n	800491e <_printf_float+0x152>
 800496a:	b913      	cbnz	r3, 8004972 <_printf_float+0x1a6>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	07d0      	lsls	r0, r2, #31
 8004970:	d501      	bpl.n	8004976 <_printf_float+0x1aa>
 8004972:	3302      	adds	r3, #2
 8004974:	e7f3      	b.n	800495e <_printf_float+0x192>
 8004976:	2301      	movs	r3, #1
 8004978:	e7f1      	b.n	800495e <_printf_float+0x192>
 800497a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800497e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004982:	4293      	cmp	r3, r2
 8004984:	db05      	blt.n	8004992 <_printf_float+0x1c6>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	07d1      	lsls	r1, r2, #31
 800498c:	d5e8      	bpl.n	8004960 <_printf_float+0x194>
 800498e:	3301      	adds	r3, #1
 8004990:	e7e5      	b.n	800495e <_printf_float+0x192>
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfd4      	ite	le
 8004996:	f1c3 0302 	rsble	r3, r3, #2
 800499a:	2301      	movgt	r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	e7de      	b.n	800495e <_printf_float+0x192>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	055a      	lsls	r2, r3, #21
 80049a4:	d407      	bmi.n	80049b6 <_printf_float+0x1ea>
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	4642      	mov	r2, r8
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	d12b      	bne.n	8004a0c <_printf_float+0x240>
 80049b4:	e767      	b.n	8004886 <_printf_float+0xba>
 80049b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049ba:	f240 80dc 	bls.w	8004b76 <_printf_float+0x3aa>
 80049be:	2200      	movs	r2, #0
 80049c0:	2300      	movs	r3, #0
 80049c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049c6:	f7fc f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d033      	beq.n	8004a36 <_printf_float+0x26a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <_printf_float+0x30c>)
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f af54 	beq.w	8004886 <_printf_float+0xba>
 80049de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e2:	429a      	cmp	r2, r3
 80049e4:	db02      	blt.n	80049ec <_printf_float+0x220>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	07d8      	lsls	r0, r3, #31
 80049ea:	d50f      	bpl.n	8004a0c <_printf_float+0x240>
 80049ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f af45 	beq.w	8004886 <_printf_float+0xba>
 80049fc:	f04f 0800 	mov.w	r8, #0
 8004a00:	f104 091a 	add.w	r9, r4, #26
 8004a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	4543      	cmp	r3, r8
 8004a0a:	dc09      	bgt.n	8004a20 <_printf_float+0x254>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	079b      	lsls	r3, r3, #30
 8004a10:	f100 8103 	bmi.w	8004c1a <_printf_float+0x44e>
 8004a14:	68e0      	ldr	r0, [r4, #12]
 8004a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a18:	4298      	cmp	r0, r3
 8004a1a:	bfb8      	it	lt
 8004a1c:	4618      	movlt	r0, r3
 8004a1e:	e734      	b.n	800488a <_printf_float+0xbe>
 8004a20:	2301      	movs	r3, #1
 8004a22:	464a      	mov	r2, r9
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f43f af2b 	beq.w	8004886 <_printf_float+0xba>
 8004a30:	f108 0801 	add.w	r8, r8, #1
 8004a34:	e7e6      	b.n	8004a04 <_printf_float+0x238>
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dc2b      	bgt.n	8004a94 <_printf_float+0x2c8>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <_printf_float+0x30c>)
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	f43f af1d 	beq.w	8004886 <_printf_float+0xba>
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	b923      	cbnz	r3, 8004a5a <_printf_float+0x28e>
 8004a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a52:	b913      	cbnz	r3, 8004a5a <_printf_float+0x28e>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	07d9      	lsls	r1, r3, #31
 8004a58:	d5d8      	bpl.n	8004a0c <_printf_float+0x240>
 8004a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	f43f af0e 	beq.w	8004886 <_printf_float+0xba>
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	f104 0a1a 	add.w	sl, r4, #26
 8004a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a74:	425b      	negs	r3, r3
 8004a76:	454b      	cmp	r3, r9
 8004a78:	dc01      	bgt.n	8004a7e <_printf_float+0x2b2>
 8004a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7c:	e794      	b.n	80049a8 <_printf_float+0x1dc>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f aefc 	beq.w	8004886 <_printf_float+0xba>
 8004a8e:	f109 0901 	add.w	r9, r9, #1
 8004a92:	e7ee      	b.n	8004a72 <_printf_float+0x2a6>
 8004a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	bfa8      	it	ge
 8004a9c:	461a      	movge	r2, r3
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	4691      	mov	r9, r2
 8004aa2:	dd07      	ble.n	8004ab4 <_printf_float+0x2e8>
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f aee9 	beq.w	8004886 <_printf_float+0xba>
 8004ab4:	f104 031a 	add.w	r3, r4, #26
 8004ab8:	f04f 0b00 	mov.w	fp, #0
 8004abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac0:	9306      	str	r3, [sp, #24]
 8004ac2:	e015      	b.n	8004af0 <_printf_float+0x324>
 8004ac4:	7fefffff 	.word	0x7fefffff
 8004ac8:	08006630 	.word	0x08006630
 8004acc:	0800662c 	.word	0x0800662c
 8004ad0:	08006638 	.word	0x08006638
 8004ad4:	08006634 	.word	0x08006634
 8004ad8:	0800663c 	.word	0x0800663c
 8004adc:	2301      	movs	r3, #1
 8004ade:	9a06      	ldr	r2, [sp, #24]
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f43f aecd 	beq.w	8004886 <_printf_float+0xba>
 8004aec:	f10b 0b01 	add.w	fp, fp, #1
 8004af0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004af4:	ebaa 0309 	sub.w	r3, sl, r9
 8004af8:	455b      	cmp	r3, fp
 8004afa:	dcef      	bgt.n	8004adc <_printf_float+0x310>
 8004afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b00:	429a      	cmp	r2, r3
 8004b02:	44d0      	add	r8, sl
 8004b04:	db15      	blt.n	8004b32 <_printf_float+0x366>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	07da      	lsls	r2, r3, #31
 8004b0a:	d412      	bmi.n	8004b32 <_printf_float+0x366>
 8004b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b10:	eba3 020a 	sub.w	r2, r3, sl
 8004b14:	eba3 0a01 	sub.w	sl, r3, r1
 8004b18:	4592      	cmp	sl, r2
 8004b1a:	bfa8      	it	ge
 8004b1c:	4692      	movge	sl, r2
 8004b1e:	f1ba 0f00 	cmp.w	sl, #0
 8004b22:	dc0e      	bgt.n	8004b42 <_printf_float+0x376>
 8004b24:	f04f 0800 	mov.w	r8, #0
 8004b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b2c:	f104 091a 	add.w	r9, r4, #26
 8004b30:	e019      	b.n	8004b66 <_printf_float+0x39a>
 8004b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1e5      	bne.n	8004b0c <_printf_float+0x340>
 8004b40:	e6a1      	b.n	8004886 <_printf_float+0xba>
 8004b42:	4653      	mov	r3, sl
 8004b44:	4642      	mov	r2, r8
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d1e9      	bne.n	8004b24 <_printf_float+0x358>
 8004b50:	e699      	b.n	8004886 <_printf_float+0xba>
 8004b52:	2301      	movs	r3, #1
 8004b54:	464a      	mov	r2, r9
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f ae92 	beq.w	8004886 <_printf_float+0xba>
 8004b62:	f108 0801 	add.w	r8, r8, #1
 8004b66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	eba3 030a 	sub.w	r3, r3, sl
 8004b70:	4543      	cmp	r3, r8
 8004b72:	dcee      	bgt.n	8004b52 <_printf_float+0x386>
 8004b74:	e74a      	b.n	8004a0c <_printf_float+0x240>
 8004b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b78:	2a01      	cmp	r2, #1
 8004b7a:	dc01      	bgt.n	8004b80 <_printf_float+0x3b4>
 8004b7c:	07db      	lsls	r3, r3, #31
 8004b7e:	d53a      	bpl.n	8004bf6 <_printf_float+0x42a>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4642      	mov	r2, r8
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f ae7b 	beq.w	8004886 <_printf_float+0xba>
 8004b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f108 0801 	add.w	r8, r8, #1
 8004ba0:	f43f ae71 	beq.w	8004886 <_printf_float+0xba>
 8004ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f103 3aff 	add.w	sl, r3, #4294967295
 8004bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f7fb ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bb6:	b9c8      	cbnz	r0, 8004bec <_printf_float+0x420>
 8004bb8:	4653      	mov	r3, sl
 8004bba:	4642      	mov	r2, r8
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d10e      	bne.n	8004be4 <_printf_float+0x418>
 8004bc6:	e65e      	b.n	8004886 <_printf_float+0xba>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4652      	mov	r2, sl
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f ae57 	beq.w	8004886 <_printf_float+0xba>
 8004bd8:	f108 0801 	add.w	r8, r8, #1
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4543      	cmp	r3, r8
 8004be2:	dcf1      	bgt.n	8004bc8 <_printf_float+0x3fc>
 8004be4:	464b      	mov	r3, r9
 8004be6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bea:	e6de      	b.n	80049aa <_printf_float+0x1de>
 8004bec:	f04f 0800 	mov.w	r8, #0
 8004bf0:	f104 0a1a 	add.w	sl, r4, #26
 8004bf4:	e7f2      	b.n	8004bdc <_printf_float+0x410>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e7df      	b.n	8004bba <_printf_float+0x3ee>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	464a      	mov	r2, r9
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae3e 	beq.w	8004886 <_printf_float+0xba>
 8004c0a:	f108 0801 	add.w	r8, r8, #1
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	4543      	cmp	r3, r8
 8004c16:	dcf0      	bgt.n	8004bfa <_printf_float+0x42e>
 8004c18:	e6fc      	b.n	8004a14 <_printf_float+0x248>
 8004c1a:	f04f 0800 	mov.w	r8, #0
 8004c1e:	f104 0919 	add.w	r9, r4, #25
 8004c22:	e7f4      	b.n	8004c0e <_printf_float+0x442>
 8004c24:	2900      	cmp	r1, #0
 8004c26:	f43f ae8b 	beq.w	8004940 <_printf_float+0x174>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c30:	ab09      	add	r3, sp, #36	; 0x24
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	ec49 8b10 	vmov	d0, r8, r9
 8004c38:	6022      	str	r2, [r4, #0]
 8004c3a:	f8cd a004 	str.w	sl, [sp, #4]
 8004c3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7ff fd2e 	bl	80046a4 <__cvt>
 8004c48:	4680      	mov	r8, r0
 8004c4a:	e648      	b.n	80048de <_printf_float+0x112>

08004c4c <_printf_common>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	4691      	mov	r9, r2
 8004c52:	461f      	mov	r7, r3
 8004c54:	688a      	ldr	r2, [r1, #8]
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bfb8      	it	lt
 8004c60:	4613      	movlt	r3, r2
 8004c62:	f8c9 3000 	str.w	r3, [r9]
 8004c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	b112      	cbz	r2, 8004c76 <_printf_common+0x2a>
 8004c70:	3301      	adds	r3, #1
 8004c72:	f8c9 3000 	str.w	r3, [r9]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	0699      	lsls	r1, r3, #26
 8004c7a:	bf42      	ittt	mi
 8004c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c80:	3302      	addmi	r3, #2
 8004c82:	f8c9 3000 	strmi.w	r3, [r9]
 8004c86:	6825      	ldr	r5, [r4, #0]
 8004c88:	f015 0506 	ands.w	r5, r5, #6
 8004c8c:	d107      	bne.n	8004c9e <_printf_common+0x52>
 8004c8e:	f104 0a19 	add.w	sl, r4, #25
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	f8d9 2000 	ldr.w	r2, [r9]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	42ab      	cmp	r3, r5
 8004c9c:	dc28      	bgt.n	8004cf0 <_printf_common+0xa4>
 8004c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	3300      	adds	r3, #0
 8004ca6:	bf18      	it	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	0692      	lsls	r2, r2, #26
 8004cac:	d42d      	bmi.n	8004d0a <_printf_common+0xbe>
 8004cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	47c0      	blx	r8
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d020      	beq.n	8004cfe <_printf_common+0xb2>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	68e5      	ldr	r5, [r4, #12]
 8004cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8004cc4:	f003 0306 	and.w	r3, r3, #6
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	bf08      	it	eq
 8004ccc:	1aad      	subeq	r5, r5, r2
 8004cce:	68a3      	ldr	r3, [r4, #8]
 8004cd0:	6922      	ldr	r2, [r4, #16]
 8004cd2:	bf0c      	ite	eq
 8004cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd8:	2500      	movne	r5, #0
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bfc4      	itt	gt
 8004cde:	1a9b      	subgt	r3, r3, r2
 8004ce0:	18ed      	addgt	r5, r5, r3
 8004ce2:	f04f 0900 	mov.w	r9, #0
 8004ce6:	341a      	adds	r4, #26
 8004ce8:	454d      	cmp	r5, r9
 8004cea:	d11a      	bne.n	8004d22 <_printf_common+0xd6>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e008      	b.n	8004d02 <_printf_common+0xb6>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	47c0      	blx	r8
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d103      	bne.n	8004d06 <_printf_common+0xba>
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d06:	3501      	adds	r5, #1
 8004d08:	e7c3      	b.n	8004c92 <_printf_common+0x46>
 8004d0a:	18e1      	adds	r1, r4, r3
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	2030      	movs	r0, #48	; 0x30
 8004d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d14:	4422      	add	r2, r4
 8004d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d1e:	3302      	adds	r3, #2
 8004d20:	e7c5      	b.n	8004cae <_printf_common+0x62>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4622      	mov	r2, r4
 8004d26:	4639      	mov	r1, r7
 8004d28:	4630      	mov	r0, r6
 8004d2a:	47c0      	blx	r8
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d0e6      	beq.n	8004cfe <_printf_common+0xb2>
 8004d30:	f109 0901 	add.w	r9, r9, #1
 8004d34:	e7d8      	b.n	8004ce8 <_printf_common+0x9c>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d40:	460c      	mov	r4, r1
 8004d42:	7e09      	ldrb	r1, [r1, #24]
 8004d44:	b085      	sub	sp, #20
 8004d46:	296e      	cmp	r1, #110	; 0x6e
 8004d48:	4617      	mov	r7, r2
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	4698      	mov	r8, r3
 8004d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d50:	f000 80b3 	beq.w	8004eba <_printf_i+0x182>
 8004d54:	d822      	bhi.n	8004d9c <_printf_i+0x64>
 8004d56:	2963      	cmp	r1, #99	; 0x63
 8004d58:	d036      	beq.n	8004dc8 <_printf_i+0x90>
 8004d5a:	d80a      	bhi.n	8004d72 <_printf_i+0x3a>
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	f000 80b9 	beq.w	8004ed4 <_printf_i+0x19c>
 8004d62:	2958      	cmp	r1, #88	; 0x58
 8004d64:	f000 8083 	beq.w	8004e6e <_printf_i+0x136>
 8004d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d70:	e032      	b.n	8004dd8 <_printf_i+0xa0>
 8004d72:	2964      	cmp	r1, #100	; 0x64
 8004d74:	d001      	beq.n	8004d7a <_printf_i+0x42>
 8004d76:	2969      	cmp	r1, #105	; 0x69
 8004d78:	d1f6      	bne.n	8004d68 <_printf_i+0x30>
 8004d7a:	6820      	ldr	r0, [r4, #0]
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	0605      	lsls	r5, r0, #24
 8004d80:	f103 0104 	add.w	r1, r3, #4
 8004d84:	d52a      	bpl.n	8004ddc <_printf_i+0xa4>
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da03      	bge.n	8004d96 <_printf_i+0x5e>
 8004d8e:	222d      	movs	r2, #45	; 0x2d
 8004d90:	425b      	negs	r3, r3
 8004d92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d96:	486f      	ldr	r0, [pc, #444]	; (8004f54 <_printf_i+0x21c>)
 8004d98:	220a      	movs	r2, #10
 8004d9a:	e039      	b.n	8004e10 <_printf_i+0xd8>
 8004d9c:	2973      	cmp	r1, #115	; 0x73
 8004d9e:	f000 809d 	beq.w	8004edc <_printf_i+0x1a4>
 8004da2:	d808      	bhi.n	8004db6 <_printf_i+0x7e>
 8004da4:	296f      	cmp	r1, #111	; 0x6f
 8004da6:	d020      	beq.n	8004dea <_printf_i+0xb2>
 8004da8:	2970      	cmp	r1, #112	; 0x70
 8004daa:	d1dd      	bne.n	8004d68 <_printf_i+0x30>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	f043 0320 	orr.w	r3, r3, #32
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	e003      	b.n	8004dbe <_printf_i+0x86>
 8004db6:	2975      	cmp	r1, #117	; 0x75
 8004db8:	d017      	beq.n	8004dea <_printf_i+0xb2>
 8004dba:	2978      	cmp	r1, #120	; 0x78
 8004dbc:	d1d4      	bne.n	8004d68 <_printf_i+0x30>
 8004dbe:	2378      	movs	r3, #120	; 0x78
 8004dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc4:	4864      	ldr	r0, [pc, #400]	; (8004f58 <_printf_i+0x220>)
 8004dc6:	e055      	b.n	8004e74 <_printf_i+0x13c>
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	1d19      	adds	r1, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6011      	str	r1, [r2, #0]
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e08c      	b.n	8004ef6 <_printf_i+0x1be>
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6011      	str	r1, [r2, #0]
 8004de0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004de4:	bf18      	it	ne
 8004de6:	b21b      	sxthne	r3, r3
 8004de8:	e7cf      	b.n	8004d8a <_printf_i+0x52>
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	1d18      	adds	r0, r3, #4
 8004df0:	6010      	str	r0, [r2, #0]
 8004df2:	0628      	lsls	r0, r5, #24
 8004df4:	d501      	bpl.n	8004dfa <_printf_i+0xc2>
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e002      	b.n	8004e00 <_printf_i+0xc8>
 8004dfa:	0668      	lsls	r0, r5, #25
 8004dfc:	d5fb      	bpl.n	8004df6 <_printf_i+0xbe>
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	4854      	ldr	r0, [pc, #336]	; (8004f54 <_printf_i+0x21c>)
 8004e02:	296f      	cmp	r1, #111	; 0x6f
 8004e04:	bf14      	ite	ne
 8004e06:	220a      	movne	r2, #10
 8004e08:	2208      	moveq	r2, #8
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e10:	6865      	ldr	r5, [r4, #4]
 8004e12:	60a5      	str	r5, [r4, #8]
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	f2c0 8095 	blt.w	8004f44 <_printf_i+0x20c>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	f021 0104 	bic.w	r1, r1, #4
 8004e20:	6021      	str	r1, [r4, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d13d      	bne.n	8004ea2 <_printf_i+0x16a>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	f040 808e 	bne.w	8004f48 <_printf_i+0x210>
 8004e2c:	4665      	mov	r5, ip
 8004e2e:	2a08      	cmp	r2, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x112>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07db      	lsls	r3, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x112>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6862      	ldr	r2, [r4, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	; 0x30
 8004e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e4a:	ebac 0305 	sub.w	r3, ip, r5
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	f8cd 8000 	str.w	r8, [sp]
 8004e54:	463b      	mov	r3, r7
 8004e56:	aa03      	add	r2, sp, #12
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff fef6 	bl	8004c4c <_printf_common>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d14d      	bne.n	8004f00 <_printf_i+0x1c8>
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	b005      	add	sp, #20
 8004e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e6e:	4839      	ldr	r0, [pc, #228]	; (8004f54 <_printf_i+0x21c>)
 8004e70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e74:	6813      	ldr	r3, [r2, #0]
 8004e76:	6821      	ldr	r1, [r4, #0]
 8004e78:	1d1d      	adds	r5, r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6015      	str	r5, [r2, #0]
 8004e7e:	060a      	lsls	r2, r1, #24
 8004e80:	d50b      	bpl.n	8004e9a <_printf_i+0x162>
 8004e82:	07ca      	lsls	r2, r1, #31
 8004e84:	bf44      	itt	mi
 8004e86:	f041 0120 	orrmi.w	r1, r1, #32
 8004e8a:	6021      	strmi	r1, [r4, #0]
 8004e8c:	b91b      	cbnz	r3, 8004e96 <_printf_i+0x15e>
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	2210      	movs	r2, #16
 8004e98:	e7b7      	b.n	8004e0a <_printf_i+0xd2>
 8004e9a:	064d      	lsls	r5, r1, #25
 8004e9c:	bf48      	it	mi
 8004e9e:	b29b      	uxthmi	r3, r3
 8004ea0:	e7ef      	b.n	8004e82 <_printf_i+0x14a>
 8004ea2:	4665      	mov	r5, ip
 8004ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ea8:	fb02 3311 	mls	r3, r2, r1, r3
 8004eac:	5cc3      	ldrb	r3, [r0, r3]
 8004eae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d1f5      	bne.n	8004ea4 <_printf_i+0x16c>
 8004eb8:	e7b9      	b.n	8004e2e <_printf_i+0xf6>
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	6961      	ldr	r1, [r4, #20]
 8004ec0:	1d18      	adds	r0, r3, #4
 8004ec2:	6010      	str	r0, [r2, #0]
 8004ec4:	0628      	lsls	r0, r5, #24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	d501      	bpl.n	8004ece <_printf_i+0x196>
 8004eca:	6019      	str	r1, [r3, #0]
 8004ecc:	e002      	b.n	8004ed4 <_printf_i+0x19c>
 8004ece:	066a      	lsls	r2, r5, #25
 8004ed0:	d5fb      	bpl.n	8004eca <_printf_i+0x192>
 8004ed2:	8019      	strh	r1, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	4665      	mov	r5, ip
 8004eda:	e7b9      	b.n	8004e50 <_printf_i+0x118>
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	1d19      	adds	r1, r3, #4
 8004ee0:	6011      	str	r1, [r2, #0]
 8004ee2:	681d      	ldr	r5, [r3, #0]
 8004ee4:	6862      	ldr	r2, [r4, #4]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7fb f981 	bl	80001f0 <memchr>
 8004eee:	b108      	cbz	r0, 8004ef4 <_printf_i+0x1bc>
 8004ef0:	1b40      	subs	r0, r0, r5
 8004ef2:	6060      	str	r0, [r4, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efe:	e7a7      	b.n	8004e50 <_printf_i+0x118>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	462a      	mov	r2, r5
 8004f04:	4639      	mov	r1, r7
 8004f06:	4630      	mov	r0, r6
 8004f08:	47c0      	blx	r8
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d0aa      	beq.n	8004e64 <_printf_i+0x12c>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	079b      	lsls	r3, r3, #30
 8004f12:	d413      	bmi.n	8004f3c <_printf_i+0x204>
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	bfb8      	it	lt
 8004f1c:	4618      	movlt	r0, r3
 8004f1e:	e7a3      	b.n	8004e68 <_printf_i+0x130>
 8004f20:	2301      	movs	r3, #1
 8004f22:	464a      	mov	r2, r9
 8004f24:	4639      	mov	r1, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d09a      	beq.n	8004e64 <_printf_i+0x12c>
 8004f2e:	3501      	adds	r5, #1
 8004f30:	68e3      	ldr	r3, [r4, #12]
 8004f32:	9a03      	ldr	r2, [sp, #12]
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	dcf2      	bgt.n	8004f20 <_printf_i+0x1e8>
 8004f3a:	e7eb      	b.n	8004f14 <_printf_i+0x1dc>
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	f104 0919 	add.w	r9, r4, #25
 8004f42:	e7f5      	b.n	8004f30 <_printf_i+0x1f8>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ac      	bne.n	8004ea2 <_printf_i+0x16a>
 8004f48:	7803      	ldrb	r3, [r0, #0]
 8004f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f52:	e76c      	b.n	8004e2e <_printf_i+0xf6>
 8004f54:	0800663e 	.word	0x0800663e
 8004f58:	0800664f 	.word	0x0800664f

08004f5c <_sbrk_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4c06      	ldr	r4, [pc, #24]	; (8004f78 <_sbrk_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4605      	mov	r5, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	f7fc fa84 	bl	8001474 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_sbrk_r+0x1a>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_sbrk_r+0x1a>
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200002f8 	.word	0x200002f8

08004f7c <siprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ab1d      	add	r3, sp, #116	; 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f8c:	4809      	ldr	r0, [pc, #36]	; (8004fb4 <siprintf+0x38>)
 8004f8e:	9107      	str	r1, [sp, #28]
 8004f90:	9104      	str	r1, [sp, #16]
 8004f92:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <siprintf+0x3c>)
 8004f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	a902      	add	r1, sp, #8
 8004fa0:	f001 f9b0 	bl	8006304 <_svfiprintf_r>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	b01c      	add	sp, #112	; 0x70
 8004fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb0:	b003      	add	sp, #12
 8004fb2:	4770      	bx	lr
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	ffff0208 	.word	0xffff0208

08004fbc <quorem>:
 8004fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	6903      	ldr	r3, [r0, #16]
 8004fc2:	690c      	ldr	r4, [r1, #16]
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	f2c0 8082 	blt.w	80050d0 <quorem+0x114>
 8004fcc:	3c01      	subs	r4, #1
 8004fce:	f101 0714 	add.w	r7, r1, #20
 8004fd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004fd6:	f100 0614 	add.w	r6, r0, #20
 8004fda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004fde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004fe2:	eb06 030c 	add.w	r3, r6, ip
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	eb07 090c 	add.w	r9, r7, ip
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ff2:	b395      	cbz	r5, 800505a <quorem+0x9e>
 8004ff4:	f04f 0a00 	mov.w	sl, #0
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	46b6      	mov	lr, r6
 8004ffc:	46d3      	mov	fp, sl
 8004ffe:	f850 2b04 	ldr.w	r2, [r0], #4
 8005002:	b293      	uxth	r3, r2
 8005004:	fb05 a303 	mla	r3, r5, r3, sl
 8005008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800500c:	b29b      	uxth	r3, r3
 800500e:	ebab 0303 	sub.w	r3, fp, r3
 8005012:	0c12      	lsrs	r2, r2, #16
 8005014:	f8de b000 	ldr.w	fp, [lr]
 8005018:	fb05 a202 	mla	r2, r5, r2, sl
 800501c:	fa13 f38b 	uxtah	r3, r3, fp
 8005020:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005024:	fa1f fb82 	uxth.w	fp, r2
 8005028:	f8de 2000 	ldr.w	r2, [lr]
 800502c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005030:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800503a:	4581      	cmp	r9, r0
 800503c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005040:	f84e 3b04 	str.w	r3, [lr], #4
 8005044:	d2db      	bcs.n	8004ffe <quorem+0x42>
 8005046:	f856 300c 	ldr.w	r3, [r6, ip]
 800504a:	b933      	cbnz	r3, 800505a <quorem+0x9e>
 800504c:	9b01      	ldr	r3, [sp, #4]
 800504e:	3b04      	subs	r3, #4
 8005050:	429e      	cmp	r6, r3
 8005052:	461a      	mov	r2, r3
 8005054:	d330      	bcc.n	80050b8 <quorem+0xfc>
 8005056:	f8c8 4010 	str.w	r4, [r8, #16]
 800505a:	4640      	mov	r0, r8
 800505c:	f001 f824 	bl	80060a8 <__mcmp>
 8005060:	2800      	cmp	r0, #0
 8005062:	db25      	blt.n	80050b0 <quorem+0xf4>
 8005064:	3501      	adds	r5, #1
 8005066:	4630      	mov	r0, r6
 8005068:	f04f 0c00 	mov.w	ip, #0
 800506c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005070:	f8d0 e000 	ldr.w	lr, [r0]
 8005074:	b293      	uxth	r3, r2
 8005076:	ebac 0303 	sub.w	r3, ip, r3
 800507a:	0c12      	lsrs	r2, r2, #16
 800507c:	fa13 f38e 	uxtah	r3, r3, lr
 8005080:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800508e:	45b9      	cmp	r9, r7
 8005090:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005094:	f840 3b04 	str.w	r3, [r0], #4
 8005098:	d2e8      	bcs.n	800506c <quorem+0xb0>
 800509a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800509e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80050a2:	b92a      	cbnz	r2, 80050b0 <quorem+0xf4>
 80050a4:	3b04      	subs	r3, #4
 80050a6:	429e      	cmp	r6, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	d30b      	bcc.n	80050c4 <quorem+0x108>
 80050ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80050b0:	4628      	mov	r0, r5
 80050b2:	b003      	add	sp, #12
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	3b04      	subs	r3, #4
 80050bc:	2a00      	cmp	r2, #0
 80050be:	d1ca      	bne.n	8005056 <quorem+0x9a>
 80050c0:	3c01      	subs	r4, #1
 80050c2:	e7c5      	b.n	8005050 <quorem+0x94>
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	3b04      	subs	r3, #4
 80050c8:	2a00      	cmp	r2, #0
 80050ca:	d1ef      	bne.n	80050ac <quorem+0xf0>
 80050cc:	3c01      	subs	r4, #1
 80050ce:	e7ea      	b.n	80050a6 <quorem+0xea>
 80050d0:	2000      	movs	r0, #0
 80050d2:	e7ee      	b.n	80050b2 <quorem+0xf6>
 80050d4:	0000      	movs	r0, r0
	...

080050d8 <_dtoa_r>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ec57 6b10 	vmov	r6, r7, d0
 80050e0:	b097      	sub	sp, #92	; 0x5c
 80050e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050e4:	9106      	str	r1, [sp, #24]
 80050e6:	4604      	mov	r4, r0
 80050e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80050ea:	9312      	str	r3, [sp, #72]	; 0x48
 80050ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050f0:	e9cd 6700 	strd	r6, r7, [sp]
 80050f4:	b93d      	cbnz	r5, 8005106 <_dtoa_r+0x2e>
 80050f6:	2010      	movs	r0, #16
 80050f8:	f7ff fa1c 	bl	8004534 <malloc>
 80050fc:	6260      	str	r0, [r4, #36]	; 0x24
 80050fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005102:	6005      	str	r5, [r0, #0]
 8005104:	60c5      	str	r5, [r0, #12]
 8005106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	b151      	cbz	r1, 8005122 <_dtoa_r+0x4a>
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	604a      	str	r2, [r1, #4]
 8005110:	2301      	movs	r3, #1
 8005112:	4093      	lsls	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
 8005116:	4620      	mov	r0, r4
 8005118:	f000 fde5 	bl	8005ce6 <_Bfree>
 800511c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	1e3b      	subs	r3, r7, #0
 8005124:	bfbb      	ittet	lt
 8005126:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800512a:	9301      	strlt	r3, [sp, #4]
 800512c:	2300      	movge	r3, #0
 800512e:	2201      	movlt	r2, #1
 8005130:	bfac      	ite	ge
 8005132:	f8c8 3000 	strge.w	r3, [r8]
 8005136:	f8c8 2000 	strlt.w	r2, [r8]
 800513a:	4baf      	ldr	r3, [pc, #700]	; (80053f8 <_dtoa_r+0x320>)
 800513c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005140:	ea33 0308 	bics.w	r3, r3, r8
 8005144:	d114      	bne.n	8005170 <_dtoa_r+0x98>
 8005146:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005148:	f242 730f 	movw	r3, #9999	; 0x270f
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	9b00      	ldr	r3, [sp, #0]
 8005150:	b923      	cbnz	r3, 800515c <_dtoa_r+0x84>
 8005152:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005156:	2800      	cmp	r0, #0
 8005158:	f000 8542 	beq.w	8005be0 <_dtoa_r+0xb08>
 800515c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800515e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800540c <_dtoa_r+0x334>
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8544 	beq.w	8005bf0 <_dtoa_r+0xb18>
 8005168:	f10b 0303 	add.w	r3, fp, #3
 800516c:	f000 bd3e 	b.w	8005bec <_dtoa_r+0xb14>
 8005170:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005174:	2200      	movs	r2, #0
 8005176:	2300      	movs	r3, #0
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb fcac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005180:	4681      	mov	r9, r0
 8005182:	b168      	cbz	r0, 80051a0 <_dtoa_r+0xc8>
 8005184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005186:	2301      	movs	r3, #1
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8524 	beq.w	8005bda <_dtoa_r+0xb02>
 8005192:	4b9a      	ldr	r3, [pc, #616]	; (80053fc <_dtoa_r+0x324>)
 8005194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005196:	f103 3bff 	add.w	fp, r3, #4294967295
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	f000 bd28 	b.w	8005bf0 <_dtoa_r+0xb18>
 80051a0:	aa14      	add	r2, sp, #80	; 0x50
 80051a2:	a915      	add	r1, sp, #84	; 0x54
 80051a4:	ec47 6b10 	vmov	d0, r6, r7
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fff4 	bl	8006196 <__d2b>
 80051ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80051b2:	9004      	str	r0, [sp, #16]
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	d07c      	beq.n	80052b2 <_dtoa_r+0x1da>
 80051b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80051c0:	46b2      	mov	sl, r6
 80051c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80051c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80051ce:	2200      	movs	r2, #0
 80051d0:	4b8b      	ldr	r3, [pc, #556]	; (8005400 <_dtoa_r+0x328>)
 80051d2:	4650      	mov	r0, sl
 80051d4:	4659      	mov	r1, fp
 80051d6:	f7fb f85f 	bl	8000298 <__aeabi_dsub>
 80051da:	a381      	add	r3, pc, #516	; (adr r3, 80053e0 <_dtoa_r+0x308>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f7fb fa12 	bl	8000608 <__aeabi_dmul>
 80051e4:	a380      	add	r3, pc, #512	; (adr r3, 80053e8 <_dtoa_r+0x310>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb f857 	bl	800029c <__adddf3>
 80051ee:	4606      	mov	r6, r0
 80051f0:	4628      	mov	r0, r5
 80051f2:	460f      	mov	r7, r1
 80051f4:	f7fb f99e 	bl	8000534 <__aeabi_i2d>
 80051f8:	a37d      	add	r3, pc, #500	; (adr r3, 80053f0 <_dtoa_r+0x318>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb fa03 	bl	8000608 <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb f847 	bl	800029c <__adddf3>
 800520e:	4606      	mov	r6, r0
 8005210:	460f      	mov	r7, r1
 8005212:	f7fb fca9 	bl	8000b68 <__aeabi_d2iz>
 8005216:	2200      	movs	r2, #0
 8005218:	4682      	mov	sl, r0
 800521a:	2300      	movs	r3, #0
 800521c:	4630      	mov	r0, r6
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb fc64 	bl	8000aec <__aeabi_dcmplt>
 8005224:	b148      	cbz	r0, 800523a <_dtoa_r+0x162>
 8005226:	4650      	mov	r0, sl
 8005228:	f7fb f984 	bl	8000534 <__aeabi_i2d>
 800522c:	4632      	mov	r2, r6
 800522e:	463b      	mov	r3, r7
 8005230:	f7fb fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005234:	b908      	cbnz	r0, 800523a <_dtoa_r+0x162>
 8005236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800523a:	f1ba 0f16 	cmp.w	sl, #22
 800523e:	d859      	bhi.n	80052f4 <_dtoa_r+0x21c>
 8005240:	4970      	ldr	r1, [pc, #448]	; (8005404 <_dtoa_r+0x32c>)
 8005242:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800524a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800524e:	f7fb fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 8005252:	2800      	cmp	r0, #0
 8005254:	d050      	beq.n	80052f8 <_dtoa_r+0x220>
 8005256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800525a:	2300      	movs	r3, #0
 800525c:	930f      	str	r3, [sp, #60]	; 0x3c
 800525e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005260:	1b5d      	subs	r5, r3, r5
 8005262:	f1b5 0801 	subs.w	r8, r5, #1
 8005266:	bf49      	itett	mi
 8005268:	f1c5 0301 	rsbmi	r3, r5, #1
 800526c:	2300      	movpl	r3, #0
 800526e:	9305      	strmi	r3, [sp, #20]
 8005270:	f04f 0800 	movmi.w	r8, #0
 8005274:	bf58      	it	pl
 8005276:	9305      	strpl	r3, [sp, #20]
 8005278:	f1ba 0f00 	cmp.w	sl, #0
 800527c:	db3e      	blt.n	80052fc <_dtoa_r+0x224>
 800527e:	2300      	movs	r3, #0
 8005280:	44d0      	add	r8, sl
 8005282:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	9b06      	ldr	r3, [sp, #24]
 800528a:	2b09      	cmp	r3, #9
 800528c:	f200 8090 	bhi.w	80053b0 <_dtoa_r+0x2d8>
 8005290:	2b05      	cmp	r3, #5
 8005292:	bfc4      	itt	gt
 8005294:	3b04      	subgt	r3, #4
 8005296:	9306      	strgt	r3, [sp, #24]
 8005298:	9b06      	ldr	r3, [sp, #24]
 800529a:	f1a3 0302 	sub.w	r3, r3, #2
 800529e:	bfcc      	ite	gt
 80052a0:	2500      	movgt	r5, #0
 80052a2:	2501      	movle	r5, #1
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	f200 808f 	bhi.w	80053c8 <_dtoa_r+0x2f0>
 80052aa:	e8df f003 	tbb	[pc, r3]
 80052ae:	7f7d      	.short	0x7f7d
 80052b0:	7131      	.short	0x7131
 80052b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80052b6:	441d      	add	r5, r3
 80052b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80052bc:	2820      	cmp	r0, #32
 80052be:	dd13      	ble.n	80052e8 <_dtoa_r+0x210>
 80052c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80052c4:	9b00      	ldr	r3, [sp, #0]
 80052c6:	fa08 f800 	lsl.w	r8, r8, r0
 80052ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80052ce:	fa23 f000 	lsr.w	r0, r3, r0
 80052d2:	ea48 0000 	orr.w	r0, r8, r0
 80052d6:	f7fb f91d 	bl	8000514 <__aeabi_ui2d>
 80052da:	2301      	movs	r3, #1
 80052dc:	4682      	mov	sl, r0
 80052de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80052e2:	3d01      	subs	r5, #1
 80052e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80052e6:	e772      	b.n	80051ce <_dtoa_r+0xf6>
 80052e8:	9b00      	ldr	r3, [sp, #0]
 80052ea:	f1c0 0020 	rsb	r0, r0, #32
 80052ee:	fa03 f000 	lsl.w	r0, r3, r0
 80052f2:	e7f0      	b.n	80052d6 <_dtoa_r+0x1fe>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7b1      	b.n	800525c <_dtoa_r+0x184>
 80052f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80052fa:	e7b0      	b.n	800525e <_dtoa_r+0x186>
 80052fc:	9b05      	ldr	r3, [sp, #20]
 80052fe:	eba3 030a 	sub.w	r3, r3, sl
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	f1ca 0300 	rsb	r3, sl, #0
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	2300      	movs	r3, #0
 800530c:	930e      	str	r3, [sp, #56]	; 0x38
 800530e:	e7bb      	b.n	8005288 <_dtoa_r+0x1b0>
 8005310:	2301      	movs	r3, #1
 8005312:	930a      	str	r3, [sp, #40]	; 0x28
 8005314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd59      	ble.n	80053ce <_dtoa_r+0x2f6>
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	4699      	mov	r9, r3
 800531e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005320:	2200      	movs	r2, #0
 8005322:	6072      	str	r2, [r6, #4]
 8005324:	2204      	movs	r2, #4
 8005326:	f102 0014 	add.w	r0, r2, #20
 800532a:	4298      	cmp	r0, r3
 800532c:	6871      	ldr	r1, [r6, #4]
 800532e:	d953      	bls.n	80053d8 <_dtoa_r+0x300>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 fca4 	bl	8005c7e <_Balloc>
 8005336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005338:	6030      	str	r0, [r6, #0]
 800533a:	f1b9 0f0e 	cmp.w	r9, #14
 800533e:	f8d3 b000 	ldr.w	fp, [r3]
 8005342:	f200 80e6 	bhi.w	8005512 <_dtoa_r+0x43a>
 8005346:	2d00      	cmp	r5, #0
 8005348:	f000 80e3 	beq.w	8005512 <_dtoa_r+0x43a>
 800534c:	ed9d 7b00 	vldr	d7, [sp]
 8005350:	f1ba 0f00 	cmp.w	sl, #0
 8005354:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005358:	dd74      	ble.n	8005444 <_dtoa_r+0x36c>
 800535a:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <_dtoa_r+0x32c>)
 800535c:	f00a 030f 	and.w	r3, sl, #15
 8005360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005364:	ed93 7b00 	vldr	d7, [r3]
 8005368:	ea4f 162a 	mov.w	r6, sl, asr #4
 800536c:	06f0      	lsls	r0, r6, #27
 800536e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005372:	d565      	bpl.n	8005440 <_dtoa_r+0x368>
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <_dtoa_r+0x330>)
 8005376:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800537a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800537e:	f7fb fa6d 	bl	800085c <__aeabi_ddiv>
 8005382:	e9cd 0100 	strd	r0, r1, [sp]
 8005386:	f006 060f 	and.w	r6, r6, #15
 800538a:	2503      	movs	r5, #3
 800538c:	4f1e      	ldr	r7, [pc, #120]	; (8005408 <_dtoa_r+0x330>)
 800538e:	e04c      	b.n	800542a <_dtoa_r+0x352>
 8005390:	2301      	movs	r3, #1
 8005392:	930a      	str	r3, [sp, #40]	; 0x28
 8005394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005396:	4453      	add	r3, sl
 8005398:	f103 0901 	add.w	r9, r3, #1
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	464b      	mov	r3, r9
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	bfb8      	it	lt
 80053a4:	2301      	movlt	r3, #1
 80053a6:	e7ba      	b.n	800531e <_dtoa_r+0x246>
 80053a8:	2300      	movs	r3, #0
 80053aa:	e7b2      	b.n	8005312 <_dtoa_r+0x23a>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e7f0      	b.n	8005392 <_dtoa_r+0x2ba>
 80053b0:	2501      	movs	r5, #1
 80053b2:	2300      	movs	r3, #0
 80053b4:	9306      	str	r3, [sp, #24]
 80053b6:	950a      	str	r5, [sp, #40]	; 0x28
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	9302      	str	r3, [sp, #8]
 80053be:	4699      	mov	r9, r3
 80053c0:	2200      	movs	r2, #0
 80053c2:	2312      	movs	r3, #18
 80053c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80053c6:	e7aa      	b.n	800531e <_dtoa_r+0x246>
 80053c8:	2301      	movs	r3, #1
 80053ca:	930a      	str	r3, [sp, #40]	; 0x28
 80053cc:	e7f4      	b.n	80053b8 <_dtoa_r+0x2e0>
 80053ce:	2301      	movs	r3, #1
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	4699      	mov	r9, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	e7f5      	b.n	80053c4 <_dtoa_r+0x2ec>
 80053d8:	3101      	adds	r1, #1
 80053da:	6071      	str	r1, [r6, #4]
 80053dc:	0052      	lsls	r2, r2, #1
 80053de:	e7a2      	b.n	8005326 <_dtoa_r+0x24e>
 80053e0:	636f4361 	.word	0x636f4361
 80053e4:	3fd287a7 	.word	0x3fd287a7
 80053e8:	8b60c8b3 	.word	0x8b60c8b3
 80053ec:	3fc68a28 	.word	0x3fc68a28
 80053f0:	509f79fb 	.word	0x509f79fb
 80053f4:	3fd34413 	.word	0x3fd34413
 80053f8:	7ff00000 	.word	0x7ff00000
 80053fc:	0800663d 	.word	0x0800663d
 8005400:	3ff80000 	.word	0x3ff80000
 8005404:	08006698 	.word	0x08006698
 8005408:	08006670 	.word	0x08006670
 800540c:	08006669 	.word	0x08006669
 8005410:	07f1      	lsls	r1, r6, #31
 8005412:	d508      	bpl.n	8005426 <_dtoa_r+0x34e>
 8005414:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541c:	f7fb f8f4 	bl	8000608 <__aeabi_dmul>
 8005420:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005424:	3501      	adds	r5, #1
 8005426:	1076      	asrs	r6, r6, #1
 8005428:	3708      	adds	r7, #8
 800542a:	2e00      	cmp	r6, #0
 800542c:	d1f0      	bne.n	8005410 <_dtoa_r+0x338>
 800542e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005436:	f7fb fa11 	bl	800085c <__aeabi_ddiv>
 800543a:	e9cd 0100 	strd	r0, r1, [sp]
 800543e:	e01a      	b.n	8005476 <_dtoa_r+0x39e>
 8005440:	2502      	movs	r5, #2
 8005442:	e7a3      	b.n	800538c <_dtoa_r+0x2b4>
 8005444:	f000 80a0 	beq.w	8005588 <_dtoa_r+0x4b0>
 8005448:	f1ca 0600 	rsb	r6, sl, #0
 800544c:	4b9f      	ldr	r3, [pc, #636]	; (80056cc <_dtoa_r+0x5f4>)
 800544e:	4fa0      	ldr	r7, [pc, #640]	; (80056d0 <_dtoa_r+0x5f8>)
 8005450:	f006 020f 	and.w	r2, r6, #15
 8005454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005460:	f7fb f8d2 	bl	8000608 <__aeabi_dmul>
 8005464:	e9cd 0100 	strd	r0, r1, [sp]
 8005468:	1136      	asrs	r6, r6, #4
 800546a:	2300      	movs	r3, #0
 800546c:	2502      	movs	r5, #2
 800546e:	2e00      	cmp	r6, #0
 8005470:	d17f      	bne.n	8005572 <_dtoa_r+0x49a>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e1      	bne.n	800543a <_dtoa_r+0x362>
 8005476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8087 	beq.w	800558c <_dtoa_r+0x4b4>
 800547e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005482:	2200      	movs	r2, #0
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <_dtoa_r+0x5fc>)
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fb fb2f 	bl	8000aec <__aeabi_dcmplt>
 800548e:	2800      	cmp	r0, #0
 8005490:	d07c      	beq.n	800558c <_dtoa_r+0x4b4>
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	d079      	beq.n	800558c <_dtoa_r+0x4b4>
 8005498:	9b02      	ldr	r3, [sp, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	dd35      	ble.n	800550a <_dtoa_r+0x432>
 800549e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054a2:	9308      	str	r3, [sp, #32]
 80054a4:	4639      	mov	r1, r7
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b8b      	ldr	r3, [pc, #556]	; (80056d8 <_dtoa_r+0x600>)
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7fb f8ac 	bl	8000608 <__aeabi_dmul>
 80054b0:	e9cd 0100 	strd	r0, r1, [sp]
 80054b4:	9f02      	ldr	r7, [sp, #8]
 80054b6:	3501      	adds	r5, #1
 80054b8:	4628      	mov	r0, r5
 80054ba:	f7fb f83b 	bl	8000534 <__aeabi_i2d>
 80054be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c2:	f7fb f8a1 	bl	8000608 <__aeabi_dmul>
 80054c6:	2200      	movs	r2, #0
 80054c8:	4b84      	ldr	r3, [pc, #528]	; (80056dc <_dtoa_r+0x604>)
 80054ca:	f7fa fee7 	bl	800029c <__adddf3>
 80054ce:	4605      	mov	r5, r0
 80054d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80054d4:	2f00      	cmp	r7, #0
 80054d6:	d15d      	bne.n	8005594 <_dtoa_r+0x4bc>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <_dtoa_r+0x608>)
 80054dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054e0:	f7fa feda 	bl	8000298 <__aeabi_dsub>
 80054e4:	462a      	mov	r2, r5
 80054e6:	4633      	mov	r3, r6
 80054e8:	e9cd 0100 	strd	r0, r1, [sp]
 80054ec:	f7fb fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	f040 8288 	bne.w	8005a06 <_dtoa_r+0x92e>
 80054f6:	462a      	mov	r2, r5
 80054f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005500:	f7fb faf4 	bl	8000aec <__aeabi_dcmplt>
 8005504:	2800      	cmp	r0, #0
 8005506:	f040 827c 	bne.w	8005a02 <_dtoa_r+0x92a>
 800550a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800550e:	e9cd 2300 	strd	r2, r3, [sp]
 8005512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005514:	2b00      	cmp	r3, #0
 8005516:	f2c0 8150 	blt.w	80057ba <_dtoa_r+0x6e2>
 800551a:	f1ba 0f0e 	cmp.w	sl, #14
 800551e:	f300 814c 	bgt.w	80057ba <_dtoa_r+0x6e2>
 8005522:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <_dtoa_r+0x5f4>)
 8005524:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005528:	ed93 7b00 	vldr	d7, [r3]
 800552c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005534:	f280 80d8 	bge.w	80056e8 <_dtoa_r+0x610>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	f300 80d4 	bgt.w	80056e8 <_dtoa_r+0x610>
 8005540:	f040 825e 	bne.w	8005a00 <_dtoa_r+0x928>
 8005544:	2200      	movs	r2, #0
 8005546:	4b66      	ldr	r3, [pc, #408]	; (80056e0 <_dtoa_r+0x608>)
 8005548:	ec51 0b17 	vmov	r0, r1, d7
 800554c:	f7fb f85c 	bl	8000608 <__aeabi_dmul>
 8005550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005554:	f7fb fade 	bl	8000b14 <__aeabi_dcmpge>
 8005558:	464f      	mov	r7, r9
 800555a:	464e      	mov	r6, r9
 800555c:	2800      	cmp	r0, #0
 800555e:	f040 8234 	bne.w	80059ca <_dtoa_r+0x8f2>
 8005562:	2331      	movs	r3, #49	; 0x31
 8005564:	f10b 0501 	add.w	r5, fp, #1
 8005568:	f88b 3000 	strb.w	r3, [fp]
 800556c:	f10a 0a01 	add.w	sl, sl, #1
 8005570:	e22f      	b.n	80059d2 <_dtoa_r+0x8fa>
 8005572:	07f2      	lsls	r2, r6, #31
 8005574:	d505      	bpl.n	8005582 <_dtoa_r+0x4aa>
 8005576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557a:	f7fb f845 	bl	8000608 <__aeabi_dmul>
 800557e:	3501      	adds	r5, #1
 8005580:	2301      	movs	r3, #1
 8005582:	1076      	asrs	r6, r6, #1
 8005584:	3708      	adds	r7, #8
 8005586:	e772      	b.n	800546e <_dtoa_r+0x396>
 8005588:	2502      	movs	r5, #2
 800558a:	e774      	b.n	8005476 <_dtoa_r+0x39e>
 800558c:	f8cd a020 	str.w	sl, [sp, #32]
 8005590:	464f      	mov	r7, r9
 8005592:	e791      	b.n	80054b8 <_dtoa_r+0x3e0>
 8005594:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <_dtoa_r+0x5f4>)
 8005596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800559a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800559e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d047      	beq.n	8005634 <_dtoa_r+0x55c>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	2000      	movs	r0, #0
 80055aa:	494e      	ldr	r1, [pc, #312]	; (80056e4 <_dtoa_r+0x60c>)
 80055ac:	f7fb f956 	bl	800085c <__aeabi_ddiv>
 80055b0:	462a      	mov	r2, r5
 80055b2:	4633      	mov	r3, r6
 80055b4:	f7fa fe70 	bl	8000298 <__aeabi_dsub>
 80055b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055bc:	465d      	mov	r5, fp
 80055be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055c2:	f7fb fad1 	bl	8000b68 <__aeabi_d2iz>
 80055c6:	4606      	mov	r6, r0
 80055c8:	f7fa ffb4 	bl	8000534 <__aeabi_i2d>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055d4:	f7fa fe60 	bl	8000298 <__aeabi_dsub>
 80055d8:	3630      	adds	r6, #48	; 0x30
 80055da:	f805 6b01 	strb.w	r6, [r5], #1
 80055de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055e2:	e9cd 0100 	strd	r0, r1, [sp]
 80055e6:	f7fb fa81 	bl	8000aec <__aeabi_dcmplt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d163      	bne.n	80056b6 <_dtoa_r+0x5de>
 80055ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055f2:	2000      	movs	r0, #0
 80055f4:	4937      	ldr	r1, [pc, #220]	; (80056d4 <_dtoa_r+0x5fc>)
 80055f6:	f7fa fe4f 	bl	8000298 <__aeabi_dsub>
 80055fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055fe:	f7fb fa75 	bl	8000aec <__aeabi_dcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	f040 80b7 	bne.w	8005776 <_dtoa_r+0x69e>
 8005608:	eba5 030b 	sub.w	r3, r5, fp
 800560c:	429f      	cmp	r7, r3
 800560e:	f77f af7c 	ble.w	800550a <_dtoa_r+0x432>
 8005612:	2200      	movs	r2, #0
 8005614:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <_dtoa_r+0x600>)
 8005616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800561a:	f7fa fff5 	bl	8000608 <__aeabi_dmul>
 800561e:	2200      	movs	r2, #0
 8005620:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <_dtoa_r+0x600>)
 8005626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800562a:	f7fa ffed 	bl	8000608 <__aeabi_dmul>
 800562e:	e9cd 0100 	strd	r0, r1, [sp]
 8005632:	e7c4      	b.n	80055be <_dtoa_r+0x4e6>
 8005634:	462a      	mov	r2, r5
 8005636:	4633      	mov	r3, r6
 8005638:	f7fa ffe6 	bl	8000608 <__aeabi_dmul>
 800563c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005640:	eb0b 0507 	add.w	r5, fp, r7
 8005644:	465e      	mov	r6, fp
 8005646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800564a:	f7fb fa8d 	bl	8000b68 <__aeabi_d2iz>
 800564e:	4607      	mov	r7, r0
 8005650:	f7fa ff70 	bl	8000534 <__aeabi_i2d>
 8005654:	3730      	adds	r7, #48	; 0x30
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800565e:	f7fa fe1b 	bl	8000298 <__aeabi_dsub>
 8005662:	f806 7b01 	strb.w	r7, [r6], #1
 8005666:	42ae      	cmp	r6, r5
 8005668:	e9cd 0100 	strd	r0, r1, [sp]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	d126      	bne.n	80056c0 <_dtoa_r+0x5e8>
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <_dtoa_r+0x60c>)
 8005674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005678:	f7fa fe10 	bl	800029c <__adddf3>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005684:	f7fb fa50 	bl	8000b28 <__aeabi_dcmpgt>
 8005688:	2800      	cmp	r0, #0
 800568a:	d174      	bne.n	8005776 <_dtoa_r+0x69e>
 800568c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005690:	2000      	movs	r0, #0
 8005692:	4914      	ldr	r1, [pc, #80]	; (80056e4 <_dtoa_r+0x60c>)
 8005694:	f7fa fe00 	bl	8000298 <__aeabi_dsub>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056a0:	f7fb fa24 	bl	8000aec <__aeabi_dcmplt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f43f af30 	beq.w	800550a <_dtoa_r+0x432>
 80056aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056ae:	2b30      	cmp	r3, #48	; 0x30
 80056b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80056b4:	d002      	beq.n	80056bc <_dtoa_r+0x5e4>
 80056b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80056ba:	e04a      	b.n	8005752 <_dtoa_r+0x67a>
 80056bc:	4615      	mov	r5, r2
 80056be:	e7f4      	b.n	80056aa <_dtoa_r+0x5d2>
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <_dtoa_r+0x600>)
 80056c2:	f7fa ffa1 	bl	8000608 <__aeabi_dmul>
 80056c6:	e9cd 0100 	strd	r0, r1, [sp]
 80056ca:	e7bc      	b.n	8005646 <_dtoa_r+0x56e>
 80056cc:	08006698 	.word	0x08006698
 80056d0:	08006670 	.word	0x08006670
 80056d4:	3ff00000 	.word	0x3ff00000
 80056d8:	40240000 	.word	0x40240000
 80056dc:	401c0000 	.word	0x401c0000
 80056e0:	40140000 	.word	0x40140000
 80056e4:	3fe00000 	.word	0x3fe00000
 80056e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056ec:	465d      	mov	r5, fp
 80056ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	f7fb f8b1 	bl	800085c <__aeabi_ddiv>
 80056fa:	f7fb fa35 	bl	8000b68 <__aeabi_d2iz>
 80056fe:	4680      	mov	r8, r0
 8005700:	f7fa ff18 	bl	8000534 <__aeabi_i2d>
 8005704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005708:	f7fa ff7e 	bl	8000608 <__aeabi_dmul>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005718:	f7fa fdbe 	bl	8000298 <__aeabi_dsub>
 800571c:	f805 6b01 	strb.w	r6, [r5], #1
 8005720:	eba5 060b 	sub.w	r6, r5, fp
 8005724:	45b1      	cmp	r9, r6
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	d139      	bne.n	80057a0 <_dtoa_r+0x6c8>
 800572c:	f7fa fdb6 	bl	800029c <__adddf3>
 8005730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	f7fb f9f6 	bl	8000b28 <__aeabi_dcmpgt>
 800573c:	b9c8      	cbnz	r0, 8005772 <_dtoa_r+0x69a>
 800573e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fb f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800574a:	b110      	cbz	r0, 8005752 <_dtoa_r+0x67a>
 800574c:	f018 0f01 	tst.w	r8, #1
 8005750:	d10f      	bne.n	8005772 <_dtoa_r+0x69a>
 8005752:	9904      	ldr	r1, [sp, #16]
 8005754:	4620      	mov	r0, r4
 8005756:	f000 fac6 	bl	8005ce6 <_Bfree>
 800575a:	2300      	movs	r3, #0
 800575c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800575e:	702b      	strb	r3, [r5, #0]
 8005760:	f10a 0301 	add.w	r3, sl, #1
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8241 	beq.w	8005bf0 <_dtoa_r+0xb18>
 800576e:	601d      	str	r5, [r3, #0]
 8005770:	e23e      	b.n	8005bf0 <_dtoa_r+0xb18>
 8005772:	f8cd a020 	str.w	sl, [sp, #32]
 8005776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800577a:	2a39      	cmp	r2, #57	; 0x39
 800577c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005780:	d108      	bne.n	8005794 <_dtoa_r+0x6bc>
 8005782:	459b      	cmp	fp, r3
 8005784:	d10a      	bne.n	800579c <_dtoa_r+0x6c4>
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	3301      	adds	r3, #1
 800578a:	9308      	str	r3, [sp, #32]
 800578c:	2330      	movs	r3, #48	; 0x30
 800578e:	f88b 3000 	strb.w	r3, [fp]
 8005792:	465b      	mov	r3, fp
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	3201      	adds	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e78c      	b.n	80056b6 <_dtoa_r+0x5de>
 800579c:	461d      	mov	r5, r3
 800579e:	e7ea      	b.n	8005776 <_dtoa_r+0x69e>
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b9b      	ldr	r3, [pc, #620]	; (8005a10 <_dtoa_r+0x938>)
 80057a4:	f7fa ff30 	bl	8000608 <__aeabi_dmul>
 80057a8:	2200      	movs	r2, #0
 80057aa:	2300      	movs	r3, #0
 80057ac:	4606      	mov	r6, r0
 80057ae:	460f      	mov	r7, r1
 80057b0:	f7fb f992 	bl	8000ad8 <__aeabi_dcmpeq>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d09a      	beq.n	80056ee <_dtoa_r+0x616>
 80057b8:	e7cb      	b.n	8005752 <_dtoa_r+0x67a>
 80057ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057bc:	2a00      	cmp	r2, #0
 80057be:	f000 808b 	beq.w	80058d8 <_dtoa_r+0x800>
 80057c2:	9a06      	ldr	r2, [sp, #24]
 80057c4:	2a01      	cmp	r2, #1
 80057c6:	dc6e      	bgt.n	80058a6 <_dtoa_r+0x7ce>
 80057c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d067      	beq.n	800589e <_dtoa_r+0x7c6>
 80057ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057d2:	9f07      	ldr	r7, [sp, #28]
 80057d4:	9d05      	ldr	r5, [sp, #20]
 80057d6:	9a05      	ldr	r2, [sp, #20]
 80057d8:	2101      	movs	r1, #1
 80057da:	441a      	add	r2, r3
 80057dc:	4620      	mov	r0, r4
 80057de:	9205      	str	r2, [sp, #20]
 80057e0:	4498      	add	r8, r3
 80057e2:	f000 fb20 	bl	8005e26 <__i2b>
 80057e6:	4606      	mov	r6, r0
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	dd0c      	ble.n	8005806 <_dtoa_r+0x72e>
 80057ec:	f1b8 0f00 	cmp.w	r8, #0
 80057f0:	dd09      	ble.n	8005806 <_dtoa_r+0x72e>
 80057f2:	4545      	cmp	r5, r8
 80057f4:	9a05      	ldr	r2, [sp, #20]
 80057f6:	462b      	mov	r3, r5
 80057f8:	bfa8      	it	ge
 80057fa:	4643      	movge	r3, r8
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	9205      	str	r2, [sp, #20]
 8005800:	1aed      	subs	r5, r5, r3
 8005802:	eba8 0803 	sub.w	r8, r8, r3
 8005806:	9b07      	ldr	r3, [sp, #28]
 8005808:	b1eb      	cbz	r3, 8005846 <_dtoa_r+0x76e>
 800580a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d067      	beq.n	80058e0 <_dtoa_r+0x808>
 8005810:	b18f      	cbz	r7, 8005836 <_dtoa_r+0x75e>
 8005812:	4631      	mov	r1, r6
 8005814:	463a      	mov	r2, r7
 8005816:	4620      	mov	r0, r4
 8005818:	f000 fba4 	bl	8005f64 <__pow5mult>
 800581c:	9a04      	ldr	r2, [sp, #16]
 800581e:	4601      	mov	r1, r0
 8005820:	4606      	mov	r6, r0
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fb08 	bl	8005e38 <__multiply>
 8005828:	9904      	ldr	r1, [sp, #16]
 800582a:	9008      	str	r0, [sp, #32]
 800582c:	4620      	mov	r0, r4
 800582e:	f000 fa5a 	bl	8005ce6 <_Bfree>
 8005832:	9b08      	ldr	r3, [sp, #32]
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	1bda      	subs	r2, r3, r7
 800583a:	d004      	beq.n	8005846 <_dtoa_r+0x76e>
 800583c:	9904      	ldr	r1, [sp, #16]
 800583e:	4620      	mov	r0, r4
 8005840:	f000 fb90 	bl	8005f64 <__pow5mult>
 8005844:	9004      	str	r0, [sp, #16]
 8005846:	2101      	movs	r1, #1
 8005848:	4620      	mov	r0, r4
 800584a:	f000 faec 	bl	8005e26 <__i2b>
 800584e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005850:	4607      	mov	r7, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 81d0 	beq.w	8005bf8 <_dtoa_r+0xb20>
 8005858:	461a      	mov	r2, r3
 800585a:	4601      	mov	r1, r0
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fb81 	bl	8005f64 <__pow5mult>
 8005862:	9b06      	ldr	r3, [sp, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	4607      	mov	r7, r0
 8005868:	dc40      	bgt.n	80058ec <_dtoa_r+0x814>
 800586a:	9b00      	ldr	r3, [sp, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d139      	bne.n	80058e4 <_dtoa_r+0x80c>
 8005870:	9b01      	ldr	r3, [sp, #4]
 8005872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005876:	2b00      	cmp	r3, #0
 8005878:	d136      	bne.n	80058e8 <_dtoa_r+0x810>
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005880:	0d1b      	lsrs	r3, r3, #20
 8005882:	051b      	lsls	r3, r3, #20
 8005884:	b12b      	cbz	r3, 8005892 <_dtoa_r+0x7ba>
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	3301      	adds	r3, #1
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	f108 0801 	add.w	r8, r8, #1
 8005890:	2301      	movs	r3, #1
 8005892:	9307      	str	r3, [sp, #28]
 8005894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d12a      	bne.n	80058f0 <_dtoa_r+0x818>
 800589a:	2001      	movs	r0, #1
 800589c:	e030      	b.n	8005900 <_dtoa_r+0x828>
 800589e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058a4:	e795      	b.n	80057d2 <_dtoa_r+0x6fa>
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80058ac:	42bb      	cmp	r3, r7
 80058ae:	bfbf      	itttt	lt
 80058b0:	9b07      	ldrlt	r3, [sp, #28]
 80058b2:	9707      	strlt	r7, [sp, #28]
 80058b4:	1afa      	sublt	r2, r7, r3
 80058b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058b8:	bfbb      	ittet	lt
 80058ba:	189b      	addlt	r3, r3, r2
 80058bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058be:	1bdf      	subge	r7, r3, r7
 80058c0:	2700      	movlt	r7, #0
 80058c2:	f1b9 0f00 	cmp.w	r9, #0
 80058c6:	bfb5      	itete	lt
 80058c8:	9b05      	ldrlt	r3, [sp, #20]
 80058ca:	9d05      	ldrge	r5, [sp, #20]
 80058cc:	eba3 0509 	sublt.w	r5, r3, r9
 80058d0:	464b      	movge	r3, r9
 80058d2:	bfb8      	it	lt
 80058d4:	2300      	movlt	r3, #0
 80058d6:	e77e      	b.n	80057d6 <_dtoa_r+0x6fe>
 80058d8:	9f07      	ldr	r7, [sp, #28]
 80058da:	9d05      	ldr	r5, [sp, #20]
 80058dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80058de:	e783      	b.n	80057e8 <_dtoa_r+0x710>
 80058e0:	9a07      	ldr	r2, [sp, #28]
 80058e2:	e7ab      	b.n	800583c <_dtoa_r+0x764>
 80058e4:	2300      	movs	r3, #0
 80058e6:	e7d4      	b.n	8005892 <_dtoa_r+0x7ba>
 80058e8:	9b00      	ldr	r3, [sp, #0]
 80058ea:	e7d2      	b.n	8005892 <_dtoa_r+0x7ba>
 80058ec:	2300      	movs	r3, #0
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80058f6:	6918      	ldr	r0, [r3, #16]
 80058f8:	f000 fa47 	bl	8005d8a <__hi0bits>
 80058fc:	f1c0 0020 	rsb	r0, r0, #32
 8005900:	4440      	add	r0, r8
 8005902:	f010 001f 	ands.w	r0, r0, #31
 8005906:	d047      	beq.n	8005998 <_dtoa_r+0x8c0>
 8005908:	f1c0 0320 	rsb	r3, r0, #32
 800590c:	2b04      	cmp	r3, #4
 800590e:	dd3b      	ble.n	8005988 <_dtoa_r+0x8b0>
 8005910:	9b05      	ldr	r3, [sp, #20]
 8005912:	f1c0 001c 	rsb	r0, r0, #28
 8005916:	4403      	add	r3, r0
 8005918:	9305      	str	r3, [sp, #20]
 800591a:	4405      	add	r5, r0
 800591c:	4480      	add	r8, r0
 800591e:	9b05      	ldr	r3, [sp, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dd05      	ble.n	8005930 <_dtoa_r+0x858>
 8005924:	461a      	mov	r2, r3
 8005926:	9904      	ldr	r1, [sp, #16]
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fb69 	bl	8006000 <__lshift>
 800592e:	9004      	str	r0, [sp, #16]
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	dd05      	ble.n	8005942 <_dtoa_r+0x86a>
 8005936:	4639      	mov	r1, r7
 8005938:	4642      	mov	r2, r8
 800593a:	4620      	mov	r0, r4
 800593c:	f000 fb60 	bl	8006000 <__lshift>
 8005940:	4607      	mov	r7, r0
 8005942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005944:	b353      	cbz	r3, 800599c <_dtoa_r+0x8c4>
 8005946:	4639      	mov	r1, r7
 8005948:	9804      	ldr	r0, [sp, #16]
 800594a:	f000 fbad 	bl	80060a8 <__mcmp>
 800594e:	2800      	cmp	r0, #0
 8005950:	da24      	bge.n	800599c <_dtoa_r+0x8c4>
 8005952:	2300      	movs	r3, #0
 8005954:	220a      	movs	r2, #10
 8005956:	9904      	ldr	r1, [sp, #16]
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f9db 	bl	8005d14 <__multadd>
 800595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005960:	9004      	str	r0, [sp, #16]
 8005962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 814d 	beq.w	8005c06 <_dtoa_r+0xb2e>
 800596c:	2300      	movs	r3, #0
 800596e:	4631      	mov	r1, r6
 8005970:	220a      	movs	r2, #10
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f9ce 	bl	8005d14 <__multadd>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	4606      	mov	r6, r0
 800597e:	dc4f      	bgt.n	8005a20 <_dtoa_r+0x948>
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	2b02      	cmp	r3, #2
 8005984:	dd4c      	ble.n	8005a20 <_dtoa_r+0x948>
 8005986:	e011      	b.n	80059ac <_dtoa_r+0x8d4>
 8005988:	d0c9      	beq.n	800591e <_dtoa_r+0x846>
 800598a:	9a05      	ldr	r2, [sp, #20]
 800598c:	331c      	adds	r3, #28
 800598e:	441a      	add	r2, r3
 8005990:	9205      	str	r2, [sp, #20]
 8005992:	441d      	add	r5, r3
 8005994:	4498      	add	r8, r3
 8005996:	e7c2      	b.n	800591e <_dtoa_r+0x846>
 8005998:	4603      	mov	r3, r0
 800599a:	e7f6      	b.n	800598a <_dtoa_r+0x8b2>
 800599c:	f1b9 0f00 	cmp.w	r9, #0
 80059a0:	dc38      	bgt.n	8005a14 <_dtoa_r+0x93c>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	dd35      	ble.n	8005a14 <_dtoa_r+0x93c>
 80059a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80059ac:	9b02      	ldr	r3, [sp, #8]
 80059ae:	b963      	cbnz	r3, 80059ca <_dtoa_r+0x8f2>
 80059b0:	4639      	mov	r1, r7
 80059b2:	2205      	movs	r2, #5
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 f9ad 	bl	8005d14 <__multadd>
 80059ba:	4601      	mov	r1, r0
 80059bc:	4607      	mov	r7, r0
 80059be:	9804      	ldr	r0, [sp, #16]
 80059c0:	f000 fb72 	bl	80060a8 <__mcmp>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f73f adcc 	bgt.w	8005562 <_dtoa_r+0x48a>
 80059ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059cc:	465d      	mov	r5, fp
 80059ce:	ea6f 0a03 	mvn.w	sl, r3
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	4639      	mov	r1, r7
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 f984 	bl	8005ce6 <_Bfree>
 80059de:	2e00      	cmp	r6, #0
 80059e0:	f43f aeb7 	beq.w	8005752 <_dtoa_r+0x67a>
 80059e4:	f1b9 0f00 	cmp.w	r9, #0
 80059e8:	d005      	beq.n	80059f6 <_dtoa_r+0x91e>
 80059ea:	45b1      	cmp	r9, r6
 80059ec:	d003      	beq.n	80059f6 <_dtoa_r+0x91e>
 80059ee:	4649      	mov	r1, r9
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f978 	bl	8005ce6 <_Bfree>
 80059f6:	4631      	mov	r1, r6
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f974 	bl	8005ce6 <_Bfree>
 80059fe:	e6a8      	b.n	8005752 <_dtoa_r+0x67a>
 8005a00:	2700      	movs	r7, #0
 8005a02:	463e      	mov	r6, r7
 8005a04:	e7e1      	b.n	80059ca <_dtoa_r+0x8f2>
 8005a06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a0a:	463e      	mov	r6, r7
 8005a0c:	e5a9      	b.n	8005562 <_dtoa_r+0x48a>
 8005a0e:	bf00      	nop
 8005a10:	40240000 	.word	0x40240000
 8005a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a16:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80fa 	beq.w	8005c14 <_dtoa_r+0xb3c>
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	dd05      	ble.n	8005a30 <_dtoa_r+0x958>
 8005a24:	4631      	mov	r1, r6
 8005a26:	462a      	mov	r2, r5
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fae9 	bl	8006000 <__lshift>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	9b07      	ldr	r3, [sp, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04c      	beq.n	8005ad0 <_dtoa_r+0x9f8>
 8005a36:	6871      	ldr	r1, [r6, #4]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 f920 	bl	8005c7e <_Balloc>
 8005a3e:	6932      	ldr	r2, [r6, #16]
 8005a40:	3202      	adds	r2, #2
 8005a42:	4605      	mov	r5, r0
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	f106 010c 	add.w	r1, r6, #12
 8005a4a:	300c      	adds	r0, #12
 8005a4c:	f000 f90a 	bl	8005c64 <memcpy>
 8005a50:	2201      	movs	r2, #1
 8005a52:	4629      	mov	r1, r5
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 fad3 	bl	8006000 <__lshift>
 8005a5a:	9b00      	ldr	r3, [sp, #0]
 8005a5c:	f8cd b014 	str.w	fp, [sp, #20]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	46b1      	mov	r9, r6
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	4606      	mov	r6, r0
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	9804      	ldr	r0, [sp, #16]
 8005a6e:	f7ff faa5 	bl	8004fbc <quorem>
 8005a72:	4649      	mov	r1, r9
 8005a74:	4605      	mov	r5, r0
 8005a76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a7a:	9804      	ldr	r0, [sp, #16]
 8005a7c:	f000 fb14 	bl	80060a8 <__mcmp>
 8005a80:	4632      	mov	r2, r6
 8005a82:	9000      	str	r0, [sp, #0]
 8005a84:	4639      	mov	r1, r7
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fb28 	bl	80060dc <__mdiff>
 8005a8c:	68c3      	ldr	r3, [r0, #12]
 8005a8e:	4602      	mov	r2, r0
 8005a90:	bb03      	cbnz	r3, 8005ad4 <_dtoa_r+0x9fc>
 8005a92:	4601      	mov	r1, r0
 8005a94:	9008      	str	r0, [sp, #32]
 8005a96:	9804      	ldr	r0, [sp, #16]
 8005a98:	f000 fb06 	bl	80060a8 <__mcmp>
 8005a9c:	9a08      	ldr	r2, [sp, #32]
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	9308      	str	r3, [sp, #32]
 8005aa6:	f000 f91e 	bl	8005ce6 <_Bfree>
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	b9a3      	cbnz	r3, 8005ad8 <_dtoa_r+0xa00>
 8005aae:	9a06      	ldr	r2, [sp, #24]
 8005ab0:	b992      	cbnz	r2, 8005ad8 <_dtoa_r+0xa00>
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	b982      	cbnz	r2, 8005ad8 <_dtoa_r+0xa00>
 8005ab6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005aba:	d029      	beq.n	8005b10 <_dtoa_r+0xa38>
 8005abc:	9b00      	ldr	r3, [sp, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dd01      	ble.n	8005ac6 <_dtoa_r+0x9ee>
 8005ac2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005ac6:	9b05      	ldr	r3, [sp, #20]
 8005ac8:	1c5d      	adds	r5, r3, #1
 8005aca:	f883 8000 	strb.w	r8, [r3]
 8005ace:	e782      	b.n	80059d6 <_dtoa_r+0x8fe>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	e7c2      	b.n	8005a5a <_dtoa_r+0x982>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e7e3      	b.n	8005aa0 <_dtoa_r+0x9c8>
 8005ad8:	9a00      	ldr	r2, [sp, #0]
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	db04      	blt.n	8005ae8 <_dtoa_r+0xa10>
 8005ade:	d125      	bne.n	8005b2c <_dtoa_r+0xa54>
 8005ae0:	9a06      	ldr	r2, [sp, #24]
 8005ae2:	bb1a      	cbnz	r2, 8005b2c <_dtoa_r+0xa54>
 8005ae4:	9a07      	ldr	r2, [sp, #28]
 8005ae6:	bb0a      	cbnz	r2, 8005b2c <_dtoa_r+0xa54>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	ddec      	ble.n	8005ac6 <_dtoa_r+0x9ee>
 8005aec:	2201      	movs	r2, #1
 8005aee:	9904      	ldr	r1, [sp, #16]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fa85 	bl	8006000 <__lshift>
 8005af6:	4639      	mov	r1, r7
 8005af8:	9004      	str	r0, [sp, #16]
 8005afa:	f000 fad5 	bl	80060a8 <__mcmp>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	dc03      	bgt.n	8005b0a <_dtoa_r+0xa32>
 8005b02:	d1e0      	bne.n	8005ac6 <_dtoa_r+0x9ee>
 8005b04:	f018 0f01 	tst.w	r8, #1
 8005b08:	d0dd      	beq.n	8005ac6 <_dtoa_r+0x9ee>
 8005b0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b0e:	d1d8      	bne.n	8005ac2 <_dtoa_r+0x9ea>
 8005b10:	9b05      	ldr	r3, [sp, #20]
 8005b12:	9a05      	ldr	r2, [sp, #20]
 8005b14:	1c5d      	adds	r5, r3, #1
 8005b16:	2339      	movs	r3, #57	; 0x39
 8005b18:	7013      	strb	r3, [r2, #0]
 8005b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b1e:	2b39      	cmp	r3, #57	; 0x39
 8005b20:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b24:	d04f      	beq.n	8005bc6 <_dtoa_r+0xaee>
 8005b26:	3301      	adds	r3, #1
 8005b28:	7013      	strb	r3, [r2, #0]
 8005b2a:	e754      	b.n	80059d6 <_dtoa_r+0x8fe>
 8005b2c:	9a05      	ldr	r2, [sp, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f102 0501 	add.w	r5, r2, #1
 8005b34:	dd06      	ble.n	8005b44 <_dtoa_r+0xa6c>
 8005b36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b3a:	d0e9      	beq.n	8005b10 <_dtoa_r+0xa38>
 8005b3c:	f108 0801 	add.w	r8, r8, #1
 8005b40:	9b05      	ldr	r3, [sp, #20]
 8005b42:	e7c2      	b.n	8005aca <_dtoa_r+0x9f2>
 8005b44:	9a02      	ldr	r2, [sp, #8]
 8005b46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005b4a:	eba5 030b 	sub.w	r3, r5, fp
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d021      	beq.n	8005b96 <_dtoa_r+0xabe>
 8005b52:	2300      	movs	r3, #0
 8005b54:	220a      	movs	r2, #10
 8005b56:	9904      	ldr	r1, [sp, #16]
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 f8db 	bl	8005d14 <__multadd>
 8005b5e:	45b1      	cmp	r9, r6
 8005b60:	9004      	str	r0, [sp, #16]
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	f04f 020a 	mov.w	r2, #10
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	d105      	bne.n	8005b7c <_dtoa_r+0xaa4>
 8005b70:	f000 f8d0 	bl	8005d14 <__multadd>
 8005b74:	4681      	mov	r9, r0
 8005b76:	4606      	mov	r6, r0
 8005b78:	9505      	str	r5, [sp, #20]
 8005b7a:	e776      	b.n	8005a6a <_dtoa_r+0x992>
 8005b7c:	f000 f8ca 	bl	8005d14 <__multadd>
 8005b80:	4631      	mov	r1, r6
 8005b82:	4681      	mov	r9, r0
 8005b84:	2300      	movs	r3, #0
 8005b86:	220a      	movs	r2, #10
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f8c3 	bl	8005d14 <__multadd>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	e7f2      	b.n	8005b78 <_dtoa_r+0xaa0>
 8005b92:	f04f 0900 	mov.w	r9, #0
 8005b96:	2201      	movs	r2, #1
 8005b98:	9904      	ldr	r1, [sp, #16]
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fa30 	bl	8006000 <__lshift>
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	9004      	str	r0, [sp, #16]
 8005ba4:	f000 fa80 	bl	80060a8 <__mcmp>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	dcb6      	bgt.n	8005b1a <_dtoa_r+0xa42>
 8005bac:	d102      	bne.n	8005bb4 <_dtoa_r+0xadc>
 8005bae:	f018 0f01 	tst.w	r8, #1
 8005bb2:	d1b2      	bne.n	8005b1a <_dtoa_r+0xa42>
 8005bb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bbe:	f47f af0a 	bne.w	80059d6 <_dtoa_r+0x8fe>
 8005bc2:	4615      	mov	r5, r2
 8005bc4:	e7f6      	b.n	8005bb4 <_dtoa_r+0xadc>
 8005bc6:	4593      	cmp	fp, r2
 8005bc8:	d105      	bne.n	8005bd6 <_dtoa_r+0xafe>
 8005bca:	2331      	movs	r3, #49	; 0x31
 8005bcc:	f10a 0a01 	add.w	sl, sl, #1
 8005bd0:	f88b 3000 	strb.w	r3, [fp]
 8005bd4:	e6ff      	b.n	80059d6 <_dtoa_r+0x8fe>
 8005bd6:	4615      	mov	r5, r2
 8005bd8:	e79f      	b.n	8005b1a <_dtoa_r+0xa42>
 8005bda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005c40 <_dtoa_r+0xb68>
 8005bde:	e007      	b.n	8005bf0 <_dtoa_r+0xb18>
 8005be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005be2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005c44 <_dtoa_r+0xb6c>
 8005be6:	b11b      	cbz	r3, 8005bf0 <_dtoa_r+0xb18>
 8005be8:	f10b 0308 	add.w	r3, fp, #8
 8005bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	4658      	mov	r0, fp
 8005bf2:	b017      	add	sp, #92	; 0x5c
 8005bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf8:	9b06      	ldr	r3, [sp, #24]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	f77f ae35 	ble.w	800586a <_dtoa_r+0x792>
 8005c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	e649      	b.n	800589a <_dtoa_r+0x7c2>
 8005c06:	9b02      	ldr	r3, [sp, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dc03      	bgt.n	8005c14 <_dtoa_r+0xb3c>
 8005c0c:	9b06      	ldr	r3, [sp, #24]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	f73f aecc 	bgt.w	80059ac <_dtoa_r+0x8d4>
 8005c14:	465d      	mov	r5, fp
 8005c16:	4639      	mov	r1, r7
 8005c18:	9804      	ldr	r0, [sp, #16]
 8005c1a:	f7ff f9cf 	bl	8004fbc <quorem>
 8005c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c22:	f805 8b01 	strb.w	r8, [r5], #1
 8005c26:	9a02      	ldr	r2, [sp, #8]
 8005c28:	eba5 030b 	sub.w	r3, r5, fp
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	ddb0      	ble.n	8005b92 <_dtoa_r+0xaba>
 8005c30:	2300      	movs	r3, #0
 8005c32:	220a      	movs	r2, #10
 8005c34:	9904      	ldr	r1, [sp, #16]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f86c 	bl	8005d14 <__multadd>
 8005c3c:	9004      	str	r0, [sp, #16]
 8005c3e:	e7ea      	b.n	8005c16 <_dtoa_r+0xb3e>
 8005c40:	0800663c 	.word	0x0800663c
 8005c44:	08006660 	.word	0x08006660

08005c48 <_localeconv_r>:
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <_localeconv_r+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a18      	ldr	r0, [r3, #32]
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <_localeconv_r+0x18>)
 8005c50:	2800      	cmp	r0, #0
 8005c52:	bf08      	it	eq
 8005c54:	4618      	moveq	r0, r3
 8005c56:	30f0      	adds	r0, #240	; 0xf0
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	20000070 	.word	0x20000070

08005c64 <memcpy>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	1e43      	subs	r3, r0, #1
 8005c68:	440a      	add	r2, r1
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	d100      	bne.n	8005c70 <memcpy+0xc>
 8005c6e:	bd10      	pop	{r4, pc}
 8005c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c78:	e7f7      	b.n	8005c6a <memcpy+0x6>

08005c7a <__malloc_lock>:
 8005c7a:	4770      	bx	lr

08005c7c <__malloc_unlock>:
 8005c7c:	4770      	bx	lr

08005c7e <_Balloc>:
 8005c7e:	b570      	push	{r4, r5, r6, lr}
 8005c80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c82:	4604      	mov	r4, r0
 8005c84:	460e      	mov	r6, r1
 8005c86:	b93d      	cbnz	r5, 8005c98 <_Balloc+0x1a>
 8005c88:	2010      	movs	r0, #16
 8005c8a:	f7fe fc53 	bl	8004534 <malloc>
 8005c8e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c94:	6005      	str	r5, [r0, #0]
 8005c96:	60c5      	str	r5, [r0, #12]
 8005c98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c9a:	68eb      	ldr	r3, [r5, #12]
 8005c9c:	b183      	cbz	r3, 8005cc0 <_Balloc+0x42>
 8005c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ca6:	b9b8      	cbnz	r0, 8005cd8 <_Balloc+0x5a>
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f506 	lsl.w	r5, r1, r6
 8005cae:	1d6a      	adds	r2, r5, #5
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fabe 	bl	8006234 <_calloc_r>
 8005cb8:	b160      	cbz	r0, 8005cd4 <_Balloc+0x56>
 8005cba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005cbe:	e00e      	b.n	8005cde <_Balloc+0x60>
 8005cc0:	2221      	movs	r2, #33	; 0x21
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fab5 	bl	8006234 <_calloc_r>
 8005cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ccc:	60e8      	str	r0, [r5, #12]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e4      	bne.n	8005c9e <_Balloc+0x20>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ce4:	e7f7      	b.n	8005cd6 <_Balloc+0x58>

08005ce6 <_Bfree>:
 8005ce6:	b570      	push	{r4, r5, r6, lr}
 8005ce8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cea:	4606      	mov	r6, r0
 8005cec:	460d      	mov	r5, r1
 8005cee:	b93c      	cbnz	r4, 8005d00 <_Bfree+0x1a>
 8005cf0:	2010      	movs	r0, #16
 8005cf2:	f7fe fc1f 	bl	8004534 <malloc>
 8005cf6:	6270      	str	r0, [r6, #36]	; 0x24
 8005cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cfc:	6004      	str	r4, [r0, #0]
 8005cfe:	60c4      	str	r4, [r0, #12]
 8005d00:	b13d      	cbz	r5, 8005d12 <_Bfree+0x2c>
 8005d02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d04:	686a      	ldr	r2, [r5, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d0c:	6029      	str	r1, [r5, #0]
 8005d0e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d12:	bd70      	pop	{r4, r5, r6, pc}

08005d14 <__multadd>:
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	690d      	ldr	r5, [r1, #16]
 8005d1a:	461f      	mov	r7, r3
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	f101 0c14 	add.w	ip, r1, #20
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8dc 0000 	ldr.w	r0, [ip]
 8005d2a:	b281      	uxth	r1, r0
 8005d2c:	fb02 7101 	mla	r1, r2, r1, r7
 8005d30:	0c0f      	lsrs	r7, r1, #16
 8005d32:	0c00      	lsrs	r0, r0, #16
 8005d34:	fb02 7000 	mla	r0, r2, r0, r7
 8005d38:	b289      	uxth	r1, r1
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d40:	429d      	cmp	r5, r3
 8005d42:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d46:	f84c 1b04 	str.w	r1, [ip], #4
 8005d4a:	dcec      	bgt.n	8005d26 <__multadd+0x12>
 8005d4c:	b1d7      	cbz	r7, 8005d84 <__multadd+0x70>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc12      	bgt.n	8005d7a <__multadd+0x66>
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4630      	mov	r0, r6
 8005d58:	3101      	adds	r1, #1
 8005d5a:	f7ff ff90 	bl	8005c7e <_Balloc>
 8005d5e:	6922      	ldr	r2, [r4, #16]
 8005d60:	3202      	adds	r2, #2
 8005d62:	f104 010c 	add.w	r1, r4, #12
 8005d66:	4680      	mov	r8, r0
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	300c      	adds	r0, #12
 8005d6c:	f7ff ff7a 	bl	8005c64 <memcpy>
 8005d70:	4621      	mov	r1, r4
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7ff ffb7 	bl	8005ce6 <_Bfree>
 8005d78:	4644      	mov	r4, r8
 8005d7a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d7e:	3501      	adds	r5, #1
 8005d80:	615f      	str	r7, [r3, #20]
 8005d82:	6125      	str	r5, [r4, #16]
 8005d84:	4620      	mov	r0, r4
 8005d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d8a <__hi0bits>:
 8005d8a:	0c02      	lsrs	r2, r0, #16
 8005d8c:	0412      	lsls	r2, r2, #16
 8005d8e:	4603      	mov	r3, r0
 8005d90:	b9b2      	cbnz	r2, 8005dc0 <__hi0bits+0x36>
 8005d92:	0403      	lsls	r3, r0, #16
 8005d94:	2010      	movs	r0, #16
 8005d96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d9a:	bf04      	itt	eq
 8005d9c:	021b      	lsleq	r3, r3, #8
 8005d9e:	3008      	addeq	r0, #8
 8005da0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005da4:	bf04      	itt	eq
 8005da6:	011b      	lsleq	r3, r3, #4
 8005da8:	3004      	addeq	r0, #4
 8005daa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005dae:	bf04      	itt	eq
 8005db0:	009b      	lsleq	r3, r3, #2
 8005db2:	3002      	addeq	r0, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db06      	blt.n	8005dc6 <__hi0bits+0x3c>
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	d503      	bpl.n	8005dc4 <__hi0bits+0x3a>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	4770      	bx	lr
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e7e8      	b.n	8005d96 <__hi0bits+0xc>
 8005dc4:	2020      	movs	r0, #32
 8005dc6:	4770      	bx	lr

08005dc8 <__lo0bits>:
 8005dc8:	6803      	ldr	r3, [r0, #0]
 8005dca:	f013 0207 	ands.w	r2, r3, #7
 8005dce:	4601      	mov	r1, r0
 8005dd0:	d00b      	beq.n	8005dea <__lo0bits+0x22>
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	d423      	bmi.n	8005e1e <__lo0bits+0x56>
 8005dd6:	0798      	lsls	r0, r3, #30
 8005dd8:	bf49      	itett	mi
 8005dda:	085b      	lsrmi	r3, r3, #1
 8005ddc:	089b      	lsrpl	r3, r3, #2
 8005dde:	2001      	movmi	r0, #1
 8005de0:	600b      	strmi	r3, [r1, #0]
 8005de2:	bf5c      	itt	pl
 8005de4:	600b      	strpl	r3, [r1, #0]
 8005de6:	2002      	movpl	r0, #2
 8005de8:	4770      	bx	lr
 8005dea:	b298      	uxth	r0, r3
 8005dec:	b9a8      	cbnz	r0, 8005e1a <__lo0bits+0x52>
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	2010      	movs	r0, #16
 8005df2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005df6:	bf04      	itt	eq
 8005df8:	0a1b      	lsreq	r3, r3, #8
 8005dfa:	3008      	addeq	r0, #8
 8005dfc:	071a      	lsls	r2, r3, #28
 8005dfe:	bf04      	itt	eq
 8005e00:	091b      	lsreq	r3, r3, #4
 8005e02:	3004      	addeq	r0, #4
 8005e04:	079a      	lsls	r2, r3, #30
 8005e06:	bf04      	itt	eq
 8005e08:	089b      	lsreq	r3, r3, #2
 8005e0a:	3002      	addeq	r0, #2
 8005e0c:	07da      	lsls	r2, r3, #31
 8005e0e:	d402      	bmi.n	8005e16 <__lo0bits+0x4e>
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	d006      	beq.n	8005e22 <__lo0bits+0x5a>
 8005e14:	3001      	adds	r0, #1
 8005e16:	600b      	str	r3, [r1, #0]
 8005e18:	4770      	bx	lr
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	e7e9      	b.n	8005df2 <__lo0bits+0x2a>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	4770      	bx	lr
 8005e22:	2020      	movs	r0, #32
 8005e24:	4770      	bx	lr

08005e26 <__i2b>:
 8005e26:	b510      	push	{r4, lr}
 8005e28:	460c      	mov	r4, r1
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	f7ff ff27 	bl	8005c7e <_Balloc>
 8005e30:	2201      	movs	r2, #1
 8005e32:	6144      	str	r4, [r0, #20]
 8005e34:	6102      	str	r2, [r0, #16]
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <__multiply>:
 8005e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	690a      	ldr	r2, [r1, #16]
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bfb8      	it	lt
 8005e46:	460b      	movlt	r3, r1
 8005e48:	4688      	mov	r8, r1
 8005e4a:	bfbc      	itt	lt
 8005e4c:	46a0      	movlt	r8, r4
 8005e4e:	461c      	movlt	r4, r3
 8005e50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e60:	eb07 0609 	add.w	r6, r7, r9
 8005e64:	42b3      	cmp	r3, r6
 8005e66:	bfb8      	it	lt
 8005e68:	3101      	addlt	r1, #1
 8005e6a:	f7ff ff08 	bl	8005c7e <_Balloc>
 8005e6e:	f100 0514 	add.w	r5, r0, #20
 8005e72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005e76:	462b      	mov	r3, r5
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4573      	cmp	r3, lr
 8005e7c:	d316      	bcc.n	8005eac <__multiply+0x74>
 8005e7e:	f104 0214 	add.w	r2, r4, #20
 8005e82:	f108 0114 	add.w	r1, r8, #20
 8005e86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005e8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	9b00      	ldr	r3, [sp, #0]
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d80c      	bhi.n	8005eb2 <__multiply+0x7a>
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	dd03      	ble.n	8005ea4 <__multiply+0x6c>
 8005e9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05d      	beq.n	8005f60 <__multiply+0x128>
 8005ea4:	6106      	str	r6, [r0, #16]
 8005ea6:	b003      	add	sp, #12
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	f843 2b04 	str.w	r2, [r3], #4
 8005eb0:	e7e3      	b.n	8005e7a <__multiply+0x42>
 8005eb2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005eb6:	f1bb 0f00 	cmp.w	fp, #0
 8005eba:	d023      	beq.n	8005f04 <__multiply+0xcc>
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	46ac      	mov	ip, r5
 8005ec0:	f04f 0800 	mov.w	r8, #0
 8005ec4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ec8:	f8dc a000 	ldr.w	sl, [ip]
 8005ecc:	b2a3      	uxth	r3, r4
 8005ece:	fa1f fa8a 	uxth.w	sl, sl
 8005ed2:	fb0b a303 	mla	r3, fp, r3, sl
 8005ed6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005eda:	f8dc 4000 	ldr.w	r4, [ip]
 8005ede:	4443      	add	r3, r8
 8005ee0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ee4:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ee8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005eec:	46e2      	mov	sl, ip
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005ef4:	454f      	cmp	r7, r9
 8005ef6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005efa:	f84a 3b04 	str.w	r3, [sl], #4
 8005efe:	d82b      	bhi.n	8005f58 <__multiply+0x120>
 8005f00:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f04:	9b01      	ldr	r3, [sp, #4]
 8005f06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f0a:	3204      	adds	r2, #4
 8005f0c:	f1ba 0f00 	cmp.w	sl, #0
 8005f10:	d020      	beq.n	8005f54 <__multiply+0x11c>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	4689      	mov	r9, r1
 8005f16:	46a8      	mov	r8, r5
 8005f18:	f04f 0b00 	mov.w	fp, #0
 8005f1c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005f20:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005f24:	fb0a 440c 	mla	r4, sl, ip, r4
 8005f28:	445c      	add	r4, fp
 8005f2a:	46c4      	mov	ip, r8
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f32:	f84c 3b04 	str.w	r3, [ip], #4
 8005f36:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f3a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005f3e:	0c1b      	lsrs	r3, r3, #16
 8005f40:	fb0a b303 	mla	r3, sl, r3, fp
 8005f44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f48:	454f      	cmp	r7, r9
 8005f4a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005f4e:	d805      	bhi.n	8005f5c <__multiply+0x124>
 8005f50:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f54:	3504      	adds	r5, #4
 8005f56:	e79b      	b.n	8005e90 <__multiply+0x58>
 8005f58:	46d4      	mov	ip, sl
 8005f5a:	e7b3      	b.n	8005ec4 <__multiply+0x8c>
 8005f5c:	46e0      	mov	r8, ip
 8005f5e:	e7dd      	b.n	8005f1c <__multiply+0xe4>
 8005f60:	3e01      	subs	r6, #1
 8005f62:	e799      	b.n	8005e98 <__multiply+0x60>

08005f64 <__pow5mult>:
 8005f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4615      	mov	r5, r2
 8005f6a:	f012 0203 	ands.w	r2, r2, #3
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	d007      	beq.n	8005f84 <__pow5mult+0x20>
 8005f74:	3a01      	subs	r2, #1
 8005f76:	4c21      	ldr	r4, [pc, #132]	; (8005ffc <__pow5mult+0x98>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f7e:	f7ff fec9 	bl	8005d14 <__multadd>
 8005f82:	4607      	mov	r7, r0
 8005f84:	10ad      	asrs	r5, r5, #2
 8005f86:	d035      	beq.n	8005ff4 <__pow5mult+0x90>
 8005f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f8a:	b93c      	cbnz	r4, 8005f9c <__pow5mult+0x38>
 8005f8c:	2010      	movs	r0, #16
 8005f8e:	f7fe fad1 	bl	8004534 <malloc>
 8005f92:	6270      	str	r0, [r6, #36]	; 0x24
 8005f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f98:	6004      	str	r4, [r0, #0]
 8005f9a:	60c4      	str	r4, [r0, #12]
 8005f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fa4:	b94c      	cbnz	r4, 8005fba <__pow5mult+0x56>
 8005fa6:	f240 2171 	movw	r1, #625	; 0x271
 8005faa:	4630      	mov	r0, r6
 8005fac:	f7ff ff3b 	bl	8005e26 <__i2b>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	f04f 0800 	mov.w	r8, #0
 8005fbe:	07eb      	lsls	r3, r5, #31
 8005fc0:	d50a      	bpl.n	8005fd8 <__pow5mult+0x74>
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff ff36 	bl	8005e38 <__multiply>
 8005fcc:	4639      	mov	r1, r7
 8005fce:	4681      	mov	r9, r0
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f7ff fe88 	bl	8005ce6 <_Bfree>
 8005fd6:	464f      	mov	r7, r9
 8005fd8:	106d      	asrs	r5, r5, #1
 8005fda:	d00b      	beq.n	8005ff4 <__pow5mult+0x90>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	b938      	cbnz	r0, 8005ff0 <__pow5mult+0x8c>
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff ff27 	bl	8005e38 <__multiply>
 8005fea:	6020      	str	r0, [r4, #0]
 8005fec:	f8c0 8000 	str.w	r8, [r0]
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	e7e4      	b.n	8005fbe <__pow5mult+0x5a>
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08006760 	.word	0x08006760

08006000 <__lshift>:
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	6849      	ldr	r1, [r1, #4]
 800600e:	eb0a 0903 	add.w	r9, sl, r3
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	4607      	mov	r7, r0
 8006016:	4616      	mov	r6, r2
 8006018:	f109 0501 	add.w	r5, r9, #1
 800601c:	42ab      	cmp	r3, r5
 800601e:	db32      	blt.n	8006086 <__lshift+0x86>
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff fe2c 	bl	8005c7e <_Balloc>
 8006026:	2300      	movs	r3, #0
 8006028:	4680      	mov	r8, r0
 800602a:	f100 0114 	add.w	r1, r0, #20
 800602e:	461a      	mov	r2, r3
 8006030:	4553      	cmp	r3, sl
 8006032:	db2b      	blt.n	800608c <__lshift+0x8c>
 8006034:	6920      	ldr	r0, [r4, #16]
 8006036:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800603a:	f104 0314 	add.w	r3, r4, #20
 800603e:	f016 021f 	ands.w	r2, r6, #31
 8006042:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800604a:	d025      	beq.n	8006098 <__lshift+0x98>
 800604c:	f1c2 0e20 	rsb	lr, r2, #32
 8006050:	2000      	movs	r0, #0
 8006052:	681e      	ldr	r6, [r3, #0]
 8006054:	468a      	mov	sl, r1
 8006056:	4096      	lsls	r6, r2
 8006058:	4330      	orrs	r0, r6
 800605a:	f84a 0b04 	str.w	r0, [sl], #4
 800605e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006062:	459c      	cmp	ip, r3
 8006064:	fa20 f00e 	lsr.w	r0, r0, lr
 8006068:	d814      	bhi.n	8006094 <__lshift+0x94>
 800606a:	6048      	str	r0, [r1, #4]
 800606c:	b108      	cbz	r0, 8006072 <__lshift+0x72>
 800606e:	f109 0502 	add.w	r5, r9, #2
 8006072:	3d01      	subs	r5, #1
 8006074:	4638      	mov	r0, r7
 8006076:	f8c8 5010 	str.w	r5, [r8, #16]
 800607a:	4621      	mov	r1, r4
 800607c:	f7ff fe33 	bl	8005ce6 <_Bfree>
 8006080:	4640      	mov	r0, r8
 8006082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006086:	3101      	adds	r1, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	e7c7      	b.n	800601c <__lshift+0x1c>
 800608c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006090:	3301      	adds	r3, #1
 8006092:	e7cd      	b.n	8006030 <__lshift+0x30>
 8006094:	4651      	mov	r1, sl
 8006096:	e7dc      	b.n	8006052 <__lshift+0x52>
 8006098:	3904      	subs	r1, #4
 800609a:	f853 2b04 	ldr.w	r2, [r3], #4
 800609e:	f841 2f04 	str.w	r2, [r1, #4]!
 80060a2:	459c      	cmp	ip, r3
 80060a4:	d8f9      	bhi.n	800609a <__lshift+0x9a>
 80060a6:	e7e4      	b.n	8006072 <__lshift+0x72>

080060a8 <__mcmp>:
 80060a8:	6903      	ldr	r3, [r0, #16]
 80060aa:	690a      	ldr	r2, [r1, #16]
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	b530      	push	{r4, r5, lr}
 80060b0:	d10c      	bne.n	80060cc <__mcmp+0x24>
 80060b2:	0092      	lsls	r2, r2, #2
 80060b4:	3014      	adds	r0, #20
 80060b6:	3114      	adds	r1, #20
 80060b8:	1884      	adds	r4, r0, r2
 80060ba:	4411      	add	r1, r2
 80060bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060c4:	4295      	cmp	r5, r2
 80060c6:	d003      	beq.n	80060d0 <__mcmp+0x28>
 80060c8:	d305      	bcc.n	80060d6 <__mcmp+0x2e>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd30      	pop	{r4, r5, pc}
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d3f3      	bcc.n	80060bc <__mcmp+0x14>
 80060d4:	e7fa      	b.n	80060cc <__mcmp+0x24>
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	e7f7      	b.n	80060cc <__mcmp+0x24>

080060dc <__mdiff>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	460d      	mov	r5, r1
 80060e2:	4607      	mov	r7, r0
 80060e4:	4611      	mov	r1, r2
 80060e6:	4628      	mov	r0, r5
 80060e8:	4614      	mov	r4, r2
 80060ea:	f7ff ffdd 	bl	80060a8 <__mcmp>
 80060ee:	1e06      	subs	r6, r0, #0
 80060f0:	d108      	bne.n	8006104 <__mdiff+0x28>
 80060f2:	4631      	mov	r1, r6
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff fdc2 	bl	8005c7e <_Balloc>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	bfa4      	itt	ge
 8006106:	4623      	movge	r3, r4
 8006108:	462c      	movge	r4, r5
 800610a:	4638      	mov	r0, r7
 800610c:	6861      	ldr	r1, [r4, #4]
 800610e:	bfa6      	itte	ge
 8006110:	461d      	movge	r5, r3
 8006112:	2600      	movge	r6, #0
 8006114:	2601      	movlt	r6, #1
 8006116:	f7ff fdb2 	bl	8005c7e <_Balloc>
 800611a:	692b      	ldr	r3, [r5, #16]
 800611c:	60c6      	str	r6, [r0, #12]
 800611e:	6926      	ldr	r6, [r4, #16]
 8006120:	f105 0914 	add.w	r9, r5, #20
 8006124:	f104 0214 	add.w	r2, r4, #20
 8006128:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800612c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006130:	f100 0514 	add.w	r5, r0, #20
 8006134:	f04f 0e00 	mov.w	lr, #0
 8006138:	f852 ab04 	ldr.w	sl, [r2], #4
 800613c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006140:	fa1e f18a 	uxtah	r1, lr, sl
 8006144:	b2a3      	uxth	r3, r4
 8006146:	1ac9      	subs	r1, r1, r3
 8006148:	0c23      	lsrs	r3, r4, #16
 800614a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800614e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006152:	b289      	uxth	r1, r1
 8006154:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006158:	45c8      	cmp	r8, r9
 800615a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800615e:	4694      	mov	ip, r2
 8006160:	f845 3b04 	str.w	r3, [r5], #4
 8006164:	d8e8      	bhi.n	8006138 <__mdiff+0x5c>
 8006166:	45bc      	cmp	ip, r7
 8006168:	d304      	bcc.n	8006174 <__mdiff+0x98>
 800616a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800616e:	b183      	cbz	r3, 8006192 <__mdiff+0xb6>
 8006170:	6106      	str	r6, [r0, #16]
 8006172:	e7c5      	b.n	8006100 <__mdiff+0x24>
 8006174:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006178:	fa1e f381 	uxtah	r3, lr, r1
 800617c:	141a      	asrs	r2, r3, #16
 800617e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006188:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800618c:	f845 3b04 	str.w	r3, [r5], #4
 8006190:	e7e9      	b.n	8006166 <__mdiff+0x8a>
 8006192:	3e01      	subs	r6, #1
 8006194:	e7e9      	b.n	800616a <__mdiff+0x8e>

08006196 <__d2b>:
 8006196:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800619a:	460e      	mov	r6, r1
 800619c:	2101      	movs	r1, #1
 800619e:	ec59 8b10 	vmov	r8, r9, d0
 80061a2:	4615      	mov	r5, r2
 80061a4:	f7ff fd6b 	bl	8005c7e <_Balloc>
 80061a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061ac:	4607      	mov	r7, r0
 80061ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061b2:	bb34      	cbnz	r4, 8006202 <__d2b+0x6c>
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	f1b8 0300 	subs.w	r3, r8, #0
 80061ba:	d027      	beq.n	800620c <__d2b+0x76>
 80061bc:	a802      	add	r0, sp, #8
 80061be:	f840 3d08 	str.w	r3, [r0, #-8]!
 80061c2:	f7ff fe01 	bl	8005dc8 <__lo0bits>
 80061c6:	9900      	ldr	r1, [sp, #0]
 80061c8:	b1f0      	cbz	r0, 8006208 <__d2b+0x72>
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	f1c0 0320 	rsb	r3, r0, #32
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	430b      	orrs	r3, r1
 80061d6:	40c2      	lsrs	r2, r0
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	9201      	str	r2, [sp, #4]
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf14      	ite	ne
 80061e4:	2102      	movne	r1, #2
 80061e6:	2101      	moveq	r1, #1
 80061e8:	6139      	str	r1, [r7, #16]
 80061ea:	b1c4      	cbz	r4, 800621e <__d2b+0x88>
 80061ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80061f0:	4404      	add	r4, r0
 80061f2:	6034      	str	r4, [r6, #0]
 80061f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061f8:	6028      	str	r0, [r5, #0]
 80061fa:	4638      	mov	r0, r7
 80061fc:	b003      	add	sp, #12
 80061fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006206:	e7d5      	b.n	80061b4 <__d2b+0x1e>
 8006208:	6179      	str	r1, [r7, #20]
 800620a:	e7e7      	b.n	80061dc <__d2b+0x46>
 800620c:	a801      	add	r0, sp, #4
 800620e:	f7ff fddb 	bl	8005dc8 <__lo0bits>
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	2101      	movs	r1, #1
 8006218:	6139      	str	r1, [r7, #16]
 800621a:	3020      	adds	r0, #32
 800621c:	e7e5      	b.n	80061ea <__d2b+0x54>
 800621e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006222:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006226:	6030      	str	r0, [r6, #0]
 8006228:	6918      	ldr	r0, [r3, #16]
 800622a:	f7ff fdae 	bl	8005d8a <__hi0bits>
 800622e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006232:	e7e1      	b.n	80061f8 <__d2b+0x62>

08006234 <_calloc_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	fb02 f401 	mul.w	r4, r2, r1
 800623a:	4621      	mov	r1, r4
 800623c:	f7fe f9d8 	bl	80045f0 <_malloc_r>
 8006240:	4605      	mov	r5, r0
 8006242:	b118      	cbz	r0, 800624c <_calloc_r+0x18>
 8006244:	4622      	mov	r2, r4
 8006246:	2100      	movs	r1, #0
 8006248:	f7fe f97c 	bl	8004544 <memset>
 800624c:	4628      	mov	r0, r5
 800624e:	bd38      	pop	{r3, r4, r5, pc}

08006250 <__ssputs_r>:
 8006250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006254:	688e      	ldr	r6, [r1, #8]
 8006256:	429e      	cmp	r6, r3
 8006258:	4682      	mov	sl, r0
 800625a:	460c      	mov	r4, r1
 800625c:	4690      	mov	r8, r2
 800625e:	4699      	mov	r9, r3
 8006260:	d837      	bhi.n	80062d2 <__ssputs_r+0x82>
 8006262:	898a      	ldrh	r2, [r1, #12]
 8006264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006268:	d031      	beq.n	80062ce <__ssputs_r+0x7e>
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	6909      	ldr	r1, [r1, #16]
 800626e:	1a6f      	subs	r7, r5, r1
 8006270:	6965      	ldr	r5, [r4, #20]
 8006272:	2302      	movs	r3, #2
 8006274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006278:	fb95 f5f3 	sdiv	r5, r5, r3
 800627c:	f109 0301 	add.w	r3, r9, #1
 8006280:	443b      	add	r3, r7
 8006282:	429d      	cmp	r5, r3
 8006284:	bf38      	it	cc
 8006286:	461d      	movcc	r5, r3
 8006288:	0553      	lsls	r3, r2, #21
 800628a:	d530      	bpl.n	80062ee <__ssputs_r+0x9e>
 800628c:	4629      	mov	r1, r5
 800628e:	f7fe f9af 	bl	80045f0 <_malloc_r>
 8006292:	4606      	mov	r6, r0
 8006294:	b950      	cbnz	r0, 80062ac <__ssputs_r+0x5c>
 8006296:	230c      	movs	r3, #12
 8006298:	f8ca 3000 	str.w	r3, [sl]
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ac:	463a      	mov	r2, r7
 80062ae:	6921      	ldr	r1, [r4, #16]
 80062b0:	f7ff fcd8 	bl	8005c64 <memcpy>
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	6126      	str	r6, [r4, #16]
 80062c2:	6165      	str	r5, [r4, #20]
 80062c4:	443e      	add	r6, r7
 80062c6:	1bed      	subs	r5, r5, r7
 80062c8:	6026      	str	r6, [r4, #0]
 80062ca:	60a5      	str	r5, [r4, #8]
 80062cc:	464e      	mov	r6, r9
 80062ce:	454e      	cmp	r6, r9
 80062d0:	d900      	bls.n	80062d4 <__ssputs_r+0x84>
 80062d2:	464e      	mov	r6, r9
 80062d4:	4632      	mov	r2, r6
 80062d6:	4641      	mov	r1, r8
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	f000 f91d 	bl	8006518 <memmove>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	1b9b      	subs	r3, r3, r6
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	441e      	add	r6, r3
 80062e8:	6026      	str	r6, [r4, #0]
 80062ea:	2000      	movs	r0, #0
 80062ec:	e7dc      	b.n	80062a8 <__ssputs_r+0x58>
 80062ee:	462a      	mov	r2, r5
 80062f0:	f000 f92b 	bl	800654a <_realloc_r>
 80062f4:	4606      	mov	r6, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d1e2      	bne.n	80062c0 <__ssputs_r+0x70>
 80062fa:	6921      	ldr	r1, [r4, #16]
 80062fc:	4650      	mov	r0, sl
 80062fe:	f7fe f929 	bl	8004554 <_free_r>
 8006302:	e7c8      	b.n	8006296 <__ssputs_r+0x46>

08006304 <_svfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	461d      	mov	r5, r3
 800630a:	898b      	ldrh	r3, [r1, #12]
 800630c:	061f      	lsls	r7, r3, #24
 800630e:	b09d      	sub	sp, #116	; 0x74
 8006310:	4680      	mov	r8, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4616      	mov	r6, r2
 8006316:	d50f      	bpl.n	8006338 <_svfiprintf_r+0x34>
 8006318:	690b      	ldr	r3, [r1, #16]
 800631a:	b96b      	cbnz	r3, 8006338 <_svfiprintf_r+0x34>
 800631c:	2140      	movs	r1, #64	; 0x40
 800631e:	f7fe f967 	bl	80045f0 <_malloc_r>
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	6120      	str	r0, [r4, #16]
 8006326:	b928      	cbnz	r0, 8006334 <_svfiprintf_r+0x30>
 8006328:	230c      	movs	r3, #12
 800632a:	f8c8 3000 	str.w	r3, [r8]
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	e0c8      	b.n	80064c6 <_svfiprintf_r+0x1c2>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	6163      	str	r3, [r4, #20]
 8006338:	2300      	movs	r3, #0
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	2320      	movs	r3, #32
 800633e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006342:	2330      	movs	r3, #48	; 0x30
 8006344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006348:	9503      	str	r5, [sp, #12]
 800634a:	f04f 0b01 	mov.w	fp, #1
 800634e:	4637      	mov	r7, r6
 8006350:	463d      	mov	r5, r7
 8006352:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006356:	b10b      	cbz	r3, 800635c <_svfiprintf_r+0x58>
 8006358:	2b25      	cmp	r3, #37	; 0x25
 800635a:	d13e      	bne.n	80063da <_svfiprintf_r+0xd6>
 800635c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006360:	d00b      	beq.n	800637a <_svfiprintf_r+0x76>
 8006362:	4653      	mov	r3, sl
 8006364:	4632      	mov	r2, r6
 8006366:	4621      	mov	r1, r4
 8006368:	4640      	mov	r0, r8
 800636a:	f7ff ff71 	bl	8006250 <__ssputs_r>
 800636e:	3001      	adds	r0, #1
 8006370:	f000 80a4 	beq.w	80064bc <_svfiprintf_r+0x1b8>
 8006374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006376:	4453      	add	r3, sl
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	783b      	ldrb	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 809d 	beq.w	80064bc <_svfiprintf_r+0x1b8>
 8006382:	2300      	movs	r3, #0
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006394:	931a      	str	r3, [sp, #104]	; 0x68
 8006396:	462f      	mov	r7, r5
 8006398:	2205      	movs	r2, #5
 800639a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800639e:	4850      	ldr	r0, [pc, #320]	; (80064e0 <_svfiprintf_r+0x1dc>)
 80063a0:	f7f9 ff26 	bl	80001f0 <memchr>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	b9d0      	cbnz	r0, 80063de <_svfiprintf_r+0xda>
 80063a8:	06d9      	lsls	r1, r3, #27
 80063aa:	bf44      	itt	mi
 80063ac:	2220      	movmi	r2, #32
 80063ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063b2:	071a      	lsls	r2, r3, #28
 80063b4:	bf44      	itt	mi
 80063b6:	222b      	movmi	r2, #43	; 0x2b
 80063b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063bc:	782a      	ldrb	r2, [r5, #0]
 80063be:	2a2a      	cmp	r2, #42	; 0x2a
 80063c0:	d015      	beq.n	80063ee <_svfiprintf_r+0xea>
 80063c2:	9a07      	ldr	r2, [sp, #28]
 80063c4:	462f      	mov	r7, r5
 80063c6:	2000      	movs	r0, #0
 80063c8:	250a      	movs	r5, #10
 80063ca:	4639      	mov	r1, r7
 80063cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d0:	3b30      	subs	r3, #48	; 0x30
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	d94d      	bls.n	8006472 <_svfiprintf_r+0x16e>
 80063d6:	b1b8      	cbz	r0, 8006408 <_svfiprintf_r+0x104>
 80063d8:	e00f      	b.n	80063fa <_svfiprintf_r+0xf6>
 80063da:	462f      	mov	r7, r5
 80063dc:	e7b8      	b.n	8006350 <_svfiprintf_r+0x4c>
 80063de:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <_svfiprintf_r+0x1dc>)
 80063e0:	1a80      	subs	r0, r0, r2
 80063e2:	fa0b f000 	lsl.w	r0, fp, r0
 80063e6:	4318      	orrs	r0, r3
 80063e8:	9004      	str	r0, [sp, #16]
 80063ea:	463d      	mov	r5, r7
 80063ec:	e7d3      	b.n	8006396 <_svfiprintf_r+0x92>
 80063ee:	9a03      	ldr	r2, [sp, #12]
 80063f0:	1d11      	adds	r1, r2, #4
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	9103      	str	r1, [sp, #12]
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	db01      	blt.n	80063fe <_svfiprintf_r+0xfa>
 80063fa:	9207      	str	r2, [sp, #28]
 80063fc:	e004      	b.n	8006408 <_svfiprintf_r+0x104>
 80063fe:	4252      	negs	r2, r2
 8006400:	f043 0302 	orr.w	r3, r3, #2
 8006404:	9207      	str	r2, [sp, #28]
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	783b      	ldrb	r3, [r7, #0]
 800640a:	2b2e      	cmp	r3, #46	; 0x2e
 800640c:	d10c      	bne.n	8006428 <_svfiprintf_r+0x124>
 800640e:	787b      	ldrb	r3, [r7, #1]
 8006410:	2b2a      	cmp	r3, #42	; 0x2a
 8006412:	d133      	bne.n	800647c <_svfiprintf_r+0x178>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	9203      	str	r2, [sp, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfb8      	it	lt
 8006420:	f04f 33ff 	movlt.w	r3, #4294967295
 8006424:	3702      	adds	r7, #2
 8006426:	9305      	str	r3, [sp, #20]
 8006428:	4d2e      	ldr	r5, [pc, #184]	; (80064e4 <_svfiprintf_r+0x1e0>)
 800642a:	7839      	ldrb	r1, [r7, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4628      	mov	r0, r5
 8006430:	f7f9 fede 	bl	80001f0 <memchr>
 8006434:	b138      	cbz	r0, 8006446 <_svfiprintf_r+0x142>
 8006436:	2340      	movs	r3, #64	; 0x40
 8006438:	1b40      	subs	r0, r0, r5
 800643a:	fa03 f000 	lsl.w	r0, r3, r0
 800643e:	9b04      	ldr	r3, [sp, #16]
 8006440:	4303      	orrs	r3, r0
 8006442:	3701      	adds	r7, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	7839      	ldrb	r1, [r7, #0]
 8006448:	4827      	ldr	r0, [pc, #156]	; (80064e8 <_svfiprintf_r+0x1e4>)
 800644a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800644e:	2206      	movs	r2, #6
 8006450:	1c7e      	adds	r6, r7, #1
 8006452:	f7f9 fecd 	bl	80001f0 <memchr>
 8006456:	2800      	cmp	r0, #0
 8006458:	d038      	beq.n	80064cc <_svfiprintf_r+0x1c8>
 800645a:	4b24      	ldr	r3, [pc, #144]	; (80064ec <_svfiprintf_r+0x1e8>)
 800645c:	bb13      	cbnz	r3, 80064a4 <_svfiprintf_r+0x1a0>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	3307      	adds	r3, #7
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	3308      	adds	r3, #8
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	444b      	add	r3, r9
 800646e:	9309      	str	r3, [sp, #36]	; 0x24
 8006470:	e76d      	b.n	800634e <_svfiprintf_r+0x4a>
 8006472:	fb05 3202 	mla	r2, r5, r2, r3
 8006476:	2001      	movs	r0, #1
 8006478:	460f      	mov	r7, r1
 800647a:	e7a6      	b.n	80063ca <_svfiprintf_r+0xc6>
 800647c:	2300      	movs	r3, #0
 800647e:	3701      	adds	r7, #1
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	4619      	mov	r1, r3
 8006484:	250a      	movs	r5, #10
 8006486:	4638      	mov	r0, r7
 8006488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800648c:	3a30      	subs	r2, #48	; 0x30
 800648e:	2a09      	cmp	r2, #9
 8006490:	d903      	bls.n	800649a <_svfiprintf_r+0x196>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0c8      	beq.n	8006428 <_svfiprintf_r+0x124>
 8006496:	9105      	str	r1, [sp, #20]
 8006498:	e7c6      	b.n	8006428 <_svfiprintf_r+0x124>
 800649a:	fb05 2101 	mla	r1, r5, r1, r2
 800649e:	2301      	movs	r3, #1
 80064a0:	4607      	mov	r7, r0
 80064a2:	e7f0      	b.n	8006486 <_svfiprintf_r+0x182>
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4622      	mov	r2, r4
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <_svfiprintf_r+0x1ec>)
 80064ac:	a904      	add	r1, sp, #16
 80064ae:	4640      	mov	r0, r8
 80064b0:	f7fe f98c 	bl	80047cc <_printf_float>
 80064b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064b8:	4681      	mov	r9, r0
 80064ba:	d1d6      	bne.n	800646a <_svfiprintf_r+0x166>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	065b      	lsls	r3, r3, #25
 80064c0:	f53f af35 	bmi.w	800632e <_svfiprintf_r+0x2a>
 80064c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064c6:	b01d      	add	sp, #116	; 0x74
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4622      	mov	r2, r4
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <_svfiprintf_r+0x1ec>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4640      	mov	r0, r8
 80064d8:	f7fe fc2e 	bl	8004d38 <_printf_i>
 80064dc:	e7ea      	b.n	80064b4 <_svfiprintf_r+0x1b0>
 80064de:	bf00      	nop
 80064e0:	0800676c 	.word	0x0800676c
 80064e4:	08006772 	.word	0x08006772
 80064e8:	08006776 	.word	0x08006776
 80064ec:	080047cd 	.word	0x080047cd
 80064f0:	08006251 	.word	0x08006251

080064f4 <__ascii_mbtowc>:
 80064f4:	b082      	sub	sp, #8
 80064f6:	b901      	cbnz	r1, 80064fa <__ascii_mbtowc+0x6>
 80064f8:	a901      	add	r1, sp, #4
 80064fa:	b142      	cbz	r2, 800650e <__ascii_mbtowc+0x1a>
 80064fc:	b14b      	cbz	r3, 8006512 <__ascii_mbtowc+0x1e>
 80064fe:	7813      	ldrb	r3, [r2, #0]
 8006500:	600b      	str	r3, [r1, #0]
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	1c10      	adds	r0, r2, #0
 8006506:	bf18      	it	ne
 8006508:	2001      	movne	r0, #1
 800650a:	b002      	add	sp, #8
 800650c:	4770      	bx	lr
 800650e:	4610      	mov	r0, r2
 8006510:	e7fb      	b.n	800650a <__ascii_mbtowc+0x16>
 8006512:	f06f 0001 	mvn.w	r0, #1
 8006516:	e7f8      	b.n	800650a <__ascii_mbtowc+0x16>

08006518 <memmove>:
 8006518:	4288      	cmp	r0, r1
 800651a:	b510      	push	{r4, lr}
 800651c:	eb01 0302 	add.w	r3, r1, r2
 8006520:	d807      	bhi.n	8006532 <memmove+0x1a>
 8006522:	1e42      	subs	r2, r0, #1
 8006524:	4299      	cmp	r1, r3
 8006526:	d00a      	beq.n	800653e <memmove+0x26>
 8006528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006530:	e7f8      	b.n	8006524 <memmove+0xc>
 8006532:	4283      	cmp	r3, r0
 8006534:	d9f5      	bls.n	8006522 <memmove+0xa>
 8006536:	1881      	adds	r1, r0, r2
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	42d3      	cmn	r3, r2
 800653c:	d100      	bne.n	8006540 <memmove+0x28>
 800653e:	bd10      	pop	{r4, pc}
 8006540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006544:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006548:	e7f7      	b.n	800653a <memmove+0x22>

0800654a <_realloc_r>:
 800654a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	4614      	mov	r4, r2
 8006550:	460e      	mov	r6, r1
 8006552:	b921      	cbnz	r1, 800655e <_realloc_r+0x14>
 8006554:	4611      	mov	r1, r2
 8006556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800655a:	f7fe b849 	b.w	80045f0 <_malloc_r>
 800655e:	b922      	cbnz	r2, 800656a <_realloc_r+0x20>
 8006560:	f7fd fff8 	bl	8004554 <_free_r>
 8006564:	4625      	mov	r5, r4
 8006566:	4628      	mov	r0, r5
 8006568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656a:	f000 f821 	bl	80065b0 <_malloc_usable_size_r>
 800656e:	42a0      	cmp	r0, r4
 8006570:	d20f      	bcs.n	8006592 <_realloc_r+0x48>
 8006572:	4621      	mov	r1, r4
 8006574:	4638      	mov	r0, r7
 8006576:	f7fe f83b 	bl	80045f0 <_malloc_r>
 800657a:	4605      	mov	r5, r0
 800657c:	2800      	cmp	r0, #0
 800657e:	d0f2      	beq.n	8006566 <_realloc_r+0x1c>
 8006580:	4631      	mov	r1, r6
 8006582:	4622      	mov	r2, r4
 8006584:	f7ff fb6e 	bl	8005c64 <memcpy>
 8006588:	4631      	mov	r1, r6
 800658a:	4638      	mov	r0, r7
 800658c:	f7fd ffe2 	bl	8004554 <_free_r>
 8006590:	e7e9      	b.n	8006566 <_realloc_r+0x1c>
 8006592:	4635      	mov	r5, r6
 8006594:	e7e7      	b.n	8006566 <_realloc_r+0x1c>

08006596 <__ascii_wctomb>:
 8006596:	b149      	cbz	r1, 80065ac <__ascii_wctomb+0x16>
 8006598:	2aff      	cmp	r2, #255	; 0xff
 800659a:	bf85      	ittet	hi
 800659c:	238a      	movhi	r3, #138	; 0x8a
 800659e:	6003      	strhi	r3, [r0, #0]
 80065a0:	700a      	strbls	r2, [r1, #0]
 80065a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80065a6:	bf98      	it	ls
 80065a8:	2001      	movls	r0, #1
 80065aa:	4770      	bx	lr
 80065ac:	4608      	mov	r0, r1
 80065ae:	4770      	bx	lr

080065b0 <_malloc_usable_size_r>:
 80065b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b4:	1f18      	subs	r0, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfbc      	itt	lt
 80065ba:	580b      	ldrlt	r3, [r1, r0]
 80065bc:	18c0      	addlt	r0, r0, r3
 80065be:	4770      	bx	lr

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
